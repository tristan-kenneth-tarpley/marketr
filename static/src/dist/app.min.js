export default class CampaignViewModel {
    constructor(){
        this.params = params()
        
        document.querySelectorAll('.campaign_controller').forEach(el=>{
            el.addEventListener('click', e=>{
                this.hide_root()
            })
        })
        document.querySelector('#new_campaign').addEventListener('click', e=>{
            setQueryString('campaign_view', 'new')
            this.show_new()
        })
        document.querySelector('#existing').addEventListener('click', e=>{
            setQueryString('campaign_view', 'existing')
            this.show_existing()
        })
    }

    show_new(){
        $(".views").not('#new').addClass('hidden')
        $("#new").removeClass('hidden')
    }

    show_existing(){
        $(".views").not('#existing_view').addClass('hidden')
        $("#existing_view").removeClass('hidden')
    }

    hide_root(){
        document.querySelector("#root").classList.add('hidden')
    }

    run(){
        if (this.params.has('campaign_view')){
            this.hide_root()
            switch(this.params.get('campaign_view')){
                case 'new':
                    this.show_new()
                    break
                case 'existing':
                    this.show_existing()
                    break
            }
        }
    }
}
import {NotificationsService, ScoreService, MessagingService, TaskService, AdAuditService} from './services.js'
import {params, updateURLParameter} from '/static/src/convenience/helpers.js'

export class IntakeProgressMeter {
    constructor() {
        $('.progress_meter-container').css('display', 'block')
    }
    fill(step){
        const target = `.progress_meter div:nth-of-type(${step})`
        $(target).css('background-color', '#62cde0')
        $(target).addClass('slide_in')

        $(".indicator").text(`step ${step}/3`)
    }
}

export class CoreViewModels {

	constructor(url_path) {
        this.url_path = url_path
        if (this.url_path.slice(1,10) == 'customers') {
            this.admin = true
        } else {
            this.admin = false
        }
    }

    set_real_customer(){

        if (document.querySelector("#set_real_customer")) {
            document.querySelector("#set_real_customer").addEventListener('change', e=>{
                let status = eval(e.currentTarget.value)
                let customer_id = e.currentTarget.dataset.customer_id
                fetch(`/customers/${customer_id}/real_customer`, {
                    method: 'POST',
                    headers : new Headers({
                        "content-type": "application/json"
                    }),
                    body: JSON.stringify({status})
                })
                .then(res=>res.json())
            })
        }

    }

    sync_data(){
        if (document.querySelector("#sync_data_handler")) {
            document.querySelector("#sync_data_handler").addEventListener('change', e=>{
                let status = eval(e.currentTarget.value)
                let customer_id = e.currentTarget.dataset.customer_id
                fetch(`/customers/${customer_id}/data_synced`, {
                    method: 'POST',
                    headers : new Headers({
                        "content-type": "application/json"
                    }),
                    body: JSON.stringify({status})
                })
                .then(res=>res.json())
            })
        }
    }

    left_nav_update(e) {
        let target = $(e.currentTarget)
        let id = target.attr('id')
        let nav_target,
            param_val;
        console.log(id)
        switch (id) {
            case "profile-tab":
                nav_target = $("#profile-nav")
                param_val = "profile"
                break
            case "campaigns-tab":
                nav_target = $("#campaigns-nav")
                param_val = "campaigns"
                break
            case "messages-tab":
                nav_target = $("#messages-nav")
                param_val = "messages"
                break
            case "competitors-tab":
                nav_target = $("#competitors-nav")
                param_val = "competitors"
                break
        }
        let new_url = updateURLParameter(this.url_path, 'view', param_val)    
        history.pushState(null, null, new_url)
        nav_target.addClass('active')
        $(".sidebar_li").not(nav_target).removeClass('active')
    }

    tabs() {

        let url_string = window.location.href,
            url = new URL(url_string),
            view = url.searchParams.get("view");
         
        let tab_target;
        switch(view) {
            case 'profile':
                tab_target = "#profile"
                break
            case null:
            case 'campaigns':
                tab_target = "#campaigns"
                break
            case 'messages':
                tab_target = "#messages"
                break
            case 'competitors':
                tab_target = "#competitors"
                break
        }

        $(tab_target).addClass('active')

        $(".tab-link").click(e=>{
            this.left_nav_update(e)
        }) 
        $(".tab-pane").not(tab_target).removeClass('active')
        $(`.nav-tabs`).find(`a[href='${tab_target}']`).addClass('active')
        $(".nav-tabs").find(`a`).not(`a[href='${tab_target}']`).removeClass('active') 
    }


    dashboard() {
        const smilesMapper = (name) => {
            let path = "/static/assets/img/"
            let map = {
                "bing": "Bing.png",
                "google": "GoogleAds.png",
                "linkedin": "LinkedIn.png",
                "instagram": "Instagram.png",
                "amazon": "Amazon.png",
                "twitter": "twitter.png",
                "snapchat": "Snapchat.png",
                "youtube": "YouTube.png",
                "yelp": "Yelp.png",
                "facebook": "Facebook.png"
            }
            let url = path + map[name]
            return url
        }

        document.querySelectorAll('.truncate').forEach(el=>{
            let text = el.textContent
            if (text.length > 49) {
                let truncated_text = text
                    .trim()    // remove leading and trailing spaces
                    .substring(0, 50)    // get first 600 characters
                    .split(" ") // separate characters into an array of words
                    .slice(0, -1)    // remove the last full or partial word
                    .join(" ") + "..."; // combine into a single string and append "..."

                el.innerHTML = `<span class='daText'>${truncated_text}</span> <span class='showAll'>Show more</span>`
                
                document.querySelectorAll('.showAll').forEach(el=>{
                    el.addEventListener('click', e=>{
                        const _this = e.currentTarget

                        if (el.classList.contains('clicked')) {
                            _this.classList.remove('clicked')
                            _this.parentNode.querySelector(".daText").textContent = truncated_text
                            _this.innerHTML = `<span class='showAll'>See less</span>`
                        } else {
                            _this.classList.add('clicked')
                            _this.parentNode.querySelector(".daText").textContent = text
                            _this.innerHTML = "<span class='showAll'>Show more</span>"
                        }
                    })
                })
            }
        })

        
        
        $('.results_img').each(function(){
            var val = parseInt($(this).text())
            if (!isNaN(val)){
                if (val == 2){
                    $(this).html('<img class="smilesHome" src="/static/assets/img/frown.png">')
                } else if (val == 3){
                    $(this).html('<img class="smilesHome" src="/static/assets/img/neutral.png">')
                } else if (val == 4){
                    $(this).html('<img class="smilesHome" src="/static/assets/img/smile.png">')
                } else if (val == 5){
                    $(this).html('<img class="smilesHome" src="/static/assets/img/grin.png">')
                }
            }
        })
        
        $(".platform_img").each(function(){
            var platform = $(this).text().replace(/^\s+/g, '').replace(/\s+$/g, '');
            if (platform){
                var img = smilesMapper(platform)
                $(this).html(`<img class="smilesHome" src='${img}'>`)
            }
        })
        
        $('.meter').each(function(){
            var perc = parseInt($(this).text().replace('%',''))
            $(this).addClass('special')
            $(this).find('.perc_width').css('width', perc+"%")
        })
        
        $('.sub_nav a').click(function(){
            $(document).unbind("scroll")
            $(this).addClass('targeted')
            $('.sub_nav a').not(this).removeClass('targeted')
            setTimeout(function(){ 
                $(document).bind('scroll',function(e){
                    assign_hash()
                });
            }, 1000);
        })

        const assign_hash = () => {
            $('.target').each((index, element)=> {
                if (
                   $(element).offset().top < window.pageYOffset + 10
                && $(element).offset().top + $(element).height() > window.pageYOffset + 10
                && $(element).attr('id') != "" 
                ) {
                    window.location.hash = $(element).attr('id');
                }
            });
        }

        const change_nav_active = () => {
            try {
                const hash = window.location.hash.substring(1)
                let target = `a.${hash}`
                $('.nav li a').not(target).removeClass('targeted')
                $(target).addClass("targeted")
                
            } catch (e) {
                
            }
        }

        $(document).on('scroll', e => {
            assign_hash()
        });
        
        $(window).on('hashchange', () => {
            let param = params()
            if (!param.has('campaign_view')){
                change_nav_active()    
            }
        });
        
        $(window).on('load', e => {
            const show_nav = target => {
                $(".sidebar_li").removeClass("active")
                $(`#${target}-nav`).addClass('active')
            }
            
            const urlParams = new URLSearchParams(window.location.search);
            let view = urlParams.get('view') != null || undefined ? urlParams.get('view') : 'campaigns'
            show_nav(view)
        })
    }

    score() {
        const score = new ScoreService(this.url_path, this.admin)
        score.get()
    }

    notifications() {
        const notifications = new NotificationsService(this.url_path, this.admin)
        notifications.get()

        $("#notification_list").click(()=>{
            if ($(".notification_count").text() != "") {
                $(".notification_count").remove()
            }
        })
    }

  
    

	tasks() {
        const complete_task_view = target => {
            let strike = target.parent().parent().parent().next().find('p')
            strike.css('text-decoration', 'line-through')
            strike.css('opacity', '.5')
        }
        const revert_task_view = target => {
            let strike = target.parent().parent().parent().next().find('p')
            strike.css('text-decoration', 'none')
            strike.css('opacity', '10')
        }

        $("#add_task").click(() => {
            const tasks = new TaskService(this.url_path)
            tasks.add()
        })
        $(".task_complete").change(event=>{
            const $this = $(event.currentTarget)
            const tasks = new TaskService(this.url_path)

            if($this.prop('checked')) {
                
                let val = $this.parent().parent().parent().next().html().trim() //.replace(/^\s+/g, '').replace(/\s+$/g, '');;
                val = val.slice(19,(val.length-4))
                console.log(val)
                tasks.complete(val)
                complete_task_view($this)

            } else {
                let val = $this.parent().parent().parent().next().html().trim()
                val = val.slice(71,(val.length-4))
                tasks.incomplete(val)
                revert_task_view($this)
            }
        })
        $("#remove_task").click((event)=>{
            const tasks = new TaskService(this.url_path)
            const $this = $(event.currentTarget)
            const val = $this.parent().prev().text().replace(/^\s+/g, '').replace(/\s+$/g, '');

            console.log(val)
            tasks.remove(val)
            $this.parent().parent().remove()
        })
    }

    messages() {
        const send_message = () => {
            const messagingService = new MessagingService(this.url_path)
            const msg = $("#msg").val()
            messagingService.send(msg)  
        }

        $("#send_msg").click(() => {
            send_message()
        })

        $('#msg').keydown(event=>{
            let keycode = (event.keyCode ? event.keyCode : event.which);
            if(keycode == '13' && $("#msg").is(":focus")){
                send_message()
            }
        })
    }
}



export class AuditRequest {
    constructor(){
        this.init = true
    }
    ready(){
        document.querySelector("#audit_submit").addEventListener('click', e=>{
            const website = document.querySelector("#audit_url").value
            const email = document.querySelector("#audit_email").value
            const data = {
                'url': website,
                'email': email
            }
            if (website != '' && email != ""){
                $.post('/audit_request', data, ()=>{
                    document.querySelector('#audit_section').innerHTML = "<div style='width:100%;text-align:center;'><p><strong>Got it!</strong><br>You will have a link to your audit emailed to you within the next 12 hours.</p></div>"
                    document.querySelector('#audit_gif').style.display = 'none'
                    window.location.replace("https://marketr.life/thanks/audit")
                })
            }
        })
    }
}

export class PriceViewModel {
    constructor(){
        $('#ad_spend').on('change, keyup', e => {
            let currentInput = $(e.currentTarget).val();
            let fixedInput = currentInput.replace(/\D/g, "").replace(/\B(?=(\d{3})+(?!\d))/g, ",")
            $(e.currentTarget).val(fixedInput);
        });
    }
    num_commas (num) {
        return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","); 
    }
    calc_fee (base_fee, spend, perc_of_spend) {
        return (base_fee + (spend * perc_of_spend)).toFixed(2)
    } 
    marketr_model(spend){
        let fee;
        if (spend < 250){ return 1 }
        else if (spend >= 250 && spend < 5000){ fee = 395; $("#dollar").show() }
        else if (spend >= 5000 && spend < 10000){ fee = 1495; $("#dollar").show() }
        else if (spend >= 10000){ fee = 'Contact us for details'; $("#dollar").hide() }
        return fee
    }
    marketr_test_model(tests){
        let cost_per_test = 195
        if (tests == 1) { return 1 }
        else if (tests >= 1) { return cost_per_test * tests }
    }

    competitors(spend, competitor){
        const wordstream = spend => {
            const base_fee = 1000
            let perc_of_spend;
            if (spend < 5000){ return false }
            else if (spend >= 5000 && spend < 10000){ perc_of_spend = .10 }
            else if (spend >= 10000 && spend < 25000){ perc_of_spend = .09 }
            else if (spend >= 25000 && spend < 50000){ perc_of_spend = .08 }
            else if (spend >= 50000){ perc_of_spend = .07 }
            return this.calc_fee(base_fee, spend, perc_of_spend)
        }
        const avg_agency = spend => {
            let base_fee;
            let perc_of_spend = .20;
            if (spend < 5000){ base_fee = 1000 }
            else if (spend >= 5000 && spend < 10000){ base_fee = 2000 }
            else if (spend >= 10000 && spend < 25000){ base_fee = 3000 }
            else if (spend >= 25000 && spend < 50000){ base_fee = 5000 }
            else if (spend >= 50000){ base_fee = 10000 }
            return this.calc_fee(base_fee, spend, perc_of_spend)
        }
        const adroll = spend => {
            let perc_of_spend = .20;
            let base_fee = 0;
            return this.calc_fee(base_fee, spend, perc_of_spend)
        }

        const call_table = {
            'wordstream': wordstream,
            'avg_agency': avg_agency,
            'adroll': adroll
        }
        return call_table[competitor](spend)
    }
    init(){
        const add_revert_handler = (target, secondary) => {
            $(target).blur(() => {
                if ($(target).val() == ""){
                    $(target).val(0)
                    $(secondary).text(0)
                }
            })
        }
        const populate_ad_fields = () =>{
            const spend = parseInt($("#ad_spend").val().replace(/,/g, '')),
                  competitor_name = $("#competitor_name").val(),
                  marketr_spend = this.marketr_model(spend),
                  comp_spend = this.competitors(spend, competitor_name),
                  savings = (comp_spend*12-marketr_spend*12).toFixed(2)
            
            if (!Number.isNaN(spend)) {
                if (spend <= 500){
                    $("#ad_checkout_link").attr('href', '/checkout/almost_free')
                } else if (spend > 500 && spend < 5000) {
                    $("#ad_checkout_link").attr('href', '/checkout/paid_ads')
                } else if (spend > 5000) {
                    $("#ad_checkout_link").attr('href', '/checkout/paid_ads_premium')
                }
                let comp_output = comp_spend != false ? `$${this.num_commas(comp_spend)}/month` : "Doesn't reach minimum spend"
                let savings_output = comp_output == "Doesn't reach minimum spend" ? 'N/A' : `$${savings}/year`
                $(".ads_marketr_cost").text(this.num_commas(marketr_spend))
                $("#ads_comp_est").text(this.num_commas(comp_output))                
                $("#ad_savings").text(this.num_commas(savings_output))
            }
        }

        const populate_test_fields = () => {
            const tests = parseInt($("#test_count").val().replace(/,/g, '')),
                  marketr_cost = this.marketr_test_model(tests)
            if (tests <= 1) {
                $("#testing_checkout_link").attr('href', '/checkout/almost_free')
            } else {
                $("#testing_checkout_link").attr('href', '/checkout/ab_testing')
            }
            
            if (!Number.isNaN(tests)) {
                $(".testing_marketr_cost").text(this.num_commas(marketr_cost))
                $("#testing_savings").text(this.num_commas("$" + ((3000 - marketr_cost)) * 12))
            }
        }

        $("#ad_spend").keyup( ()=> populate_ad_fields() )
        $("#competitor_name").change( ()=> populate_ad_fields() )
        add_revert_handler("#ad_spend", "#ads_marketr_cost")
        add_revert_handler("#test_count", "#testing_marketr_cost")

        $("#test_count").keyup( ()=> populate_test_fields() )
  
        // $("#competitor_name")
        // $("#ad_spend")
        // $("#test_count")
        // $("#ads_marketr_cost")
        // $("#testing_marketr_cost")
        // $("#ads_comp_est")
        // $("#testing_comp_est")
        // $("#ad_savings")
        // $("#testing_savings")
    }
}

export class AuditViewModel {
    constructor() {
        this.audit_service = new AdAuditService()
        this.level = 0
        $("#end_audit").click(()=>{
            this.audit_service.kill()
        })
        $('.affirmative').click(()=>{
            this.level++
            this.audit_service.answer(true, this.level)
        })
        $('.negative').click(()=>{
            this.level++
            this.audit_service.answer(false, this.level)
        })
        $(".admin_feedback").click(e=>{
            let $this = e.currentTarget
            $($this).siblings().toggleClass('hidden')
            window.scrollTo(0,document.body.scrollHeight);
        })
    }
}


export class WalletViewModel {
    constructor(){
    }
    
    disable(type){
        document.querySelector('.spend_submit').disabled = true;
        let copy;
        switch (type) {
            case 'almost_free':
                copy = "Your plan only allows for up to $500/month in ad spend. To spend more, <a href='/checkout/paid_ads'>upgrade your plan</a>"
                break
            case 'mid':
                copy = "Your plan only allows for up to $5,000/month in ad spend. To spend more, <a href='/checkout/paid_ads_premium'>upgrade your plan</a>"
                break
        }
        $("#plan_info").html(copy)
    }
    enable() {
        document.querySelector('.spend_submit').disabled = false;
        $("#plan_info").html('')
    }

    suggest_downgrade(){
        let copy = `
        If you want to spend less than $500/month with us, we will only charge you $1/month. If you want to proceed, <a href="/checkout/almost_free">downgrade your account</a>.
        `
        $("#plan_info").html(copy)
    }

    add_validation(){
        $(".almost_free_val").keyup(e=>{
            let $this = parseInt($(".almost_free_val").val().replace(',',''))
            if ($this > 250) {
                this.disable('almost_free')
            } else {
                this.enable()
            }
        })

        $(".ad_mid_val").keyup(e=>{

            let $this = parseInt($(".ad_mid_val").val().replace(',', ''))
            if ($this > 4999) {
                this.disable('mid')
            } else if ($this < 250) {
                setTimeout(e=>{
                    //this.suggest_downgrade()
                },1000)
            }
            else {
                this.enable()
            }
        })
    }
}




import Tactics from './tactics.js';
import Portfolio from './campaigns.js';
import cta from './campaign_cta.js';
import {Achievements, Store, Rewards} from './gamify.js'
import {IntakeProgressMeter, CoreViewModels, AuditRequest, PriceViewModel, AuditViewModel, WalletViewModel} from './ViewModels.js'
import {PaymentsService} from './services.js'
import {isNumber} from './convenience/helpers.js'
import InitFuncs from './future_refactor/InitFuncs.js'
import {select_controller} from '/static/src/components/UI_elements.js'


$('#new_email').on("blur", (event) => {
	let email = $("#new_email").val()
	if (validateEmail(email)){
		$("#new_email").removeClass('input-danger')
		document.querySelector('#email_availability').innerHTML = ""
		get_account_availability(email)

	} else {
		$("#new_email").addClass('input-danger')
		document.querySelector("#email_availability").innerHTML = '<p>Email is invalid</p>'
		$('.submit_button').attr('disabled', true)
	}
})

$("#xx, #wogf").on("click",function(event){
	const target = event.target || event.srcElement;
	switch(target.id)
	{
	   case "xx":
			$(this).parent().remove()
	   case "wogf":
		   $("#warranties_or_guarantee_freeform").focus()
	   break;
	}
});

const Controller = class {
	constructor(debug, url_path, params, helpTimer) {
		this.debug = debug
		this.url_path = url_path
		this.params = params
		this.noValLoad = ['/home',
							'/',
							'/new',
							'/admin',
							'/admin/branch',
							'class',
							'splash']
		this.intake = [
						'/begin',
						'/competitors',
						'/competitors/company',
						'/competitors/company/audience',
						'/competitors/company/audience/product',
						'/competitors/company/audience/product/product_2',
						'/competitors/company/audience/product/product_2/salescycle',
						'/goals',
						'/history',
						'/history/platforms',
						'/history/platforms/past',
						'/create',
						]
		this.helpTimer = helpTimer
	}

 	PageMap (route) {
		const map = {
			"/begin": "begin",
			"/competitors": "competitors",
			"/competitors/company": "company",
			"/competitors/company/audience": "audience",
			"/competitors/company/audience/product": "product",
			"/competitors/company/audience/product/product_2": "product_2",
			"/competitors/company/audience/product/product_2/salescycle": "salescycle",
			"/goals": "goals",
			"/history": "history",
			"/history/platforms": "platforms",
			"/history/platforms/past": "past",
			// done with intake routes
			"/demo": "demo",
			"/home": "home",
			"/customers": "customers",
			"/admin": "admin",
			"/personnel": "personnel",
			"/new": "new",
			"/create": "create",
			"/payments": "payments",
			"/pricing": "pricing",
			'/': 'index',
			'/home/settings': 'settings'
		}

		function hasNumber(myString) {
			return /\d/.test(myString);
		}
		if (route.substring(0, 10) == "/customers" && hasNumber(route)){
			
			if (route.substring(27) == '/ad_audit' && hasNumber(route)) {
				return 'audit'
			} else {
				return 'customers'
			}
		}
		else {
			return map[route]
		}
	}

	run() {
		select_controller()
		if (this.intake.includes(this.url_path)){
			const run_page = (resolve, reject) => {
				const init = new InitFuncs()
				const progress = new IntakeProgressMeter()
				switch (this.PageMap(this.url_path)) {
					case 'audience':
						init.container('audience')
						break
					case 'begin':
						progress.fill(1)
						break
					case 'competitors':
						progress.fill(2)
						break
					case 'company':
						progress.fill(3)
						setTimeout(() => {
							init.company()
						}, 1000)
						break
					case 'salescycle':
						init.salescycle()
						break
					case 'product':
						init.products()
						break
					case 'product_2':
						init.container('product_2')
						break
					case 'platforms':
						init.platforms()
						break		
				}
				resolve(init)	
			}

			const set_page = () => new Promise((resolve, reject) => {
				return run_page(resolve)
			})

			set_page()
				.then(resolve => {
					setTimeout(()=> {
						resolve.allIntake(this.params, this.url_path, this.noValLoad, this.debug, this.helpTimer)
					}, 1000)		
				})

		} else {
			const init = new InitFuncs()
			const view_model = new CoreViewModels(this.url_path)
			const game = new Achievements()
			const rewards = new Rewards()
			const store = new Store(rewards)
			
			if (this.url_path.slice(1,9) == 'checkout') {
				let payments = new PaymentsService()
				payments.process()
			}

			switch(this.url_path){
				case '/home':
				case '/home/achievements':
				case '/home/settings':
					game.lets_play()
					game.poll()
					store.init()
					break
			}
						
			switch(this.PageMap(this.url_path)) {
				case 'admin':
					init.company_view()
					break
				case 'new':
					init.create_account()
					break
				case 'personnel':
					init.personnel()	
					break
				case 'customers':
					view_model.tasks()
					view_model.messages()
					view_model.dashboard()
					view_model.dashboard()
					view_model.sync_data()
					view_model.set_real_customer()
					
					break
				case 'audit':
					view_model.tasks()
					view_model.messages()
					view_model.dashboard()
					
					const audit = new AuditViewModel()
					break
				case 'pricing':
				case 'index':
				case 'settings':
					const _cta = new cta()
					_cta.init()
					const pricing = new PriceViewModel()
					pricing.init()
					const audit_request = new AuditRequest()
					audit_request.ready()
					break
				case 'demo':
				case 'home':
					// const tactics = new Tactics(this.params)

					view_model.dashboard()
					view_model.messages()
					view_model.tabs()
					view_model.tasks()

					$(function () {
						$('[data-toggle="popover"]').popover()
					})
					break
			}
		}
	}
}



$(window).on("load", function() {
	$("#loading").fadeOut("fast");
	setTimeout(function(){
		$('#content-ready').css('visibility', 'visible')
	}, 300)
});


const callback = function(){
	const config = {
		debug: false,
		helpTimer: 400000
	}
	const VC = new Controller(
		config.debug,
		window.location.pathname,
		new URLSearchParams(window.location.search),
		config.helpTimer
	);
	VC.run()
};
  


if (
	document.readyState === "complete" ||
	(document.readyState !== "loading" && !document.documentElement.doScroll)
) {
	callback();
} else {
	document.addEventListener("DOMContentLoaded", callback);
}







const BarChart = class {
    constructor(selector, labels, data, legend) {
        this.selector = selector
        this.labels = labels
        this.data = data
        this.legend = legend
    }
    render(){
        const EmotionChartCanvas = document.querySelector(`#${this.selector}`)
        let emotional_chart = new Chart(EmotionChartCanvas, {
            type: 'bar',
            data: {
                labels: this.labels,
                datasets: [{
                    label: this.legend,
                    data: this.data,
                    responsive: true,
                    backgroundColor: [
                        'rgba(202, 125, 102, 0.7)',
                        'rgba(98, 205, 224, 0.7)',
                        'rgba(202, 125, 102, 0.5)',
                        'rgba(98, 205, 224, 0.5)',
                        'rgba(202, 125, 102, 0.3)',
                        'rgba(98, 205, 224, 0.3)'
                    ],
                    borderColor: [
                        'rgba(202, 125, 102, 0.9)',
                        'rgba(98, 205, 224, 0.9)',
                        'rgba(202, 125, 102, 0.7)',
                        'rgba(98, 205, 224, 0.7)',
                        'rgba(202, 125, 102, 0.5)',
                        'rgba(98, 205, 224, 0.5)'
                    ],
                    borderWidth: 1
                }]
            },
            options: { 
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    }
}   

const CostEstimator = class {
    constructor(avg_cpc){

        const avg = avg_cpc => (avg_cpc.reduce((a,b) => a + b, 0) / avg_cpc.length).toFixed(2)
        this.avg_cpc = avg(avg_cpc)

    }
    activate(){
        document.querySelector('#avg_cpc').textContent = this.avg_cpc
        const target = document.querySelector('#spend_target')
        let estimate = document.querySelector('#click_est')
        target.addEventListener('keyup', e=>{
            estimate.textContent = '0'
            let value = e.currentTarget.value

            const clicks = (value / this.avg_cpc ).toFixed(0)
            estimate.textContent = clicks
        })
    }
}

const secondary_load_time_check = (load_time) => {
    let load_headline = document.querySelector('#load_headline')
    let load_body = document.querySelector('#load_body')
    if (load_time <= 1) {
        load_headline.textContent = "Wow! Much fast. Very wow."
        load_body.textContent = "Your site's load time is best in class. This can help website conversions by more than 123%! Make sure to keep an eye on this and figure out what other meat you can add to your website to further increase it."
    }
    else if (load_time > 1 && load_time <= 3) {
        load_headline.textContent = "Consider me impressed!"
        load_body.textContent = "The recommended site load time is less than 3 seconds... And guess what... You passed! If you wanted to really go Superman mode, try to get it under 1 second for a 21% reduction in bounce rate."
    }
    else if (load_time > 3 && load_time <= 5) {
        load_headline.textContent = "The site better be good given how long you made us wait!"
        load_body.textContent = "You can decrease the number of users that leave immediately by 32% if your site loaded in less than 3 seconds."
    }
    else if (load_time > 5 && load_time <= 6) {
        load_headline.textContent = "The site better be good given how long you made us wait!"
        load_body.textContent = "You can decrease the number of users that leave immediately by 90% if your site loaded in less than 5 seconds."
    }
    else if (load_time > 6 && load_time <= 10) {
        load_headline.textContent = "Ah! The anticipation was KILLING me."
        load_body.textContent = "You can decrease the number of users that leave immediately by 106% if your site loaded in less than 6 seconds."
    }
    else if (load_time > 10) {
        load_headline.textContent = "Hold on, we're still waiting on... Oh wait. It just loaded."
        load_body.textContent = "You can decrease the number of users that leave immediately by 123% if your site loaded in less than 10 seconds."
    }
}


var canvas;
var canvasWidth;
var ctx;

function init() {
    canvas = document.getElementById('emotion_chart');
    if (canvas.getContext) {
        ctx = canvas.getContext("2d");

        window.addEventListener('resize', resizeCanvas, false);
        window.addEventListener('orientationchange', resizeCanvas, false);
        resizeCanvas();
    }
}

function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
}
export default class cta {
    constructor(){
        this.input = document.querySelector('#quantity')
        this.quantity = this.input ? this.input.value : 1
        this.cost = 85
        document.querySelector('#cost') ? document.querySelector('#cost').textContent = this.cost * this.quantity : console.log('not active')
        this.button = document.querySelector('#cta')

        var future = new Date();
        future.setDate(future.getDate() + 30);

     }
    init(){
        try {
            this.input.addEventListener('keyup', e=> {
                this.quantity = this.input.value
                let price = this.cost * this.quantity
                document.querySelector('#cost').textContent = price
                this.button.setAttribute('href', `/checkout/single_campaign?quantity=${this.quantity}`)
            })
            
        } catch (error) {
            console.log(error)
        }
    }
}
export default class Portfolio {
    constructor(){
        this.campaign_data = [
            {
                platform: 'facebook',
                cpl: 24,
	            spend: 2050,
	            clicks: 2.34,
	            ctr: 2.59,
	            rpc: 'coming soon'
            },
            {
                platform: 'pinterest',
                cpl: 300,
	            spend: 200,
	            clicks: 2.34,
	            ctr: 2.59,
	            rpc: 'coming soon'
            },
            {
                platform: 'twitter',
                cpl: 3500,
	            spend: 590,
	            clicks: 2.34,
	            ctr: 2.59,
	            rpc: 'coming soon'
            },
            {
                platform: 'google ads',
                cpl: 930,
	            spend: 590,
	            clicks: 2.34,
	            ctr: 2.59,
	            rpc: 'coming soon'
            }
        ]

    }

    home(metric=this.metric){
        const inspector = document.querySelector('.inspect_container')
        const active_metric = document.querySelectorAll('.active_metric')
        active_metric.forEach(el=>{
            if (el.textContent == this.metric){
                el.style.opacity = '.5'
            } else {
                el.style.opacity = '1'
            }
            el.addEventListener('click', e=>{
                this.metric = e.currentTarget.textContent
                this.home(e.currentTarget.textContent)
            })
        })
        inspector.style.display = 'none'

        this.mix_container.style.display = 'block'
        let labels = []
        for (let index in this.campaign_data){labels.push(this.campaign_data[index].platform)}

        
        const values = metric => {
            let values = [];
            for (let index in this.campaign_data){
                values.push(this.campaign_data[index][metric])
            }
            return values
        }
        
        const data = {
            labels: labels,
            datasets: [{
                label: "",
                backgroundColor: ["#01d4b4", "#ff9c00","#62cde0","#699fa1","#a5d6d9"],
                data: values(metric),
                responsive:true
            }]
        }
        const options = {
            title: {
                display: true,
                text: ''
            }
        }
        const mix = new Chart(this.ctx, {
            type: 'pie',
            data: data,
            options: options
        });

        this.ctx.addEventListener('click', e=> this.inspect(mix.getElementsAtEvent(e)[0]._index)) 
    }

    platform_chart(dataset){
        let others = [];
        for (let i in this.campaign_data){
            if (this.campaign_data[i].platform != dataset.platform){
                others.push(this.campaign_data[i].platform)
            }
        }
        let platform_icon;
        switch(dataset.platform){
            case 'google ads':
                platform_icon = 'google.com'
                break
            case 'facebook':
                platform_icon = 'facebook.com'
                break
            case 'twitter':
                platform_icon = 'twitter.com'
                break
            case 'pinterest':
                platform_icon = 'pinterest.com'
                break
            case 'linkedin':
                platform_icon = 'linkedin.com'
                break
        }
        const platform_url = `http://logo.clearbit.com/${platform_icon}`
        /*html*/
        const el = `
            <div class="row row_cancel">
                <div class="col">
                    <div class="back">
                        <button id="nav_up" class="btn btn-primary">
                            <strong><i class="now-ui-icons arrows-1_minimal-left"></i></strong>&nbsp;
                            Back
                        </button>
                    </div>
                </div>
                <div class="col">
                    <ul class="inline-list">
                        ${Object.keys(others).map(key=>{
                            return `<li class="small_txt"><button style="margin:0;" class="sum_list btn btn-neutral">${others[key]}</button></li>`
                        }).join("")}
                    </ul>
          
                </div>
            </div>
                <h5 class="center_it">${dataset.platform}</h5>
                <div class="row row_cancel">
                    <div style="text-align:left;" class="col"></div>
                    <div style="text-align:left;" class="col">
                        <p>Cost per lead:</p>
                    </div>
                    <div style="text-align:right;" class="col">
                        <p>$${dataset.cpl.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</p>
                    </div>
                    <div style="text-align:left;" class="col"></div>
                </div>
                <div class="row row_cancel">
                    <div style="text-align:left;" class="col"></div>
                    <div style="text-align:left;" class="col">
                        <p>Total spent:</p>
                    </div>
                    <div style="text-align:right;" class="col">
                        <p>$${dataset.spend.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</p>
                    </div>
                    <div style="text-align:left;" class="col"></div>
                </div>
                <div class="row row_cancel">
                    <div style="text-align:left;" class="col"></div>
                    <div style="text-align:left;" class="col">
                        <p>Clicks:</p>
                    </div>
                    <div style="text-align:right;" class="col">
                        <p>${dataset.clicks.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</p>
                    </div>
                    <div style="text-align:left;" class="col"></div>
                </div>
                <div class="row row_cancel">
                    <div style="text-align:left;" class="col"></div>
                    <div style="text-align:left;" class="col">
                        <p>Click through rate:</p>
                    </div>
                    <div style="text-align:right;" class="col">
                        <p>${dataset.ctr.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</p>
                    </div>
                    <div style="text-align:left;" class="col"></div>
                </div>
                <div class="row row_cancel">
                    <div style="text-align:left;" class="col"></div>
                    <div style="text-align:left;" class="col">
                        <p>Revenue per click:</p>
                    </div>
                    <div style="text-align:right;" class="col">
                        <p>${dataset.rpc.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</p>
                    </div>
                    <div style="text-align:left;" class="col"></div>
                </div>
        `
        return el
    }

    filter_dataset(index){
        let dataset = this.campaign_data.filter(platform => platform.platform == this.campaign_data[index].platform)
        return dataset[0]
    }

    inspect(index){
        const dataset = this.filter_dataset(index)
        const el = this.platform_chart(dataset)
        this.mix_container.style.display = 'none'
        document.querySelector('.inspect_container').style.display = 'block'
        document.querySelector('.inspect_container').innerHTML = el
        document.querySelector('#nav_up').addEventListener('click', e=>this.home(this.metric))

        const others = document.querySelectorAll('.sum_list')

        others.forEach(el => {
            el.addEventListener('click', e=>{
                const platform = e.currentTarget.textContent
                let index = this.campaign_data.findIndex(ind => ind.platform == platform)
                this.inspect(index)
            })
        });
    }
}





export default class Chat {
    constructor(type, user_email, sig, customer_id, name) {
        this.type = type
        this.user_email = user_email
        this.sig = sig
        this.customer_id = customer_id
        this.name = name
    }
    connect(){
        Talk.ready.then(()=>{
            var me = new Talk.User({
                name: this.name,
                id: this.customer_id,
                email: this.user_email,
                role: this.type
            });
            console.log('called')
            window.talkSession = new Talk.Session({
                appId: "S9ifmqxv",
                me: me,
                signature: this.sig
            });
            let operator_role;
            switch(this.type){
                case 'User':
                    operator_role = 'Admin'
                case 'Admin':
                    operator_role = 'User'
            }
            var operator = new Talk.User({
                id: "6",
                role: operator_role,
                name: "Tristan Tarpley",
                email: "info@marketr.life",
                photoUrl: "https://marketr.life/static/branding/img/tristan.jpg",
                welcomeMessage: "Hi there! How can I help you?"
            }); 
            var conversation = window.talkSession.getOrCreateConversation("item_2493");
            conversation.setParticipant(me);
            conversation.setParticipant(operator);
            var chatbox = window.talkSession.createChatbox(conversation);
            chatbox.mount(document.getElementById("talkjs-container"));
        });
    }
}
$.fn.digits = function(){ 
    return this.each(function(){ 
    	const id = $(this).attr('id')
    	const not_included = ['zip']
    	if (!not_included.includes(id)) {
       		$(this).val( $(this).val().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") );
    	} 
    })
}

const print = copy => console.log(copy)
import CampaignAnalyzer from '/static/src/components/existing-campaigns.js'
import AdSpend from '/static/src/components/Spend.js'
import PortfolioPerformance from '/static/src/components/portfolio/portfolio_performance.js'
import Budget from '/static/src/components/portfolio/Budget.js'
import Recommendations from '/static/src/components/customer/recommendations.js'
import Rec_shell from '/static/src/components/customer/recommendations.js'
export class Achievements {
    constructor(){
    }

    claim(target){
        const id = target.getAttribute('id').split('_')
        const amount = parseInt(id[0])
        const achievement_id = parseInt(id[1])

        fetch('/api/claim', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body:  JSON.stringify({
                amount: amount,
                achievement_id: achievement_id
            })
        })
            .then((res) => res.json())
            .then((data) => {
                target.parentNode.innerHTML = "<p class='small_txt'>claimed</p>"

                const amount = document.querySelectorAll(".total_credits")
                const total = data['amount']
                amount.forEach(el=>{
                    el.textContent = total.toString().replace(/\,/g, '')
                })

                setTimeout(()=>{
                    this.render_unclaimed()
                }, 1000)
            })
            .catch((err)=>console.log(err))
    }

    lets_play(){
        const claim = document.querySelectorAll('.claim_credits')
        claim.forEach(el=>{
            el.addEventListener('click', e=>{
                const $this = e.currentTarget
                $this.style.background = '#fff'
                $this.innerHTML = `<div class="loading_dots">
                                        <span></span>
                                        <span></span>
                                        <span></span>
                                        <span></span>
                                        <span></span>
                                    </div>`
                this.claim($this)
            })
        })
    }

    notification(title, body){
        /* html */
        const el = `
            <div class="toast__container">
                <div class="toast__cell">
                    <div class="toast toast--green">
                    <div class="toast__icon">
                        <svg version="1.1" class="toast__svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve">
                            <g><g><path d="M504.502,75.496c-9.997-9.998-26.205-9.998-36.204,0L161.594,382.203L43.702,264.311c-9.997-9.998-26.205-9.997-36.204,0    c-9.998,9.997-9.998,26.205,0,36.203l135.994,135.992c9.994,9.997,26.214,9.99,36.204,0L504.502,111.7    C514.5,101.703,514.499,85.494,504.502,75.496z"></path>
                            </g></g>
                        </svg>
                    </div>
                    <div class="toast__content">
                        <p class="toast__type">Achievement Unlocked: ${title.replace("`", "'")}</p>
                        <p class="toast__message">${body.replace("`", "'")}</p>
                    </div>
                    <div class="toast__close">
                        <svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15.642 15.642" xmlns:xlink="http://www.w3.org/1999/xlink" enable-background="new 0 0 15.642 15.642">
                            <path fill-rule="evenodd" d="M8.882,7.821l6.541-6.541c0.293-0.293,0.293-0.768,0-1.061  c-0.293-0.293-0.768-0.293-1.061,0L7.821,6.76L1.28,0.22c-0.293-0.293-0.768-0.293-1.061,0c-0.293,0.293-0.293,0.768,0,1.061  l6.541,6.541L0.22,14.362c-0.293,0.293-0.293,0.768,0,1.061c0.147,0.146,0.338,0.22,0.53,0.22s0.384-0.073,0.53-0.22l6.541-6.541  l6.541,6.541c0.147,0.146,0.338,0.22,0.53,0.22c0.192,0,0.384-0.073,0.53-0.22c0.293-0.293,0.293-0.768,0-1.061L8.882,7.821z"></path>
                        </svg>
                    </div>
                </div>
            </div>
        `
        return el
    }

    render_notifications(res){
        const body = document.querySelector('body')
        let notifications = document.createElement("div")
        notifications.classList.add('push_to_front')
        if (res.length > 1){
            /* html */
            notifications.innerHTML += `
                <br><button id="clear_notifications">x clear all notifications</button><br>
            `
        }
        for (let ach in res){
            if (res[ach]['title'] != ""){
                let notification = this.notification(res[ach]['title'], res[ach]['body'])
                notifications.innerHTML += '<br>' + notification
            }
        }
        body.prepend(notifications)
        const close = document.querySelectorAll('.toast__close')
        close.forEach(e=>{
            if (e != null){
                e.addEventListener('click', e=>{
                    e.preventDefault();
                    let $this = e.currentTarget
                    let parent = $this.parentNode
                    parent.parentNode.removeChild(parent)
                })
            }
        })

        const clear = document.querySelector('#clear_notifications')
        if (clear != null) {
            clear.addEventListener('click', e=>{
                const $this = e.currentTarget 
                const notifications = document.querySelector('.push_to_front')
                $this.parentNode.parentNode.removeChild(notifications)
            })
        }
    }

    render_unclaimed(){
        fetch('/api/unclaimed_achievements')
            .then(res=>res.json())
            .then(unclaimed=>{
                let ach_note = document.querySelectorAll('.ach_note')
                if (unclaimed > 0){
                    ach_note.forEach(el=>{
                        el.textContent = unclaimed
                        el.style.display = 'inline-block'
                    })
                } else {
                    ach_note.forEach(el=>{
                        el.style.display = 'none'
                    })
                }
            })
            .catch(e=>{
                console.log(e)
            })
    }

    poll(){
        this.render_unclaimed()
        fetch('/api/poll_for_state')
            .then(res=>res.json())
            .then(res=>{
                this.render_notifications(res)
            })
            .catch(e=>{
                console.log(e)
            })
    }
}









export class Store {
    constructor(rewards_obj){
        this.rewards = rewards_obj
    }

    init(){
        const buy_button = document.querySelectorAll('.pack_purchase')
        buy_button.forEach(el=>{
            el.addEventListener('click', e=>{
                const id = e.currentTarget.getAttribute('id')
                this.buy(id, e.currentTarget)
            })
        })
    }

    coin_celebration(amount){
        /* html*/
        const splash_markup = `
            <div id="splash_cont" class="hide">
                    <svg height="400" width="400" xmlns="http://www.w3.org/2000/svg">
                        <circle class="circle" cx="200" cy="200" r="195">
                    </svg>
                <img id="ruby" src="https://i.ibb.co/xf9sYXm/marketr-credit-logo.png" alt="" />
            </div>
        `
        document.querySelector('.store_container').insertAdjacentHTML("afterbegin", splash_markup)
        var splash = el("#splash_cont").addClass("animate").rmClass("hide");

        splash.rmClass("animate").addClass("hide");
        setTimeout(function(){
            this.update_amount(amount)
            splash.rmClass("hide").addClass("animate");
        }, 50);

        setTimeout(()=>{
            document.querySelector('#splash_cont').remove()
        }, 3000)
    }

    update_amount(amount){
        const credits = document.querySelectorAll('.total_credits')
        credits.forEach(el=>el.textContent = amount.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","))
    }

    notify_after_buy(data, amount, target){

        let copy;
        switch(data['type']){
            case 'tactics_rewards':
                /*html*/
                copy = `<h5>${data['title']}</h5> <p>You won more tactics...Nice! Your tactic has been added to your library</p>`
                break
            case 'credit_reward':
                let current = parseInt(document.querySelector('.total_credits').textContent.replace(/\,/g, ''))
                this.coin_celebration(data['parameter'] + current)

                setTimeout(()=>{
                    document.querySelector('.total_credits').classList.add('pulse')
                }, 3000)
                setTimeout(()=>{
                    document.querySelector('.total_credits').classList.remove('pulse')
                }, 4000)

                /*html*/
                copy = `<h5>${data['title']}</h5> </h5><p>Don't spend it all in one place! Your credits have been added to your account. Refresh the page if you don't see them right away.</p>`
                break
            case 'manual_reward':
                /*html*/
                copy = `<h5>${data['title']}</h5><p>Nice! Your Market(r) guide has been notified and will be in touch with you soon. If you JUST CAN'T WAIT, head over to <a href="/home?view=messages">messages</a> and start a conversation about it.</p>`
                break
        }

        target.parentNode.insertAdjacentHTML("afterbegin", copy)
        target.textContent = "Buy another!"
    }

    buy(id, target){
        const current_amount = parseInt(document.querySelector('.total_credits').textContent.replace(/\,/g, ''))
        
        let max;
        switch (id){
            case 'helper':
                max = 200
                break
            case 'booster':
                max = 4000
                break
            case 'rocket':
                max = 40000
                break
        }
        if (current_amount >= max){
            confirm(`Are you sure you want to buy the ${id} pack for ${max} credits?`)
            this.update_amount(current_amount-max)
            this.rewards.excite()

            fetch('/api/drop', {
                method: 'POST',
                headers : new Headers({
                    "content-type": "application/json"
                }),
                body:  JSON.stringify({
                    type: id
                })
            })
                .then((res) => res.json())
                .then((data) => {
                    this.rewards.reveal()
                    this.notify_after_buy(data, (current_amount-max), target)
                    this.rewards.get()
                })
                .catch((err)=>console.log(err))

        } else {
            target.innerHTML = "You don't have enough credits to buy this pack."
        }
    }
}












export class Rewards {
    constructor(){
        this.container = document.querySelector('.rewards_container')
    }
    reveal(){
        document.querySelector(".material_load").remove()
        document.querySelector('.store_container').style.display = 'block'
    }
    excite(){
        document.querySelector('.store_container').style.display = 'none'
        document.querySelector('.excite_container').innerHTML = `
        <div class="material_load">
            <div class="dot"></div>
            <div class="outline"><span></span></div>
        </div>`
    }

    refresh(res){
        let rewards = "";
        for (let reward in res){
            /*html*/
            rewards += `
            <div style="padding:1%;margin-bottom: 1%;" class="card negative_card">
                <p class="small_txt"><strong>${res[reward]['date']}</strong></p>
                <p>${res[reward]['achievement']}</p>
            </div>
            `
        }
        this.container.innerHTML = rewards
    }
    get(){
        fetch('/api/rewards')
            .then(res=>res.json())
            .then(res=>{
                this.refresh(res)
            })
            .catch(e=>{
                console.log(e)
            })
    }
}
export class PaymentsService {
    constructor() {
        this.stripe = Stripe('pk_live_tZr8rAfnEIUi4pZQLhKqa8VF00aOM5wPNc');
        let url_string = window.location.href,
            url = new URL(url_string)
        this.session_id = url.searchParams.get("session_id");
        this.quantity = url.searchParams.get('quantity')

        $("#checkout").click(e=>{
            this.process()
        })
    }
    process(){
        this.stripe.redirectToCheckout({
            // Make the id field from the Checkout Session creation API response
            // available to this file, so you can provide it as parameter here
            // instead of the {{CHECKOUT_SESSION_ID}} placeholder.
            sessionId: this.session_id
        }).then((result) => {
            console.log(result.error.message)
            // If `redirectToCheckout` fails due to a browser or network
            // error, display the localized error message to your customer
            // using `result.error.message`.
        });
    }
}


export class NotificationsService {
    constructor(url_path, admin=false) {
        this.url_path = url_path
        this.admin = admin
    }

    notificationEl (type, copy, admin) {
        let link;
        if (admin == false){
            switch(type){
                case 'message':
                    link = "/home?view=messages"
                    break
                case 'task':
                    link = "/home?view=campaigns"
                    break
                case 'insight':
                    link = "/home?view=campaigns#insights"
                    break
            }
        } else {
            link = "#"
        }
        const el = `<a href="${link}" class="notification dropdown-item text-warning">New ${type}: ${copy}</a>`
        return el
    }

    update(notifications) {
        let data = JSON.parse(notifications)
        let messages = []
        let tasks_and_insights = []
        Object.keys(data).forEach(key=> {
            let notification;
            let type;
            let push;
            if (data[key].message_string != null){
                type = 'message'
                let _from = data[key].message_from
                if ((this.admin == false && _from != 'customer') || (this.admin == true && _from == 'customer')){
                    notification = data[key].message_string
                    messages.push('message')
                } else {
                    push = false
                }
            } else if (data[key].task_title != null) {
                type = 'task'
                notification = data[key].task_title
                tasks_and_insights.push('task')
            } else if (data[key].insight_body != null) {
                type = 'insight'
                notification = data[key].insight_body
                tasks_and_insights.push('insight')
            }

            if (push) {
                const row = this.notificationEl(type, notification, this.admin)
                $("#notifications").append(row)
            }
        })
        if (Object.keys(data).length > 0){
            let notification_length = messages.length + tasks_and_insights.length
            if (notification_length > 0){
                $(".notification_count").css('display', 'inline')
                $(".notification_count").text(notification_length)
            } else {
                $(".notification_count").remove()
            }
        }
        if (messages.length > 0 || tasks_and_insights.length > 0){
            $(".message_cmessage_task_insight_countount").css('display', 'inline')
            $(".message_task_insight_count").text(messages.length + tasks_and_insights.length)
        } else {
            $(".message_count").remove()
        }
    }

    get() {
        if (this.admin == false) {
            $.get('/api/notifications', data=>{
                this.update(data)
            })
        } else {
            $.get(`/api/notifications`, {
                customer_id: this.url_path.slice(11, 14)
            }, data=>{
                this.update(data)
            })
        }
    }
}

export class ScoreService {
    constructor(url_path, admin=false) {
        this.url_path = url_path
        this.admin = admin
    }

    update(data) {
        let condition_class;
        let condition;
        $(".marketr-score").text(data)
        if (parseInt(data) < 390) {
            condition_class = 'score-very_weak'
            condition = 'very weak'
        } else if (parseInt(data) > 390 && parseInt(data) < 510) {
            condition_class = 'score-weak'
            condition = 'weak'
        } else if (parseInt(data) > 510 && parseInt(data) < 580) {
            condition_class = 'score-moderate'
            condition = 'moderate'
        } else if (parseInt(data) > 580 && parseInt(data) < 680) {
            condition_class = 'score-good'
            condition = 'good'
        } else if (parseInt(data) > 680) {
            condition_class = 'score-excellent'
            condition = 'excellent'
        }
        $(".score-loading").css('display', 'none')
        $('.score_container').fadeIn()
        $(".score_container h1").addClass(condition_class)
        $(".marketr-score-quality").text(condition)
    }

    handle_error(){
        const args = {'type': 'marketr score'};
        $.post('/error', args)
        $(".score-loading").css('display', 'none')
        $('#score_error').html("<p>Sorry, there's an error. We've been notified and are working on a solution!</p>")
    }

    get() {
        let data;
        if (this.admin == false) {
            data = {}
        } else {
            data = {
                customer_id: this.url_path.slice(11, 14)
            }
        }

        $.ajax({
            url: '/api/marketr_score',
            data: data,
            success: data=>{
                this.update(data)
            },
            error: ()=>{
                this.handle_error()
            },
            timeout: 15000 //in milliseconds
         });
    }
}


export class MessagingService {
    constructor(url_path) {
        this.url_path = url_path
        this.customer_id = this.url_path.substring(11)
    }

    post_message(params) {
        $.post('/api/send_message', params)
    }

    chat_box (copy, time, date) {
	
        const el = `
                    <div class="message_container">
                        <div class="chat_label">
                            <p><strong>${date} ${time}</strong></p>
                        </div>
                        <div class="chat_box chat-user">
                            ${copy}
                        </div>
                    </div>
                    `
        return el
    }

    update_messages (msg) {
        let chat = this.chat_box(msg, this.get_time(), this.get_date())
        $('.chat').prepend(chat)
        $('#msg').val("")
    }

    get_time () {
        let d = new Date()
        return d.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})
    }
    get_date () {
        let d = new Date()
        return d.toDateString().substring(4)
    }

    send(msg) {
        this.success = false
        if (msg != "" && msg != null) {
            const params = {
                "msg": msg,
                "customer_id": this.customer_id
            }
            
            const controller = new Promise(
                (resolve, reject)=>{
                    this.post_message(params)
                    this.message_success = true
                    resolve(params.msg)
                }
            )

            controller
                .then(result => {
                    if (this.message_success == true) {
                        return result
                    }
                })
                .then(result => {
                    this.update_messages(result)
                })
        }
    }
} 



export class TaskService {
    constructor (url_path) {
        this.url_path = url_path
        this.customer_id = this.url_path.substring(11)
    }

    post_task (args) {
        $.post("/api/add_task", args)
    }

    update_tasks(task){
        const taskEl = taskView(task)
        $('#task_body').prepend(taskEl)
        $('.todo').scrollTop($(".todo")[0].scrollHeight);
    }

    celebrate(){
        $("#show_confetti").fadeIn()
        setTimeout(()=>{
            $("#show_confetti").fadeOut()
        }, 2000)
    }

    complete(task){
        const args = {
            task: task,
            customer_id: this.customer_id
        }
        console.log(task)
        this.celebrate()
        $.ajax({
            method: 'POST',
            url: '/api/complete_task',
            data: args,
            success: data=>{  
                console.log('success')
            },
            error: ()=>{
                console.log('error')
            },
            timeout: 5000 //in milliseconds
         });
    }

    incomplete(task){
        const args = {
            task: task,
            customer_id: this.customer_id
        }
        $.ajax({
            method: 'POST',
            url: '/api/incomplete_task',
            data: args,
            success: data=>{  
                console.log('success')
            },
            error: ()=>{
                console.log('error')
            },
            timeout: 5000 //in milliseconds
         });
    }

    remove(task){
        const args = {
            task: task,
            customer_id: this.customer_id
        }
        $.post("/api/remove_task", args)
    }

    add () {
        let task = $("#task").val()
        if (task != "" && task != ""){
            const args = {
                customer_id: this.customer_id,
                task: $("#task_input").val()
            }

            const controller = new Promise(
                (resolve, reject) => {
                    this.post_task(args)
                    resolve(args.task)
                }
            )

            controller
                .then(task => {
                    this.update_tasks(task)
                })

        }

        
    }
}


export class TacticService {
    constructor(){

    }

    add_tactic(value, task){
        const args = {
            'task': task,
            'tactic_id': value
        }
        $.post('/api/add_task', args)
        window.location.reload()
    }
}


export class AdAuditService {
    constructor() {
        
    }

    append(res, action){
        $("#question_copy").text(res)
    }

    answer(answer, level) {
        const args = {'answer': answer, 'level': level}
        $.post('/ad_audit/answer', args, res=>{
            console.log(level)
            if (res.substring(0, 6).toLowerCase() == 'action') {
                this.end_audit(res)
            } else {
                this.append(res, false)
            }
        })
    }

    end_audit(res){
        $('.affirmative, .negative').attr('disabled', 'true')
        $("#prescription_container").removeClass('hidden')
        $("#prescription").text(res.substring(8))
        window.scrollTo(0,document.body.scrollHeight);
    }

    kill(){
        $.post('/ad_audit/kill')
        location.reload()
    }
}
import {TacticService} from './services.js'

export default class Tactics {
    constructor(params){
        this.mount = document.querySelector('#tactics_mount')
        this.loading = document.querySelector('.tactics_loading')

        const render = document.querySelectorAll('.render_tactics')
        if (params.has('view') && params.get('view') == 'campaigns') {
            this.render()
        } else {
            render.forEach(el=>{
                el.addEventListener('click', e=>{
                    if (this.mount.innerHTML == ""){
                        this.render()
                    }
                })
            })
        }
    }

    render(){
        fetch('/api/tactic_of_day')
        .then(res=>res.text())
        .then(res=>{
            this.loading.style.display = 'none'
            this.mount.innerHTML = res
            const tactics = new TacticService()
            
            $("#add_tactic").click(e=>{
                const target = e.currentTarget
                const title = $(target).siblings('#tactic_title').text()
                tactics.add_tactic(target.value, title)
            })
        })
        .catch(e=>{
            console.log(e)
        })
    }
}
import {tabs, shadow_events} from '/static/src/components/UI_elements.js'
import Listener from '/static/src/components/intel/listener.js'
import {iterate_text, modal, modal_trigger, modal_handlers, currency,currency_rounded,number,number_rounded,number_no_commas,percent,remove_commas,remove_commas_2} from '/static/src/convenience/helpers.js'
const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
        th p {
            font-size: .5em;
        }
        /*mobile typography*/
        @media only screen 
        and (min-width: 200px) 
        and (max-width: 700px)
        and (-webkit-min-device-pixel-ratio: 2) {
            td {
                padding: 0;
            }
        }

        .nav-tabs li {
            width: 100%;
        }
        .nav-tabs {
            padding: 0;
        }
        tr {
            width: 25%;
        }
        .ad_container {
            margin-top: 2%;
        }
        .spend {
            font-weight: bold;
            color: var(--primary);
        }

        .comp-badge {
            max-width: 150px;
        }

        .comp-badge.indirect {
            background-color: var(--darker-blue);
        }

        .nav-tabs {
            margin-bottom: 5%;
        }

        .traffic_meters {
            height: 10px;
        }
        .traffic_meters div {
            display: inline;
        }
        .organic_meter {
            background-color: #9CE4F1;
        }
        .paid_meter {
            background-color: var(--primary);
        }
 
    </style>
    `.trim()
}

export default class CompetitiveIntelligence extends HTMLElement {
    static get observedAttributes() {
        return ['customer-id'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null
        }

        this.css = styles()
    }

    listener(keywords){
        const el = new Listener()
        el.setAttribute('keywords', JSON.stringify(keywords))
        el.setAttribute('customer_id', this.customer_id)

        return el
    }

    shell(){

        const overview = (name, site, type) => {
            
            return /*html*/ `
            <div class="row">
                <div class="col-12">
                    <div class="row">
                        <div class="col-md-2 col-sm-12"></div>
                        <div class="col-lg-6">
                            <p>${name}</p>
                            <a class="small_txt" target="__blank" href="https://${site}">website</a>
                            <p class="small_txt comp-badge ${type}">${type}</p>
                        </div>
                        <div class='col-lg-4'></div>
                    </div>
                </div>
            </div>
            `.trim()

        }

        const traffic = (name, spend, traffic, organic, paid) => {
            /*html*/
            return `   
            <tr>
                <td>${name}</td>
                <td class="spend">${spend}</td>
                <td>${traffic}</td>
                <td data-paid="${paid}" data-organic="${organic}" class="traffic_meters_container">
                    <div class="traffic_meters paid_meter"></div>
                    <div class="traffic_meters organic_meter"></div>
                </td>
            </tr>
            `.trim()
        }

        const google_ads = comps => {
            const google = (headline, website, description) => {
                return (
                    `<div class="google_ad_preview_container">
                        <h5 style="font-size: 110%;">${headline}</h5>
                        <p class="website"><span>Ad</span> ${website}</p>
                        <p>${description}</p>
                    </div>`
                )
            }

            let labels = []
            let content = []
            for (let i of comps) {
                labels.push(i.comp_name) 
                content.push (
                    `<div class="row">
                    ${i.google_ads.map(ad=>{
                        return `
                            <div class="col-md-6 col-sm-12">
                                ${google(ad.title, ad.url, ad.body)}
                            </div>
                        `.trim()
                    }).join("")}
                    </div>
                    `
                )
            } 
            /*html*/
            return `
            <p>Google Ads</p>
            <div class="row">
                ${tabs(labels, content, 'google')}
            </div>
            `
        }

        const display_ads = comps => {
            let labels = []
            let content = []
            for (let i of comps) {
                labels.push(i.comp_name) 
                content.push (
                    `<div class="row">
                        ${ i.display_ads.length > 0 
                            ? i.display_ads.map(ad=>{
                                return `
                                    <div class="col-md-6 col-sm-12">
                                        <img onerror="this.style.display='none'" src="${ad}">
                                    </div>
                                `.trim()
                            }).join("")
                            : `<p>Hmm...It looks like ${i.comp_name} hasn't ran any display ads.</p>`
                        }
                    </div>`.trim()
                )
            } 
                /*html*/
            return `
            <p>Display ads</p>
            <div class="row">
                ${tabs(labels, content, 'display')}
            </div>
            `
        }

        const base = this.state.data
        
        /*html*/
        return `
            <div class="row">
                <div class="col-lg-3 col-sm-12">
                    ${base.map(comp=>{
                        return overview(comp.comp_name, comp.site, comp.type)
                    }).join("")}
                </div>
                <div class="col-lg-9 col-sm-12">
                    <div id="listener" class="row">
                    </div>
                </div>
            </div>
            <div class="separator"></div>

            <div class="row">
                <div class="col-md-1"></div>
                <div class="col">
                    <table style="width: 100%;overflow: auto;" class="table table-responsive table-borderless">
                        <thead>
                            <th></th>
                            <th><p>Est. Google Ad Spend per month</p></th>
                            <th><p>Web traffic</p></th>
                            <th><p>Paid vs. Organic search</p></th>
                        </thead>
                        <tbody>
                            ${base.map(comp=>{
                                return traffic(
                                    comp.comp_name, currency_rounded(comp.core.ppc_budget), 
                                    number_no_commas(comp.core.total_traffic), number_no_commas(comp.core.seo_clicks), 
                                    number_no_commas(comp.core.ppc_clicks)
                                )
                            }).join("")}
                        </tbody>
                    </table>
                </div>
                <div class="col-md-1 ad_container"></div>
            </div>

            <div class="separator"></div>

            ${google_ads(base)}

            <!--<div class="separator"></div>

            ${display_ads(base)}-->
            
        `.trim()
    }

    render(state=false){



        const loading = `
        <div class="center_it" id="stall"><span></span></div>

        <div class="row">  
            <div style="text-align:center;margin: 0 auto;" class="col">
                <div style="margin: 0 auto;" class="loading_dots">
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
            </div>
        </div>`
        
        const compile = async () => {
            this.shadow.innerHTML = ""
            /*html*/
            const markup = `
                ${this.css}
                ${state == false
                    ? loading
                    : this.shell()
                }
            `
            const el = shadow_events(markup)

            return el
        }

        compile().then(el=>{
            el.querySelectorAll('.traffic_meters').forEach(meter=>{
                const organic = remove_commas_2(meter.parentNode.dataset.organic)
                const paid = remove_commas_2(meter.parentNode.dataset.paid)

                const total = organic + paid

                if (meter.classList.contains('paid_meter')){
                    meter.style.width = `${paid/total*100}%`
                } else if (meter.classList.contains('organic_meter')){
                    meter.style.width = `${organic/total*100}%`
                }
            })

            return el
        }).then(el=>this.shadow.appendChild(el))
        .then(()=>{
            let it;
            if(this.state.data == null){
                const lines = [
                    '...Analyzing top keywords of your competitors...',
                    "...Scanning the web for related conversations...",
                    "...o_O  these look interesting...",
                    "...Check them out and get engaged!"
                ]
                it = iterate_text(lines, this.shadow.querySelector('#stall'))
            } else {
                clearInterval(it)
            }
   
        })
        
    }

    connectedCallback() {

        this.customer_id = this.getAttribute('customer_id')
        this.render()

        const body = JSON.stringify({
            customer_id: this.customer_id
        })
        
        this.state.data == null
            ?  fetch('/api/competitive_intel', {
                method: 'POST',
                headers : new Headers({
                    "content-type": "application/json"
                }),
                body
            })
                    .then(res=>res.json())
                    .then(res=>{
                        this.state.data = res
                        this.render(true)
                    })
                    .then(()=>{
                        let keywords = []
                        for (let i of this.state.data) {
                            keywords = [...keywords.flat(), {
                                'comp_name': i.comp_name,
                                'keywords': i.core.keywords.flat()
                            }]
                        }

                        return keywords
                    })
                    .then(keywords=>{
                        this.shadow.querySelector('#listener').appendChild(this.listener(keywords))
                    })
                    .catch(e=>{
                        console.log(e)
                    })
            : this.render(true)
        
    }
}
  
document.addEventListener( 'DOMContentLoaded', customElements.define('competitive-intelligence', CompetitiveIntelligence))
import {right_modal, inline_article} from '/static/src/components/UI_elements.js'
import {params} from '/static/src/convenience/helpers.js'
import {setQueryString, iterate_text, modal, modal_trigger, modal_handlers, currency,currency_rounded,number,number_rounded,number_no_commas,percent,remove_commas,remove_commas_2} from '/static/src/convenience/helpers.js'

const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('/static/assets/icons/all.min.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
   
        #allocation_canvas {
            width: 100%;
            height: 100%;
        }
        .allocation_display {
            color: var(--darker-blue);
            font-weight: bold;
        }
    </style>
    `.trim()
}

export default class AdSpend extends HTMLElement {
    static get observedAttributes() {
        return ['type', 'stage', 'revenue', 'brand_strength', 'growth_needs', 'competitiveness', 'selling_to', 'biz_model', 'active_plan'];
    }

    constructor(){
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null,
            real: null
        }

        this.css = styles()
        this.perc_or_usd = 'perc'
    }


    toggle_button(target){
        target.classList.remove('hidden')
        const $this = target
        $this.innerHTML = `<i class="fa fa-spinner fa-spin"></i>`
        setTimeout((target=$this) => {
            target.innerHTML = `recalculate`
            target.classList.add('hidden')
        }, 3000);
    }

    considerations(){

        const considerations_meta = {
            "brand<br>strength": {
                id: "brand_strength",
                hover: `<p>Brand strength is a relative measure of your brand in the marketplace you're targeting.</p>
                <p>Low | less than 5% market share</p>
                <p>Medium | 5% - 15% market share</p>
                <p>High |  more than 15% market share</p>`

            },
            "growth<br>needs": {
                id: "growth_needs",
                hover: `<p>Growth needs ties into how quickly you need (or want) to grow in the marketplace as it compares to competitors and your current position in the marketplace. </p>
                <p>Low |  No need to rapidly acquire new clients.  May be still building product, not ready to scale, and/or holding your market position.</p>
                <p>Medium | Definitely need or want some new clients, but okay to pace with the competition. </p>  
                <p>High |  Need rapid growth at all costs.</p>`

            },
            "competition": {
                id: "competitiveness",
                hover: `<p>Competitiveness specifies how crowded and intense the competition is within your specific market and niche.  </p>
                <p>Low |  Only a couple players and/or low intensity competition.  Lots of green-field available to expand into.</p>
                <p>Medium | A few established competitors and or new entrants, but more than enough market available.</p>
                <p>High |  Competition is intense.  Established players and/or many new entrants.</p>`

            }
    }

        const shell = (value, title) => {
            return (
            /*html*/
                `
                <div class='col-lg-3 col-md-3 col-sm-6 col-6 center_it'>   
                    <div id="six" data-uid="${title}" class="left-modal modal-controller button"><p>${title}</p></div>
                    ${modal(title, considerations_meta[title].hover, title)}
                    <select class="form-control considerations" id="${considerations_meta[title].id}" class="considerations_select form-control">
                        <option value="high" ${value == 'high' ? "selected" : ""}>high</option>
                        <option value="medium" ${value == 'medium' ? "selected" : ""}>medium</option>
                        <option value="low" ${value == 'low' ? "selected" : ""}>low</option>
                    </select>
                </div>
                `.trim()
            )
        }
        /*html*/
        return (
            `<div class="row row-cancel">
            <div class="col-md-3">
                <p class="small_txt">Describe your company market state by selecting Low, Medium, or High for the following:</p>
            </div>

            ${shell(this.brand_strength, "brand<br>strength")}
            ${shell(this.growth_needs, "growth<br>needs")}
            ${shell(this.competitiveness, "competition")}
            <div class="col"></div>
            <div class="col center_it">
                <button id="recalc_considerations" class="hidden btn btn-outline btn-outline-primary">Recalculate</button>
            </div>
            <div class="col"></div>
        </div>`
        )
    }

    update_cta(total, el){
        el.querySelectorAll('.campaign_cta').forEach(el=>el.setAttribute('href', `/pricing?quantity=${total}`))
        el.querySelectorAll('.num_campaigns').forEach(el=>el.textContent = total)
    }

    update_breakdown(_el){
        
        const target = _el.querySelector('#stage_breakdown')

        const display = value => this.perc_or_usd == 'usd' ? `$${value}` : `${value}%`
        const budget_ = this.data.budget
        this.update_cta(this.data.allocation[0].num_campaigns, _el)
        const data = this.data

        let counter = 0
        
        /*html*/
        const el = `
            <p>Here are the campaigns that we recommend:</p>
            ${this.data.allocation.map((set, index)=>{
                const display_num = this.perc_or_usd == 'perc' ?
                                        percent(set.spend_percent * 100) :
                                        currency_rounded(set.spend)
                /*html */
                return `
                    <p><span class="allocation_display">${display_num}</span>
                       
                            | ${set.bucket}

                            ${ set.bucket == 'seo'
                                ? `<a target="__blank" href="https://marketr.life/blog/the-total-guide-to-investing-in-search-engine-optimization">learn more</a>`
                                : ''
                            }
            
                    </p>
                    <div class="row inset">
                        <div class="col small_txt allocation_tactics awareness_tactics">
                            
                            <ul class="campaign_list">
                                ${set['campaigns'].map((i, _index)=>{
                                    counter++
                                    /*html*/
                                    return `${inline_article(i)
                                                ? `
                                                <li class="campaign_type">
                                                    ${modal_trigger(i, `campaign #${counter}: ${i} <span style="color:#62cde0;"><i class="fas fa-caret-right"></i></span>`)}
                                                    ${right_modal('', inline_article(i), i)}
                                                </li>
                                                `
                                                : `<li>campaign #${counter}: ${i}</li>`
                                            }`
                                }).join("")}
                            </ul>
                        </div>
                    </div>
                `.trim()
            }).join("")}
        `.trim()
        target.innerHTML = el
    }

    mount_chart(target){
        const ctx = target
        
        let data = []
        let labels = []
        for (let i of this.data.allocation) {
            this.perc_or_usd == 'perc'
                ? data.push(remove_commas(i.spend_percent * 100))
                : data.push(remove_commas(i.spend))
            labels.push(i.bucket)
        }

        const chart_data = {
            labels,
            datasets: [{
                label: "Ad Spend (USD)",
                backgroundColor: ["#01d4b4", "#ff9c00","#62cde0","#699fa1","#a5d6d9"],
                data,
                responsive:true
            }]
        }
        const options = {
            legend: {
               display: false
            },
            tooltips: {
               enabled: true
            },
            title: {
                display: true,
            },
            plugins: {
                datalabels:
                {
                    display: true,
                    formatter: (value, context)=> {
                        let label = context.chart.data.labels[context.dataIndex]
                        return label
                    },
                    labels: {
                        title: {
                            color: 'rgba(255,255,255,.9)',
                            weight: "bold",
                            size: "30px",
                            textAlign: "center"
                        }
                    }
                }
            }
        }

        new Chart(ctx, {type: 'pie', data: chart_data, options});
    }

    next_steps() {
        return `<div class="col-lg-5 col-md-5 col-sm-12">        
        <div class="next_steps">
            <h6>Next steps</h6>
            <div class="top">
                <h5>Do it yourself</h5>
                <p>Go forth and conquer.  Keep us posted on your successes!</p>

                <h5 class="center_it">or</h5>

                <h5>We can help</h5>
                <p>Market(r) will create, manage, and optimize your campaign(s) overtime for a flat-monthly fee.</p>

            </div>
            <div class="bottom">
                <div class="center_it">
                    <a class="btn btn-secondary" href="/pricing">view plans</a><br>
                    <a href="/schedule">want to chat first?</a>
                </div>
            </div>
        </div>
    </div>`
    }

    shell(){
        const modal_markup = `<p>We provide a recommended budget based on the following factors:</p>
        <ul class='no-dec'>
            <li>Stage of your company</li>
            <li>Annual Revenues</li>
            <li>Business model</li>
        </ul>
        
        <p>Additional factors that you may want to adjust your spend targets (either up or down) include:</p>
        <ul class='no-dec'>
            <li>Competitiveness of your product/service niche.</li>
            <li>Industry-specific adjustments i.e. financial or real-estate services may require a higher spend rate for effective results.</li>
            <li>Location.</li>
            <li>Average Customer Life Time Value.  A higher CLTV means more competitors fighting and driving up the cost to reach and acquire new customers.</li>
        </ul>`
        const uid = "how_calculated"
        /*html*/
        return (
            
            `<div class="row ${this.active_plan ? '' : 'hidden'}">
                <div class="${this.state.real && this.active_plan ? 'col-md-6 col-12' : 'col-md-6 col-12'}">
                    <p class="center_it"><strong>
                        ${this.state.real
                            ? `Ad spend budget:`
                            : `Recommended budget:`}
                    </strong></p>
                    <div class="center_it">
                        <h5>
                            <strong>${currency_rounded(parseFloat(this.viewed_budget))}</strong> /month
                            ${this.state.real && this.active_plan && this.demo != 'True' ? `<a href="/home/settings" class="small_txt">[edit]</a>`:''}
                        </h5>
                        ${this.actual_budget == null ?
                        /*html*/
                        `<div id="six" data-uid="${uid}" class="modal-controller button"><p>How is this calculated?</p></div>
                        ${modal("How is this calculated", modal_markup, uid)}
                        `
                        : 
                        /*html*/
                        `<p class="small_txt">Recommend: ${currency_rounded(this.data.recommended_budget)}/month</p>`}
                    </div>
                </div>
                <div class="center_it col">
                    <button class="budget_type actual_budget_view allocation_toggle btn ${
                        this.state.real == true
                        ? 'btn btn-secondary'
                        : 'allocation_toggle-inactive'}">real budget</button>
                    <button class="budget_type rec_budget_view allocation_toggle btn ${
                        this.state.real == false
                        ? 'btn btn-secondary'
                        : 'allocation_toggle-inactive'}">recommended</button>
                </div>
            </div>
            <div class="row row_cancel">
                <div class="col-md-2 col-12"></div>
                <div class="col-md-10 col-12 ${this.state.real && this.active_plan ? ' hidden' : ''}">
                    <p class="small_txt">View recommendations with new budget:</p>
                    <div class="form-group">
                        <input type="number" value="${number(parseFloat(this.viewed_budget))}" id="typical" class="form-control">
                        <div class="form-control-border"></div>
                    </div>
                    <p class="small_txt"><em>Changing this will affect the marketing spend mix below</em></p>
                </div>

                <div class="col-md-2 col-12 ${this.state.real && this.active_plan ? 'hidden' : ''}">
                    <button id="recalc" class="hidden btn btn-outline btn-outline-primary">Recalculate</button>
                </div>
           
            </div>

            <div class="row">
                <div class="col-lg-7 col-md-7 col-sm-12">
                    <br>
                    <div style="margin:0 auto;text-align:center;">
                        <button class="spend_num_type view_perc allocation_toggle btn ${
                            this.perc_or_usd == 'perc'
                            ? 'btn btn-secondary'
                            : 'allocation_toggle-inactive'}">%</button>
                        <button class="spend_num_type view_usd allocation_toggle btn ${
                            this.perc_or_usd == 'usd' 
                            ? 'btn btn-secondary'
                            : 'allocation_toggle-inactive'}">$</button>
                    </div>
                    <div id="stage_breakdown" class="inset">
                    </div>
                </div>
       
                ${!this.active_plan || this.demo
                    ? this.next_steps()
                    : ``
                }
                    
            </div>
            
            `
        )
    }

    compile(){

        this.budget_variance = (this.spend_rate - this.data.recommended_budget) / this.spend_rate * 100
        if (this.active_plan) {
            if (this.state.real) this.viewed_budget = this.spend_rate
            else if (this.custom_budget) this.viewed_budget = this.custom_budget
            else this.viewed_budget = this.data.recommended_budget
        } else {
            if (this.custom_budget) this.viewed_budget = this.custom_budget 
            else this.viewed_budget = this.data.recommended_budget
        }
        
        const first = async () => {
            this.shadow.innerHTML = ""
    
            const _el = document.createElement('div')
            _el.innerHTML = `
                ${this.css}
                ${this.considerations()}
                <div class="separator"></div>
                ${this.shell()}
            `
            return _el
        }

        const second = async (_el) => {

            this.num_campaigns = this.data.allocation.map(item => item.num_campaigns).reduce((prev, next) => prev + next); 
            
            this.update_breakdown(_el)
            _el.querySelector("#recalc").addEventListener("click", e=>{
                const value = _el.querySelector("#typical").value
                if (!isNaN(value)) {
                    this.toggle_button(_el.querySelector("#recalc"))
                    this.custom_budget = parseFloat(value)
                    this.render()
                }
            })
            _el.querySelector("#typical").addEventListener("keyup", e=>_el.querySelector("#recalc").classList.remove('hidden'))

            _el.querySelectorAll(".considerations").forEach(c=>{
                c.addEventListener('change', e=>{
                    _el.querySelector("#recalc_considerations").classList.remove("hidden")
                    let value = e.currentTarget.value
                    switch (e.currentTarget.id) {
                        case 'growth_needs':
                            this.growth_needs = value
                            break
                        case 'competitiveness':
                            this.competitiveness = value
                            break
                        case 'brand_strength':
                            this.brand_strength = value
                            break
                    }
                    _el.querySelector("#recalc_considerations").onclick = e => {
                        this.toggle_button(e.currentTarget)
                        this.render()
                    }
                })
            })
            _el.querySelectorAll('.allocation_toggle').forEach(btn=>{
                btn.addEventListener('click', e => {
                    const classList = e.currentTarget.classList
                    
                    if (classList.contains('spend_num_type')) {
                        classList.contains('view_perc')
                            ? this.perc_or_usd = 'perc'
                            : this.perc_or_usd = 'usd'
                        this.render()
                    } else if (classList.contains('budget_type')) {
                        (async () => {
                            this.toggle_button(e.currentTarget)
                            if (classList.contains('actual_budget_view')) {
                                setQueryString('real', 'true')
                                this.actual_budget = null
                            }
                            else {
                                setQueryString('real', 'false')
                            }
                        })().then(()=>this.render())
                    }
                })
            })

            // setTimeout(()=>{
            //     this.mount_chart(_el.querySelector('#allocation_canvas'))
            // }, 100)
            
            return _el
        }

        first()
            .then(_el => second(_el))
            .then(_el => this.shadow.appendChild(_el))
            .then(()=>{
                modal_handlers(this.shadow)
            })
    }

    detectReal(){
        const status = eval(params().get('real'))
        
        if (this.active_plan) {
            if (status == null || status == true ) return true
            else if (status == false) return false

        } else return false
    
    }

    render(){
        this.state.real = this.detectReal()

        let budget = null;
        if (this.active_plan) {
            if (this.state.real) budget = this.spend_rate ? this.spend_rate : 0
            else if (this.state.real == false && this.custom_budget) budget = this.custom_budget
            else budget = null
        } else { 
            if (this.custom_budget) budget = this.custom_budget 
            else budget = null
        }

        const body = JSON.stringify({
            customer_id: this.customer_id,
            type: this.type,
            stage: this.stage,
            revenue: this.revenue,
            brand_strength: (this.brand_strength != null) ? this.brand_strength : 'medium',
            growth_needs: (this.growth_needs != null) ? this.growth_needs : 'medium',
            competitiveness: (this.competitiveness != null) ? this.competitiveness : 'medium',
            selling_to: this.selling_to,
            biz_model: this.biz_model,
            viewed_budget: budget
        })
     
        fetch('/api/spend_allocation', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body
        })
            .then((res) => res.json())
            .then((data) => this.data = data )
            .then(()=> this.compile() )
            .catch((err)=>console.log(err))
    }

    connectedCallback(){
        this.customer_id = this.getAttribute('customer_id')
        this.type = this.getAttribute('type')
        this.stage = this.getAttribute('stage')
        this.revenue = parseInt(this.getAttribute('revenue').replace(/\,/g, ''))
        this.brand_strength = this.getAttribute('brand_strength')
        this.growth_needs = this.getAttribute('growth_needs')
        this.competitiveness = this.getAttribute('competitiveness')
        this.selling_to = this.getAttribute('selling_to')
        this.biz_model = this.getAttribute('biz_model')
        this.demo = this.getAttribute('demo') == 'False' || !this.getAttribute('demo') ? false : true
        this.active_plan = this.getAttribute('active_plan') == 'None'
                            ? false
                            : true
    

        this.spend_rate = this.getAttribute('spend_rate') != null && this.getAttribute('spend_rate') != 'None'
                            ? this.getAttribute('spend_rate')
                            : 0


        this.state.real = false

        this.render()

    }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('ad-spend', AdSpend))
export const shadow_events = markup => {
    const el = document.createElement('div')
    el.innerHTML = markup

    el.querySelectorAll('.nav-link.tab-link').forEach(tab=>{
        tab.addEventListener('click', e=> {
            const $this = e.currentTarget
            const id = $this.id
            const target = $this.dataset.target
            
            el.querySelectorAll('.nav-link.tab-link').forEach(dirty_code=>{
                if (dirty_code.dataset.group == $this.dataset.group) {
                    dirty_code.id != id
                    ? dirty_code.classList.remove('active')
                    : dirty_code.classList.add('active')
                }
            })

            el.querySelectorAll(".tab-pane").forEach( pane=> {
                if (pane.dataset.group == $this.dataset.group) {
                    if (pane.id == target){
                        pane.classList.add('show')
                        pane.classList.add('active')
                    } else {
                        pane.classList.remove('show')
                        pane.classList.remove('active')
                    }
                }
            })
        })
    })
    return el
}

export const tabs = (labels, content, uid, vertical=false) => {
    /*html*/
    const El = `
    ${vertical
        ? `<div class="row"><div class="col-lg-3 col-sm-12">`
        : ''
    }
    <ul class="nav ${vertical ? 'vertical' : ''} nav-tabs" id="${uid}myTab" role="tablist">
        ${labels.map((label, index) => {
            /*html*/
            return `
            <li class="nav-item">
                <a class="tab-link nav-link ${index == 0 ? 'active' : ''}" id="${label + uid}-tab" data-target="${label + uid}" data-group="${uid}">${label}</a>
            </li>
            `.trim()
        }).join("")}
    </ul>

    ${vertical
        ? `</div><div class="col">`
        : '<br>'
    }
    <div class="tab-content" id="myTabContent${uid}">
        ${labels.map((label, index) => {
            /*html*/
            return `
            <div data-group="${uid}" class="tab-pane ${index == 0 ? 'show active' : ''}" id="${label + uid}">
                ${content[index]}
            </div>
            `.trim()
        }).join("")}
    </div>

    ${vertical
        ? `</div></div>`
        : '<br>'
    }
    `.trim()

    return El
}



export const dots_loader = () => {
    return `
        <div style="text-align:center;margin: 0 auto;" class="col">
            <div style="margin: 0 auto;" class="loading_dots">
                <span></span>
                <span></span>
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    `.trim()
}

export const google = (headline, website, description) => {
    return (
        `<div style="text-align:left;" class="google_ad_preview_container">
            <h5 style="font-size: 110%;">${headline}</h5>
            <p class="small_txt _clip website"><span>Ad</span> ${website}</p>
            <p class="small_txt">${description}</p>
        </div>`
    )
}

export const facebook = (headline, img, copy) => {
    return (
        `
        <div class="center_it">
            <img class="fb_graphics" style="width:30%;" src="${img}">
        </div>
        <div style="width:70%;margin: 0 auto;">
            <p style="font-size: 80%;">${copy}</p>
        </div>
        `
    )
}

export const right_modal = (title, body, uid) => {
    /*html*/
    return (
        `
    <div data-uid="${uid}" id="modal-container">
        <div class="modal-background">
            <div class="_right safe modal">
                <h2>${title}</h2>
                <p>${body}</p>
            </div>
        </div>
    </div>`
    )
}

export const inline_article = (type) => {
    const article = (title, description, why, example) => {
        /*html*/
        return (
            `<h5 class="widget__title"><strong>Campaign:</strong>  ${title}</h5>
            <p><strong>Description:</strong> ${description}</p>
            <br>
            <p><strong>Why is this important?:</strong> ${why}</p>
            <br>
            <p><strong>Example campaign setup:</strong></p>
            <p class="inset">${example}</p>
            `
        )
    }

    const map = {
        'Activity-based': article(
            'Activity-based',
            'Activity-based campaigns will be targeting the users who are searching to DO something.  They may be searching using phrases like:  How do I... Where can I find... How should I... When can I...',
            `The user clearly has a need, and if your product or service can help solve that need, then you can best serve them by making your ad accessible to them. 
            `,
            `Keywords:  How do I slice a banana, How can I slice a banana, How should I slice a banana.<br>   
            Headline 1:  How To Slice Bananas?<br>
            Headline 2:  Look Like A Pro W/ BanaSlice!<br>
            Headline 3:  Order Today To Get Before Xmas<br>
            Display URL:  BanaSlice.com/how-to-slice/bananas<br>
            Description 1:  Stop Worrying About How You Can Slice Bananas.  BanaSlice Makes It Easy!<br>
            Description 2:  Easy Setup, Easy Clean Up.  Become The Envy Of Your Guests With This High Quality Slicer!
            `
        ),
        'Product / service': article(
            'Product / service',
            'Campaigns that focus on what services your business offers or what products you sell. These campaigns will target consumers who tend to use specific, long-tail keyword phrases into search bars.',
            'People who use specific, long-tail keywords know exactly what type of product or service they’re looking for, which means they have an intent to purchase or learn more about the product or services.',
            `Keywords:  Organic carpet cleaning services, Green carpet cleaning company, Eco-friendly carpet cleaning services.<br> 
            Headline 1:  Organic Carpet Cleaning Services<br> 
            Headline 2:  Gentle on Carpets and on Mother Nature<br> 
            Headline 3:  No Harmful Cleaning Agents Used<br> 
            Display URL:  carpetcleaningexperts.com/organic-carpet-cleaning<br> 
            Description 1: Chemical cleaning agents are not only harsh on the environment, they can harm your pet and kids.<br> 
            Description 2:  100% Organic Carpet Cleaning Services. Environmental-friendly and safe. Perfect for delicate carpets.<br> 
            `
        ),
        'Your brand(s)': article(
            'Your brand(s)',
            'You want these ads shown to anyone who is specifically typing your brand(s) into the search bar.  Create separate groups for your general brand and various product / service brands or trademarks.',
            'These are highly-interested searchers who are already looking for you.  Make sure your brand is front and center and they’re not distracted with competitor ads or related offerings.  It’s usually fairly low-cost to rank for your own brand, but it’s absolutely worth it, even if you’re the top organic search result.',
            `Keywords:  BanaSlice<br>
            Headline 1:  BanaSlice Slices Like a Pro<br>
            Headline 2:  Any Banana Anytime<br>
            Headline 3:  Order Today To Get Before Xmas<br>
            Display URL:  BanaSlice.com/slice/bananas<br>
            Description 1:  Stop Worrying About How You Can Slice Bananas.  BanaSlice Makes It Easy!<br>
            Description 2:  Easy Setup, Easy Clean Up.  Become The Envy Of Your Guests With This High Quality Slicer!
            `
        ),
        'Direct competitor brand(s)': article(
            'Direct competitor brand(s)',
            'You want these ads shown to people who are searching for solutions that you solve, but may only be familiar with your competitor brands.  Create separate groups for various competitors.  Tip:  Do NOT include the brand name in your headline or ad copy, using brand names you do not own can get your ad to be disapproved.',
            `These are highly-interested searchers who are already looking for the solution you solve for.  This helps the customer by making sure they’re aware of your competitive (and hopefully better fit) offering that they otherwise may not be aware of.  You will usually pay a premium for these ads, however if done right and paired with relevant landing pages, they can be very successful in attracting people who are interested in your solutions.`,
            `Keywords:  Banana Dicer 3000, 
            Headline 1:  BanaSlice Slices Like a Pro
            Headline 2:  Any Banana Anytime
            Headline 3:  Half The Price
            Display URL:  BanaSlice.com/slice/bananas
            Description 1:  Voted “Best Value Banana Slicer”. BanaSlice Makes It Easy!
            Description 2:  Slice Better Bananas For Half The Price Of The Competition.
            `
        ),
        'Retargeting': article(
            'Retargeting',
            'These campaigns target users who have performed specific actions in the past that expressed interest for the product or service. This could be anything from visiting the company’s website, to liking and following their social media pages.',
            'These users have already expressed interest in the product or service before. By showing up on their search results, it encourages name retention and gives users more chances to purchase your product or service.',
            `Audience: Users who have visited the website, watched our videos or liked/followed your social media accounts.<br>
            Headline 1:  Veteran Criminal Defense Lawyers<br>
            Headline 2:  30+ Years of Not Guilty Verdicts<br>
            Headline 3:  Consultation is 100% Free<br>
            Display URL:  veteranlawyers.com/criminal_defense<br>
            Description 1: Successful track record of “Not Guilty” and “Dismissed” Cases.<br>
            Description 2:  Call us today for your free consultation
            `
        ),
        'LinkedIn role-focused': article(
            'LinkedIn role-focused',
            'Linkedin campaigns that target people that fit a certain profile of your target audience. These can be based on particular industry, job title, and geography.  Mainly used for business-to-business (B2B). This strategy is used to sell products to professionals or businesses in relevant fields.',
            'Linkedin is where many business professionals go for work-related updates, news, and connections.  Having your ads presented while these highly targeted individuals are in that mindset can prove to be very powerful for businesses.',
            `Audience: copy-writers, sales leaders, sales managers, marketing managers
            Description: An email is never just an email - many companies get rejected because of typographical errors and grammar slips. Write professional and concise pieces for web content, email campaigns and other correspondence with our easy-to-use word processing and editing software. Order yours today.
            `
        ),
        'LinkedIn retargeting display': article(
            'LinkedIn retargeting display',
            `Linkedin display ads that target people who expressed interest in the company before - for example, people who already visited your company website. As opposed to text campaigns, display campaigns make use of graphics and banners to provide visually enticing advertising.`,
            `With the number of users Linkedin has, it’s not impossible to find previous website visitors on the platform. And since most advertisers target platforms like Facebook for their retargeting campaign, Linkedin’s retargeting campaign sphere isn’t as competitive. Display ads are used instead of pure text ads because they are more eye-catching.`,
            `Audience: Previous site visitors<br>
            Description: Still using ordinary soap and shampoo for your fur babies? Switch to our gentle formula design specially for your pets! (SInce this is a display ad, keep it short and sweet)
            `
        ),
        'Facebook demographic targeting': article(
            'Facebook demographic targeting',
            `Facebook has a targeting feature that allows you to narrow down your audience by several factors including location, age, job title, hobbies and more.`,
            `Ads without demographic targeting may get you a lot of impressions, but it won’t deliver conversions. Campaigns may end up being too expensive since people outside your target market will click on your ads. By applying demographic targeting, you ensure that only people who need the product or service you’re offering will see the ad.`,
            `Keywords: early kids reading program, advanced reading program for kids<br>
            Audience: Mothers of young children, Preschool teachers<br>
            Description: Do you know that almost half of kids struggle when learning to read! There’s no shame in finding new and advanced ways to make reading easier and more fun for kids! We use the latest teaching strategies coupled with a fun, interactive environment to motivate kids and help them enjoy reading!<br>
            Headline: Help your kids learn how to read today!<br>
            Landing page: <a href="http://www.advancedkidsreading.com/kids-reading-program" target="__blank">http://www.advancedkidsreading.com/kids-reading-program</a>
            `
        ),
        'Facebook retargeting display': article(
            'Facebook retargeting display',
            `Facebook campaigns that target users who expressed interest in the product or service in the past either by visiting the website or the company’s Facebook page. Your ads will only appear for audiences who meet this criteria.`,
            `Almost everyone has a Facebook account, so it’s easy to find prior website visitors on the platform. The goal of these ads is to encourage brand retention in hopes that the consumer is now ready to purchase.`,
            `Keywords: convenient banana slicer, automated banana slicer<br>
            Audience: Previous website visitors or FB page visitors.<br>
            Description: People love bananas, but slicing them? Not so much. But with our revolutionary banana slicer, you get clean, even slices with just one pull of the lever. And best of all, no sticky banana residue on your knives!<br>
            Headline: Banana slicing made easy!<br>
            Landing page: BanaSlice.com/
            `
        ),
        'Primary issue(s) + solution content': article(
            'Primary issue(s) + solution content',
            `This type of campaign focuses on a specific target market concern and creates content that offers a solution to this concern or problem.`,
            `Presenting solutions to your consumers’ concerns will help elevate your business and brand you as a subject matter expert. It’s also easier to market your product or service as the solution to the problem this way.`,
            `Keywords:  lock repair 24/7, locksmith available 24/7, on-call locksmith<br>
            Description: An article that helps solve people’s problem with getting locked out of their homes or vehicles outside a regular locksmith’s office hours. The article’s goal is to inform consumers that some locksmiths are on-call and work around the clock<br>
            Meta Title: Solve Your Lock Woes With 24/7 On-Call Locksmith Service<br>
            Meta Description: Find yourself locked out of the house in the wee hours of the morning? Our professional locksmiths are always available 24 hours a day, even on weekends and holidays.
            `
        ),
        'Lead nurturing drip': article(
            `Lead nurturing drip`,
            `This campaign’s goal is to maintain interest from users who have chosen to sign up for promotional emails or rss feeds.`,
            `Consumers who willingly sign up for promotional emails are interested in the product or service, but there’s a blocker. It’s important to maintain a good relationship with these leads as they will most likely purchase once that blocker is removed.`,
            `Sample blocker: Rates too high<br>
            Email Campaign: 30% off on programming summer camps<br>
            Sample Email Content: Summer is almost upon us! Here at KidsCode, we know that programming is one of the fastest growing hobbies among kids and teens. This is why we’re offering 30% off on all our summer camp programs for kids and teens! Just present the code SUMMEROFF30 upon enrolment. Jumpstarting your little one’s interest in coding has never been easier!
            `
        ),
        'Display Retargeting': article(
            'Display Retargeting',
            `These are banner campaigns that make use of lively and colorful graphics as opposed to simple text. These banners show up on ad spaces on websites. This campaign will only target people who have visited the company’s website previously. The company’s ads will show up when searchers visit similar or relevant websites.`,
            `One main reason why some users never come back to a website is simply because they forgot which website they found a particular product/service on. Display advertising on search networks gives companies an opportunity to pique the interest of a user when they visit similar websites.`,
            `Keywords: Banana slicer, revolutionary banana slicer<br>
            Headline 1:  SampleCompany Banana Slicers<br>
            Headline 2:  Various Sizes and Colors<br>
            Headline 3:  Check Our Gallery of Over 50 Designs<br>
            Display URL:  bananaslice.com<br>
            Description: Usually comes with a banner or image
            `
        )
    }
    return map[type] == undefined ? false : map[type]
}



export const select_controller = () => {

    var x, i, j, selElmnt, a, b, c;
/* Look for any elements with the class "custom-select": */
x = document.getElementsByClassName("custom-select");
for (i = 0; i < x.length; i++) {
  selElmnt = x[i].getElementsByTagName("select")[0];
  /* For each element, create a new DIV that will act as the selected item: */
  a = document.createElement("DIV");
  a.setAttribute("class", "select-selected");
  a.innerHTML = selElmnt.options[selElmnt.selectedIndex].innerHTML;
  x[i].appendChild(a);
  /* For each element, create a new DIV that will contain the option list: */
  b = document.createElement("DIV");
  b.setAttribute("class", "select-items select-hide");
  for (j = 1; j < selElmnt.length; j++) {
    /* For each option in the original select element,
    create a new DIV that will act as an option item: */
    c = document.createElement("DIV");
    c.innerHTML = selElmnt.options[j].innerHTML;
    c.addEventListener("click", function(e) {
        /* When an item is clicked, update the original select box,
        and the selected item: */
        var y, i, k, s, h;
        s = this.parentNode.parentNode.getElementsByTagName("select")[0];
        h = this.parentNode.previousSibling;
        for (i = 0; i < s.length; i++) {
          if (s.options[i].innerHTML == this.innerHTML) {
            s.selectedIndex = i;
            h.innerHTML = this.innerHTML;
            y = this.parentNode.getElementsByClassName("same-as-selected");
            for (k = 0; k < y.length; k++) {
              y[k].removeAttribute("class");
            }
            this.setAttribute("class", "same-as-selected");
            break;
          }
        }
        h.click();
    });
    b.appendChild(c);
  }
  x[i].appendChild(b);
  a.addEventListener("click", function(e) {
    /* When the select box is clicked, close any other select boxes,
    and open/close the current select box: */
    e.stopPropagation();
    closeAllSelect(this);
    this.nextSibling.classList.toggle("select-hide");
    this.classList.toggle("select-arrow-active");
  });
}

function closeAllSelect(elmnt) {
  /* A function that will close all select boxes in the document,
  except the current select box: */
  var x, y, i, arrNo = [];
  x = document.getElementsByClassName("select-items");
  y = document.getElementsByClassName("select-selected");
  for (i = 0; i < y.length; i++) {
    if (elmnt == y[i]) {
      arrNo.push(i)
    } else {
      y[i].classList.remove("select-arrow-active");
    }
  }
  for (i = 0; i < x.length; i++) {
    if (arrNo.indexOf(i)) {
      x[i].classList.add("select-hide");
    }
  }
}

/* If the user clicks anywhere outside the select box,
then close all select boxes: */
document.addEventListener("click", closeAllSelect);
}




export const custom_select_body = (options, name, active) => {  

    /*html*/
    return `
    <div class="select-box">
        <div class="select-box__current" tabindex="1">
            ${ options.map((opt, index)=>{
                /*html*/
                return `
                <div class="select-box__value">
                    <input class="select-box__input" type="radio" id="${index}" value="${opt.value}" name="${name}" checked="${opt.value == active ? 'checked' : ''}"/>
                    <p class="select-box__input-text">${opt.title}</p>
                </div>`
            }).join("")}
            <img class="select-box__icon" src="http://cdn.onlinewebfonts.com/svg/img_295694.svg" alt="Arrow Icon" aria-hidden="true"/>
        </div>
        <ul class="select-box__list">
            ${ options.map((opt, index)=>{
                /*html*/
                return `
                <li>
                    <label class="select-box__option" for="${index}" aria-hidden="aria-hidden">${opt.title}</label>
                </li>`
            }).join("")}
        </ul>
    </div>`
}




export const loading_shell = () => {

    const sections = `
    <div class="shimmer-sections a"></div>
    <div class="shimmer-sections b"></div>
    <div class="shimmer-sections c"></div>
    <div class="shimmer-sections d"></div>
    <div class="shimmer-sections e"></div>
    <div class="shimmer-sections f"></div>
    <div class="shimmer-sections g"></div>
    <div class="shimmer-sections h"></div>
    <div class="shimmer-sections i"></div>
    <div class="shimmer-sections j"></div>
    <div class="shimmer-sections k"></div>
    <div class="shimmer-sections l"></div>`

    /*html*/
    const el = `
        <div style="padding-left: 0; padding-right: 0;" class="shimmer-background container-fluid">
            <div class="row row_cancel">
                <div class="col-lg-12 col-md-12 col-12">
                    <div style="padding: 1.25rem 1.25rem 0 1.25rem;" class="card card-body">
                        ${sections}
                    </div>
                </div>
            </div>
            <div class="row row_cancel">
                <div class="col-lg-6 col-md-6 col-12">
                    <div class="h--300 card card-body">
                        ${sections}
                    </div>
                </div>
                <div class="col-lg-6 col-md-6 col-12">
                    <div class="card card-body h--300">
                        ${sections}
                    </div>
                </div>
            </div>
        </div>
            <div style="padding-left: 0; padding-right: 0;" class="shimmer-background container-fluid" id="home-row">
                <div class="row row_cancel">
                    <div class="col-lg-8 col-md-8 col-sm-12">
                        <div class="row">
                            <div class="col-lg-12 col-md-12 col-sm-12">
                                <div style="overflow-y:auto;" class="h--500 card card-body">
                                    ${sections}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="recommendations" class="col-lg-4 col-md-4 col-sm-12">
                        <div class="h--500 card card-body">
                            ${sections}
                        </div>
                    </div>
                </div>
                <div class="row row_cancel">
                <div style="" class="col-lg-4 col-md-6 col-sm-12" id="opps_container">
                    <div>
                        <div class="h--500 card card-body" id="topic_opps">
                            ${sections}
                        </div>
                    </div>
                </div>
                <div class="col-lg-4 col-md-6 col-sm-12">
                    <div class="h--500 card card-body">
                        ${sections}
                    </div>
                </div>
                    <div class="col-lg-4 col-md-6 col-sm-12">
                        <div class="d-none d-md-block d-lg-none divider"></div>
                        <div id="insights" class="h--500 card card-responsive card-body">
                            ${sections}
                        </div>
                    </div>
                </div>
            </div>
        </div>
        `   


        return el
}


export const perc_container = `
			<div style="text-align: center;" class="container counter">
	        	<span style="font-size:120%" class="perc"></span>%
	    	</div>
	    	`
const styles = () => {
    return html(
      'style',
      null,
      `
        @import url('/static/assets/css/styles.css');
        @import url('/static/assets/css/bootstrap.min.css');
      `
    );
  }

export class CampaignInitial extends HTMLElement {
    static get observedAttributes() {
        return null;//['oldnum', 'newnum', 'colour', 'target', 'name'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
    }

    init_eventListeners(root){
        root.querySelector('.campaign_controller').addEventListener('click', e=>{
            e.currentTarget.parentNode.parentNode.remove()        
            root.dispatchEvent(query_change);
        })
        root.querySelector('#new_campaign').addEventListener('click', e=>{
            setQueryString('campaign_view', 'new')
        })
        root.querySelector('#existing').addEventListener('click', e=>{
            setQueryString('campaign_view', 'existing')
        })

    }

    connectedCallback() {
        this.css = styles();
        /*html */
        this.template = `
        <div class="row">
            <div class="col">
                <a class="campaign_controller" id="new_campaign" href="#">
                    <div class="hover_box">
                        <div class="center_it" style="margin: auto;padding: 5% 2%;">
                            <thead><strong>Create new campaign</strong></thead>
                        </div>
                    </div>
                </a>
            </div>
            <div class="col">
                <a class="campaign_controller" id="existing" href="#">
                    <div class="hover_box">
                        <div class="center_it" style="margin: auto;padding: 5%;">
                            <thead><strong>Analyze existing campaigns</strong></thead>
                        </div>
                    </div>
                </a>
            </div>
        </div> 
        `
        const el = document.createElement('div')
        el.innerHTML = this.template
        this.shadow.appendChild(this.css);
        this.shadow.appendChild(el);
        this.init_eventListeners(this.shadow)
    }
}
  
window.customElements.define('campaign-initial', CampaignInitial);
import {google} from '/static/src/components/UI_elements.js'
const styles = () => {
    return html(
      'style',
      null,
      `
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css')
        .accordion-toggle {
            display: block;
          }
          
        .accordion-content {
            display: none;
        }
        
        .accordion-content.acc-active {
            display: block;
        }
        textarea.form-control {
            padding: 3%;
        }
      `
    );
}





async function prep_first(customer_id){
        const first = () => {
        /*html */
        return `
        <div class="row">
            <div class="col-lg-6 col-12">
                <p>Is this campaign for the overall brand or a specific product?</p>
            </div>
            <div class="col-lg-6 col-12">
                <select id="products" class="form-control">
                    <option value="brand">Company brand</option>
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-12">
                <p>Which persona is it for?</p>
            </div>
            <div class="col-lg-6 col-12">
                <select id="audiences" class="form-control">
                    
                </select>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-12">
                <p>What part of the customer journey is it for?</p>
            </div>
            <div class="col-lg-6 col-12">
                <select id="stage" class="form-control">
                    <option value="awareness">awareness</option>
                    <option value="evaluation">evaluation</option>
                    <option value="conversion">conversion</option>
                </select>         
            </div>
        </div>
        <div class="row">
            <div class="col-lg-6 col-12">
                <p>Give us a few (2-5) keyword or keyword phrases separated by a comma to get started.</p>
            </div>
            <div class="col-lg-6 col-12">
                <textarea id="keywords" rows="6" class="form-control"></textarea>
            </div>
        </div>
        <div class="center_it" style="margin: 0 auto">
            <button id="get_ad_groups" class="btn btn-primary">Run</button>
        </div>
        
        `.trim()
    }


    async function get_el(){
        const el = document.createElement('div')
        el.innerHTML = first()
        return el
    }

    let el = await get_el()
    
    async function get_personas(id=customer_id){
        const personas = await fetch(`/api/personas?customer_id=${id}`)
        const personas_json = await personas.json()
        return personas_json
    }

    async function get_products(id=customer_id){
        const products = await fetch(`/api/products?customer_id=${id}`)
        const products_json = await products.json()
        return products_json
    }

    let personas = await get_personas()
    let products = await get_products()

    for (let i in personas){
        let child = `<option value="${personas[i].persona_name}">${personas[i].persona_name}</option>`
        el.querySelector('#audiences').insertAdjacentHTML('beforeend', child)
    }
    for (let i in products){
        let child = `<option value="${products[i].product_name}">${products[i].product_name}</option>`
        el.querySelector('#products').insertAdjacentHTML('beforeend', child)
    }

    return el
}


const prep_second = keywords => {
    return `
    <div class="row">
        <div class="col">
            <h6>Ad groups</h6>
            ${Object.keys(keywords).map((i) => {
                let returned;
                keywords[i].ads != undefined ? returned = `
                <div class="ad-group-group">
                <hr>
                    <p>
                        <a style="color:#62cde0;" href="#content-${keywords[i].group.replace(/ /g, '_')}" class="accordion-toggle">${keywords[i].group}</a>
                        <button id="${keywords[i].group.replace(/ /g, '_')}" class="btn btn-outline btn-outline-primary remove">remove</button>
                    </p>
                    <div class="accordion-content" id="content-${keywords[i].group.replace(/ /g, '_')}">
                        <table id="${keywords[i].group.replace(/ /g, '_')}-table" style="text-align:center;" class="table table-striped">
                            <thead>
                                <th style="font-size:80%;">Include?</th>
                                <th style="font-size:80%;">Keyword</th>
                                <th style="font-size:80%;">Advertisers</th>
                                <th style="font-size:80%;">Cost Per Day</th>
                                <th style="font-size:80%;">Broad CPC</th>
                                <th style="font-size:80%;">Broad Match</th>
                                <th style="font-size:80%;">Phrase CPC</th>
                                <th style="font-size:80%;">Phrase Match</th>
                                <th style="font-size:80%;">Exact CPC</th>
                                <th style="font-size:80%;">Exact Match</th>
                            </thead>
                            <tbody>
                        ${Object.keys(keywords[i].keywords).map((x) => {
                             return `
                                <tr id="${keywords[i].keywords[x].keyword.replace(/ /g, '_')}" style="text-align:center;">
                                    <td><input type="checkbox" data-ad_group="${keywords[i].group.replace(/ /g, '_')}" class="include form-control" value="${keywords[i].keywords[x].keyword.replace(/ /g, '_')}"></td>
                                    <td>${keywords[i].keywords[x].keyword}</td>
                                    <td>${keywords[i].keywords[x].advertisers}</td>
                                    <td>${keywords[i].keywords[x].costperday}</td>       
                                    <td>${keywords[i].keywords[x].broad_cpc}</td>
                                    <td><input type="checkbox" class="broad form-control"></td>
                                    <td>${keywords[i].keywords[x].phrase_cpc}</td>
                                    <td><input type="checkbox" class="phrase form-control"></td>
                                    <td>${keywords[i].keywords[x].exact_cpc}</td>
                                    <td><input type="checkbox" class="exact form-control"></td>
                                </tr>
                             `.trim()
                        }).join('')}
                            </tbody>
                        </table>
                    </div>
                <br>
                </div>` : returned = ''
                return returned
            }).join('')}
            <button id="format" class="btn btn-primary format">Continue</button>
        </div>
    </div>
    `.trim()
}

const formatting_template = recs => {
    let printed = []
    const _print = (group, _printed=printed) => {
        let returned = !_printed.includes(group) ? `ad group: ${group}` : ``
        _printed.push(group)
        return returned
    }
    /*html */
    return `
    <div class="row">
        <div class="col-lg-6 col-12">
    ${Object.keys(recs).map(rec=>{
        /*html*/
        let returned = `
            <p><strong>${_print(recs[rec].ad_group)}</strong></p>
            
                <div class="inset">
                ${recs[rec].meta.match_types.map(met=>{ 
                    let _returned = ""
                    switch(met){
                        case 'broad':
                            _returned += "<p>+" + recs[rec].meta.keyword.replace(/ /g, ' +') + "</p>"
                        break
                        case 'exact':
                            _returned += "<p>[" + recs[rec].meta.keyword + ']</p>'
                        break
                        case 'phrase':
                            _returned += '<p>"' + recs[rec].meta.keyword + '"</p>'
                        break
                        default:
                            _returned += '<p>' + recs[rec].meta.keyword + '</p>'
                        break
                    }
                    return _returned
                }).join('')}
                </div>

            `
        return returned
    }).join('')}
        </div>
        <div class="col-lg-6 col-12">
            <p><strong>Ad possibilities</strong></p>
    ${Object.keys(recs).map(rec=>{
        /*html*/
        return `
            <div class="inset">
                ${recs[rec].meta.ads.map(ad=>{
                    return `
                    <div class="google_ad_preview_container">
                        <h5 class="small_txt">${ad.headline}</h5>
                        <p class="small_txt website"><span>ad</span> www.example.com</p>
                        <p class="small_txt">${ad.body}</p>
                    </div>
                    `.trim()
                }).join('')}
            </div>`
        }).join('')}
        </div>
    </div>
    `.trim()
}




export default class CampaignCreator extends HTMLElement {
    static get observedAttributes() {
        return ['customer-id'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.customer_id = this.getAttribute('customer-id')
        this.state = {
            brand_or_product: "",
            persona: "",
            stage: "",
            recs: [],
            accepted_recs: []
        }

        this.css = styles()
    }


    handle_first(keywords){
        fetch('/api/create_campaign', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body:  JSON.stringify({
                keywords: keywords,
                customer_id: this.customer_id
            })
        })
            .then((res) => res.json())
            .then((data) => {
                this.state.recs = [...data]
                this.edit_res(this.state.recs)
            })
            .catch((err)=>console.log(err))
    }


    edit_res(keywords){
        this.shadow.innerHTML = ""
        const template = prep_second(keywords)
        const el = document.createElement('div')
        el.innerHTML = template
        // Listen for click on the document
        el.addEventListener('click', event => {
            if (!event.target.classList.contains('accordion-toggle')) return;
            var content = el.querySelector(event.target.hash);
            if (!content) return;
            event.preventDefault();
            if (content.classList.contains('acc-active')) {
                content.classList.remove('acc-active');
                return;
            }
            var accordions = el.querySelectorAll('.accordion-content.acc-active');
            for (var i = 0; i < accordions.length; i++) {
                accordions[i].classList.remove('acc-active');
            }
            content.classList.toggle('acc-active');
        })
        el.querySelectorAll(".remove").forEach(el=>{
            el.addEventListener('click', e=>{
                const id = e.currentTarget.getAttribute('id')
                const new_state = this.state.recs.filter(rec => rec.group != id.replace(/_/g, ' '));
                this.state.recs = [...new_state]
                this.edit_res(this.state.recs)
            })
        })
        el.querySelectorAll('.include').forEach(el_=>{
            el_.addEventListener('change', e=>{
                const keyword = e.currentTarget.value.replace(/_/g, ' ')
                const table = el.querySelector(`#${e.currentTarget.dataset.ad_group}-table`)
                const tr = table.querySelector(`#${e.currentTarget.value}`)
                const phrase = tr.querySelector(`.phrase`)
                const broad = tr.querySelector(`.broad`)
                const exact = tr.querySelector(`.exact`)
                if (e.target.checked) {
                    const ad_group = e.currentTarget.dataset.ad_group.replace(/_/g, ' ')
                    const packet = {
                        ad_group,
                        meta: {
                            keyword, match_types: [],
                            ads: (this.state.recs.filter(rec=>rec.group == ad_group))[0].ads
                        }
                    }
                    console.log(packet)
                    let mt = packet.meta.match_types

                    const add_mt = (e, type, iterable=mt) => {
                        if(e.target.checked){
                            if (!iterable.includes(type)){
                                iterable.push(type)
                            }
                        } else {
                            for(let i = 0; i < iterable.length; i++){ 
                                if (iterable[i] === type) {
                                    iterable.splice(i, 1); 
                                }
                            }
                        }
                    }

                    phrase.addEventListener('click', e=>add_mt(e, 'phrase'))
                    broad.addEventListener('click', e=>add_mt(e, 'broad'))
                    exact.addEventListener('click', e=>add_mt(e, 'exact'))

                    this.state.accepted_recs.push(packet)
                } else {
                    const removed = this.state.accepted_recs.filter(_keyword => _keyword.keyword != keyword)
                    this.state.accepted_recs = [...removed]
                }
            })
        })
        el.querySelector('#format').addEventListener('click', e=>{
            this.formatting()
        })


        this.shadow.appendChild(this.css);
        this.shadow.appendChild(el)
    }

    formatting(){
        this.shadow.innerHTML = ""
        const template = formatting_template(this.state.accepted_recs)
        const el = document.createElement('div')
        el.innerHTML = template
        this.shadow.appendChild(this.css);
        this.shadow.appendChild(el)  
    }

    inspect(index){
        const dataset = this.filter_dataset(index)
        const el = this.platform_chart(dataset)
        this.mix_container.style.display = 'none'
        document.querySelector('.inspect_container').style.display = 'block'
        document.querySelector('.inspect_container').innerHTML = el
        document.querySelector('#nav_up').addEventListener('click', e=>this.home(this.metric))

        const others = document.querySelectorAll('.sum_list')

        others.forEach(el => {
            el.addEventListener('click', e=>{
                const platform = e.currentTarget.textContent
                let index = this.campaign_data.findIndex(ind => ind.platform == platform)
                this.inspect(index)
            })
        });
    }

    connectedCallback() {

        prep_first(this.customer_id)
            .then(el=>{
                el.querySelector("#get_ad_groups").addEventListener('click', e=>{
                    e.currentTarget.innerHTML = `<i class="fa fa-spinner fa-spin"></i>`
                    const keywords = el.querySelector("#keywords").value.split(", ")
                    const products = el.querySelector("#products")
                    this.state.brand_or_product = products.options[products.selectedIndex].value
                    const personas = el.querySelector("#audiences")
                    this.state.persona = personas.options[personas.selectedIndex].value
                    const stage = el.querySelector("#stage")
                    this.state.stage = stage.options[stage.selectedIndex].value
                    this.handle_first(keywords)
                })
                this.shadow.appendChild(this.css);
                this.shadow.appendChild(el);
            })
    }
}
  
window.customElements.define('campaign-creator', CampaignCreator);
import CampaignAnalyzer from '/static/src/components/existing-campaigns.js'
import AdSpend from '/static/src/components/Spend.js'
import PortfolioPerformance from '/static/src/components/portfolio/portfolio_performance.js'
import Budget from '/static/src/components/portfolio/Budget.js'
import Recommendations from '/static/src/components/customer/recommendations.js'
import Rec_shell from '/static/src/components/customer/recommendations.js'
import CompetitiveIntelligence from '/static/src/components/Competitors.js'
const styles = () => {
    return html(
      'style',
      null,
      `
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css')
        .accordion-toggle {
            display: block;
          }
          
        .accordion-content {
            display: none;
        }
        
        .accordion-content.acc-active {
            display: block;
        }
      `
    );
}
const home = () => {
    return `
    <div class="row">
        <div class="col">
            <button class="active_metric btn btn-secondary">ctr</button>
        </div>
        <div class="col"><button class="active_metric btn btn-secondary">cpl</button></div>
        <div class="col"><button class="active_metric btn btn-secondary">spend</button></div>
        <div class="col"><button class="active_metric btn btn-secondary">clicks</button></div>
    </div>
    <div class="center_it portfolio_container">
        <p>Click on a platform to view more details</p>
        <canvas id="portfolio_mix"></canvas>
    </div>
    <div class="inspect_container">
    </div>`.trim()
}
    


const inspector = (dataset, others) => {
   return `
    <div class="row row_cancel">
        <div class="col">
            <div class="back">
                <button id="nav_up" class="btn btn-primary">
                    <strong><i class="now-ui-icons arrows-1_minimal-left"></i></strong>&nbsp;
                    Back
                </button>
            </div>
        </div>
        <div class="col">
            <ul class="inline-list">
                ${Object.keys(others).map(key=>{
                    return `<li class="small_txt"><button style="margin:0;" class="sum_list btn btn-neutral">${others[key]}</button></li>`
                }).join("")}
            </ul>
    
        </div>
    </div>
    <h5 class="center_it">${dataset.platform}</h5>
    <div class="row row_cancel">
        <div style="text-align:left;" class="col"></div>
        <div style="text-align:left;" class="col">
            <p>Cost per lead:</p>
        </div>
        <div style="text-align:right;" class="col">
            <p>$${dataset.cpl.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</p>
        </div>
        <div style="text-align:left;" class="col"></div>
    </div>
    <div class="row row_cancel">
        <div style="text-align:left;" class="col"></div>
        <div style="text-align:left;" class="col">
            <p>Total spent:</p>
        </div>
        <div style="text-align:right;" class="col">
            <p>$${dataset.spend.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</p>
        </div>
        <div style="text-align:left;" class="col"></div>
    </div>
    <div class="row row_cancel">
        <div style="text-align:left;" class="col"></div>
        <div style="text-align:left;" class="col">
            <p>Clicks:</p>
        </div>
        <div style="text-align:right;" class="col">
            <p>${dataset.clicks.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</p>
        </div>
        <div style="text-align:left;" class="col"></div>
    </div>
    <div class="row row_cancel">
        <div style="text-align:left;" class="col"></div>
        <div style="text-align:left;" class="col">
            <p>Click through rate:</p>
        </div>
        <div style="text-align:right;" class="col">
            <p>${dataset.ctr.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</p>
        </div>
        <div style="text-align:left;" class="col"></div>
    </div>
    <div class="row row_cancel">
        <div style="text-align:left;" class="col"></div>
        <div style="text-align:left;" class="col">
            <p>Revenue per click:</p>
        </div>
        <div style="text-align:right;" class="col">
            <p>${dataset.rpc.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}</p>
        </div>
        <div style="text-align:left;" class="col"></div>
    </div>`.trim()
}


export default class CampaignAnalyzer extends HTMLElement {
    static get observedAttributes() {
        return ['customer-id'];
    }
    constructor() {
        super();       
        this.campaign_data = [
            {
                platform: 'facebook',
                cpl: 24,
	            spend: 2050,
	            clicks: 1708,
	            ctr: 3.98,
	            rpc: 'coming soon'
            },
            {
                platform: 'pinterest',
                cpl: 18,
	            spend: 200,
	            clicks: 222,
	            ctr: 2.23,
	            rpc: 'coming soon'
            },
            {
                platform: 'twitter',
                cpl: 25,
	            spend: 590,
	            clicks: 472,
	            ctr: 1.59,
	            rpc: 'coming soon'
            },
            {
                platform: 'google ads',
                cpl: 29,
	            spend: 590,
	            clicks: 406,
	            ctr: 5.59,
	            rpc: 'coming soon'
            }
        ]
        this.shadow = this.attachShadow({ mode: 'open' });
        this.customer_id = this.getAttribute('customer-id')
    
        if (this.mix_container != null){
            this.home(this.metric)
        }

        this.css = styles()
    }    

    home(metric=this.metric){
        this.ctx.innerHTML = ""
        const inspector = this.shadow.querySelector('.inspect_container')
        const active_metric = this.shadow.querySelectorAll('.active_metric')
        active_metric.forEach(el=>{
            if (el.textContent == this.metric){
                el.style.opacity = '.5'
            } else {
                el.style.opacity = '1'
            }
            el.addEventListener('click', e=>{
                this.metric = e.currentTarget.textContent
                this.home(e.currentTarget.textContent)
            })
        })
        inspector.style.display = 'none'

        this.mix_container.style.display = 'block'
        let labels = []
        for (let index in this.campaign_data){labels.push(this.campaign_data[index].platform)}

        const values = metric => {
            let values = [];
            for (let index in this.campaign_data){
                values.push(this.campaign_data[index][metric])
            }
            return values
        }
        
        const chart_data = {
            labels: labels,
            datasets: [{
                label: "Ad Spend (USD)",
                backgroundColor: ["#01d4b4", "#ff9c00","#62cde0","#699fa1","#a5d6d9"],
                data: values(metric),
                responsive:true
            }]
        }
        const format_val = value => {
            if (this.metric == 'ctr') return `${value}%`
            else if (this.metric == 'cpc') return `$${value}`
            else if (this.metric == 'spend') return `$${value}`
            else if (this.metric == 'cpl') return `$${value}/lead`
        }
        const options = {
            legend: {
               display: true
            },
            tooltips: {
               enabled: false
            },
            title: {
                display: false,
            },
            plugins: {
                datalabels:{
                    formatter: (value, context)=> {
                        return format_val(value)
                    },
                    labels: {
                        title: {
                            color: 'rgba(255,255,255,.9)',
                            weight: "bold",
                            size: "30px",
                            textAlign: "center"
                        }
                    }
                }
            }
        }
        
        const mix = new Chart(this.ctx, {
            type: 'pie',
            data: chart_data,
            options: options
        });

        this.ctx.addEventListener('click', e=> this.inspect(mix.getElementsAtEvent(e)[0]._index)) 
    }

    platform_chart(dataset){
        let others = [];
        for (let i in this.campaign_data){
            if (this.campaign_data[i].platform != dataset.platform){
                others.push(this.campaign_data[i].platform)
            }
        }
        let platform_icon;
        switch(dataset.platform){
            case 'google ads':
                platform_icon = 'google.com'
                break
            case 'facebook':
                platform_icon = 'facebook.com'
                break
            case 'twitter':
                platform_icon = 'twitter.com'
                break
            case 'pinterest':
                platform_icon = 'pinterest.com'
                break
            case 'linkedin':
                platform_icon = 'linkedin.com'
                break
        }
        const platform_url = `http://logo.clearbit.com/${platform_icon}`
        const el = inspector(dataset, others)
        return el
    }

    filter_dataset(index){
        let dataset = this.campaign_data.filter(platform => platform.platform == this.campaign_data[index].platform)
        return dataset[0]
    }

    inspect(index){
        const dataset = this.filter_dataset(index)
        const el = this.platform_chart(dataset)
        this.mix_container.style.display = 'none'
        this.shadow.querySelector('.inspect_container').style.display = 'block'
        this.shadow.querySelector('.inspect_container').innerHTML = el
        this.shadow.querySelector('#nav_up').addEventListener('click', e=>this.home(this.metric))

        const others = this.shadow.querySelectorAll('.sum_list')

        others.forEach(el => {
            el.addEventListener('click', e=>{
                const platform = e.currentTarget.textContent
                let index = this.campaign_data.findIndex(ind => ind.platform == platform)
                this.inspect(index)
            })
        });
    }


    connectedCallback() {
        async function first(){            
            const el = document.createElement('div')
            el.innerHTML = home()

            return el
        } 
        first()
            .then(el=>{
                this.ctx = el.querySelector('#portfolio_mix')
                this.mix_container = el.querySelector('.portfolio_container')
                this.metric = 'spend'
                this.shadow.appendChild(this.css);
                this.shadow.appendChild(el);       
                return el
            })
            .then(el=>el)
            .then(el=>{
                this.home()
            })
    }
}
  
window.customElements.define('campaign-analyzer', CampaignAnalyzer);
import {tabs, shadow_events, dots_loader} from '/static/src/components/UI_elements.js'

const styles = () => {
  /*html*/
  return `
  <style>
      @import url('/static/assets/css/bootstrap.min.css');
      @import url('/static/assets/css/styles.css');
      @import url('/static/assets/icons/all.min.css');
      @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');


  </style>
  `.trim()
}

export default class Budget extends HTMLElement {
  static get observedAttributes() {
      return ['customer_id'];
  }
  constructor() {
      super();
      this.shadow = this.attachShadow({ mode: 'open' });
      this.state = {
          data: null
      }

      this.css = styles()
  }

  render(init=true){
      this.shadow.innerHTML = ""
      const el = document.createElement('div')
      el.innerHTML = `
        ${this.css}
        <p>Test test</p>
    `
      this.shadow.appendChild(el)
  }

  connectedCallback() {
      this.customer_id = this.getAttribute('customer_id')
      this.render()
  }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('portfolio-budet', Budget))


export const isNumber = input => typeof input == 'number'

export function validateEmail(email) {
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(String(email).toLowerCase());
}

$.fn.digits = function(){ 
    return this.each(function(){ 
    	const id = $(this).attr('id')
    	const not_included = ['zip']
    	if (!not_included.includes(id)) {
       		$(this).val( $(this).val().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,") );
    	} 
    })
}



export function updateURLParameter(url, param, paramVal)
{
    var TheAnchor = null;
    var newAdditionalURL = "";
    var tempArray = url.split("?");
    var baseURL = tempArray[0];
    var additionalURL = tempArray[1];
    var temp = "";

    if (additionalURL) 
    {
        var tmpAnchor = additionalURL.split("#");
        var TheParams = tmpAnchor[0];
            TheAnchor = tmpAnchor[1];
        if(TheAnchor)
            additionalURL = TheParams;

        tempArray = additionalURL.split("&");

        for (var i=0; i<tempArray.length; i++)
        {
            if(tempArray[i].split('=')[0] != param)
            {
                newAdditionalURL += temp + tempArray[i];
                temp = "&";
            }
        }        
    }
    else
    {
        var tmpAnchor = baseURL.split("#");
        var TheParams = tmpAnchor[0];
            TheAnchor  = tmpAnchor[1];

        if(TheParams)
            baseURL = TheParams;
    }

    if(TheAnchor)
        paramVal += "#" + TheAnchor;

    var rows_txt = temp + "" + param + "=" + paramVal;
    return baseURL + "?" + newAdditionalURL + rows_txt;
}



export function html(elemName, props, ...children) {
    const elem = document.createElement(elemName);
    if (props) {
        Object.assign(elem, props);
    }
    if (children) {
        children.forEach(child => {
        if (typeof child === 'object') {
            elem.appendChild(child);
        } else {
            elem.appendChild(document.createTextNode(child));
        }
        });
    }
    return elem;
}

export const setQueryString = (name, value) => {
	const params = new URLSearchParams(location.search);
	params.set(name, value);
	window.history.replaceState({}, "", decodeURIComponent(`${location.pathname}?${params}`));
}

export const params = () => new URLSearchParams(location.search);

// Create a new event
export const query_change = new CustomEvent('query_change');

export const currency = num => `$${num.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")}`
export const currency_rounded = num => `$${num.toFixed().replace(/\B(?=(\d{3})+(?!\d))/g, ",")}`
export const number = num => num.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")
export const number_rounded = num => num.toFixed().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
export const number_no_commas = num => num.toFixed().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
export const percent = num => `${num.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",")}%`
export const remove_commas = num => num.toFixed(2).replace(/\,/g, '')
export const remove_commas_2 = num => parseFloat(num.toString().replace(/\,/g,''))

export const now = () => {
    let date = new Date();
    let dateString = new Date(date.getTime() - (date.getTimezoneOffset() * 60000 ))
                        .toISOString()
                        .split("T")[0];
    return dateString
} 


export function urlify(text) {
    var urlRegex = /(https?:\/\/[^\s]+)/g;
    return text.replace(urlRegex, function(url) {
        return `<a target="__blank" href="${url}">${url}</a>`
    })
    // or alternatively
    // return text.replace(urlRegex, '<a href="$1">$1</a>')
}


export const iterate_text = (lines, target) => {
    let counter = 1;
    let staller;
    target.innerHTML = `<span>${lines[0]}</span>`

    const change = () => {
        staller = lines[counter]
        target.innerHTML = `<span>${staller}</span>`
        counter++
        if (counter >= lines.length) counter = 0
    }
    setInterval(change, 2000)
    
}

export const modal = (title, body, uid) => {
    /*html*/
    const shell = `
    <div data-uid="${uid}" id="modal-container">
        <div class="modal-background">
            <div class="safe modal">
                <h2>${title}</h2>
                <p>${body}</p>
            </div>
        </div>
    </div>
    `.trim()

    return shell
}

export const modal_trigger = (uid, copy, padding=true) => {
    /*html*/
    return `<div style="${padding ? '' : 'padding: 0;'}" id="six" data-uid="${uid}" class="modal-controller button"><p>${copy}</p></div>`
}


export const modal_handlers = (parent) => {
    const modal_container = parent.querySelectorAll("#modal-container")
    const body = document.querySelector('body')
    
    parent.querySelectorAll('.button').forEach(el => {
        el.addEventListener('click', e=>{
                let buttonId = e.currentTarget.getAttribute('id')
            
                modal_container.forEach(el=>{
                    if (el.dataset.uid == e.currentTarget.dataset.uid) {
                        el.removeAttribute('class')
                        el.classList.add(buttonId)
                        body.classList.add('modal-active')
                    }
                })
        })
    }); 
    parent.querySelectorAll('.safe').forEach(el=>{
        const text = el.querySelector('p')
        text.innerHTML = urlify(text.textContent)
        el.addEventListener('click', e=>{
            e.stopPropagation()
        })
    })
    modal_container.forEach(el=>{
        el.addEventListener('click', e=>{
            if (el.dataset.uid == e.currentTarget.dataset.uid) {
                const _this = e.currentTarget
                _this.classList.add('out')
                body.classList.remove('modal-active')
            }
        })
    })

    return parent

}



export const remove_duplicates = (arr, filter) => {
    let _new = [];

    for (let i of arr) {
        if (_new.filter(e => e[filter] == i[filter]).length == 0) _new = [..._new, i]
    }

    return _new
}





/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */

(function() {
  'use strict';

  /**
   * Basic flow of the loader process
   *
   * There are 4 flows the loader can take when booting up
   *
   * - Synchronous script, no polyfills needed
   *   - wait for `DOMContentLoaded`
   *   - fire WCR event, as there could not be any callbacks passed to `waitFor`
   *
   * - Synchronous script, polyfills needed
   *   - document.write the polyfill bundle
   *   - wait on the `load` event of the bundle to batch Custom Element upgrades
   *   - wait for `DOMContentLoaded`
   *   - run callbacks passed to `waitFor`
   *   - fire WCR event
   *
   * - Asynchronous script, no polyfills needed
   *   - wait for `DOMContentLoaded`
   *   - run callbacks passed to `waitFor`
   *   - fire WCR event
   *
   * - Asynchronous script, polyfills needed
   *   - Append the polyfill bundle script
   *   - wait for `load` event of the bundle
   *   - batch Custom Element Upgrades
   *   - run callbacks pass to `waitFor`
   *   - fire WCR event
   */

  var polyfillsLoaded = false;
  var whenLoadedFns = [];
  var allowUpgrades = false;
  var flushFn;

  function fireEvent() {
    window.WebComponents.ready = true;
    document.dispatchEvent(new CustomEvent('WebComponentsReady', { bubbles: true }));
  }

  function batchCustomElements() {
    if (window.customElements && customElements.polyfillWrapFlushCallback) {
      customElements.polyfillWrapFlushCallback(function (flushCallback) {
        flushFn = flushCallback;
        if (allowUpgrades) {
          flushFn();
        }
      });
    }
  }

  function asyncReady() {
    batchCustomElements();
    ready();
  }

  function ready() {
    // bootstrap <template> elements before custom elements
    if (window.HTMLTemplateElement && HTMLTemplateElement.bootstrap) {
      HTMLTemplateElement.bootstrap(window.document);
    }
    polyfillsLoaded = true;
    runWhenLoadedFns().then(fireEvent);
  }

  function runWhenLoadedFns() {
    allowUpgrades = false;
    var fnsMap = whenLoadedFns.map(function(fn) {
      return fn instanceof Function ? fn() : fn;
    });
    whenLoadedFns = [];
    return Promise.all(fnsMap).then(function() {
      allowUpgrades = true;
      flushFn && flushFn();
    }).catch(function(err) {
      console.error(err);
    });
  }

  window.WebComponents = window.WebComponents || {};
  window.WebComponents.ready = window.WebComponents.ready || false;
  window.WebComponents.waitFor = window.WebComponents.waitFor || function(waitFn) {
    if (!waitFn) {
      return;
    }
    whenLoadedFns.push(waitFn);
    if (polyfillsLoaded) {
      runWhenLoadedFns();
    }
  };
  window.WebComponents._batchCustomElements = batchCustomElements;

  var name = 'webcomponents-loader.js';
  // Feature detect which polyfill needs to be imported.
  var polyfills = [];
  if (!('attachShadow' in Element.prototype && 'getRootNode' in Element.prototype) ||
    (window.ShadyDOM && window.ShadyDOM.force)) {
    polyfills.push('sd');
  }
  if (!window.customElements || window.customElements.forcePolyfill) {
    polyfills.push('ce');
  }

  var needsTemplate = (function() {
    // no real <template> because no `content` property (IE and older browsers)
    var t = document.createElement('template');
    if (!('content' in t)) {
      return true;
    }
    // broken doc fragment (older Edge)
    if (!(t.content.cloneNode() instanceof DocumentFragment)) {
      return true;
    }
    // broken <template> cloning (Edge up to at least version 17)
    var t2 = document.createElement('template');
    t2.content.appendChild(document.createElement('div'));
    t.content.appendChild(t2);
    var clone = t.cloneNode(true);
    return (clone.content.childNodes.length === 0 ||
        clone.content.firstChild.content.childNodes.length === 0);
  })();

  // NOTE: any browser that does not have template or ES6 features
  // must load the full suite of polyfills.
  if (!window.Promise || !Array.from || !window.URL || !window.Symbol || needsTemplate) {
    polyfills = ['sd-ce-pf'];
  }

  if (polyfills.length) {
    var url;
    var polyfillFile = 'bundles/webcomponents-' + polyfills.join('-') + '.js';

    // Load it from the right place.
    if (window.WebComponents.root) {
      url = window.WebComponents.root + polyfillFile;
    } else {
      var script = document.querySelector('script[src*="' + name +'"]');
      // Load it from the right place.
      url = script.src.replace(name, polyfillFile);
    }

    var newScript = document.createElement('script');
    newScript.src = url;
    // if readyState is 'loading', this script is synchronous
    if (document.readyState === 'loading') {
      // make sure custom elements are batched whenever parser gets to the injected script
      newScript.setAttribute('onload', 'window.WebComponents._batchCustomElements()');
      document.write(newScript.outerHTML);
      document.addEventListener('DOMContentLoaded', ready);
    } else {
      newScript.addEventListener('load', function () {
        asyncReady();
      });
      newScript.addEventListener('error', function () {
        throw new Error('Could not load polyfill bundle' + url);
      });
      document.head.appendChild(newScript);
    }
  } else {
    // if readyState is 'complete', script is loaded imperatively on a spec-compliant browser, so just fire WCR
    if (document.readyState === 'complete') {
      polyfillsLoaded = true;
      fireEvent();
    } else {
      // this script may come between DCL and load, so listen for both, and cancel load listener if DCL fires
      window.addEventListener('load', ready);
      window.addEventListener('DOMContentLoaded', function() {
        window.removeEventListener('load', ready);
        ready();
      })
    }
  }
})();

import {perc_container} from '/static/src/components/UI_elements.js'

const get_account_availability = email => {
	const get_account_availability_handler = (data) => {
		let target = $("#new_email")
		if (data == 'False') {
	
			target.removeClass('input-success')
			target.addClass('input-danger')
	
			return false
	
		} else {
			target.removeClass('input-danger')
			target.addClass('input-success')
	
			return true
		}
	}	


	$.get('/availability', {email: email}, function(data){
		let available = get_account_availability_handler(data)
		if (available == false) {
			$('.submit_button').attr('disabled', true)
			$("#email_availability").html(`<p>An account already exists with the provided email. <a href="/login">Login here.</a></p>`)
		} else {
			$('.submit_button').attr('disabled', false)
		}
	})
} 

const platform_row = (name, index) => {	
	const tile = (title) => {
		return `
		<div class="table-responsive hover_box col-lg-5 col-md-">
			<table class="table">
				<thead>
					<tr>
						<th style="text-align:center;">
							<h6 style="font-size: 70%;" class="x_small_txt">${title}</h6>
						</th>
					</tr>
				</thead>
			</table>
		</div>`
	}
	/*html*/
	const el = `<div class="row platform_row">
					<div class='col-lg-2 col-sm-12 col-12'>
						<h5 style="text-align:center;" class="title"><span class="platform_img">${name}</span></h5>
						<input style="display:none;" type='text' value='${name}' name='platform[${index}]'>
					</div>
					<div style="text-align:center;" class='col-lg-4 col-md-4 col-sm-6 col-6'>
						<h6>Still using?</h6><br>
						<div class="container row col-12">
							${tile('yes')}
							&nbsp;
							${tile('no')}
							<input type="text" name="currently_using[${index}]" class="hidden_input hidden">
						</div>
					</div>
					<div class='col-lg-6 col-md-6 col-6'>
						<h6>How are the results?</h6>
						<br>
						<img src='/static/assets/img/frown.png' class='col-lg-2 col-5'>
						<img src='/static/assets/img/neutral.png' class='col-lg-2 col-5'>
						<img src='/static/assets/img/smile.png' class='col-lg-2 col-5'>
						<img src='/static/assets/img/grin.png' class='col-lg-2 col-5'>
						<input type='text' style='display:none;' class='img_input' name='results[${index}]'>
					</div>
				</div>`
	return el
}


const get_container = title => {
	const container_item = (name, id, page) => {
		let base_url = "/competitors/company/"
		let link;
		if (page == 'audience') {
			link = base_url + `audience?view_id=${id}&splash=False`
		} else if (page == 'product_2') {
			link = base_url + `audience/product/product_2?view_id=${id}&splash=False`
		}
		let el = `
				<a class='col-lg-3 col-md-3 col-sm-6 col-6 past_container' id="${id}" href="${link}">
					${name}
				</a>
				`
		return el
	}

	const container_handler = (data, title) => {
		data = JSON.parse(data)
		console.log(Object.keys(data).length)
	
		if (Object.keys(data).length > 1) {
			Object.keys(data).forEach(function(key){
				let id = data[key]['id']
				let name = data[key]['name']
				
				let item;
				if (name != null && name != "") {
					item = container_item(name, id, title)
				} else {
					item = container_item('Incomplete', id, title)
				}
				$("#append_container").append(item)
			})
		} else {
			$("#append_container").css('display', 'none')
		}
			
	
		const params = new URLSearchParams(window.location.search)
		let id = params.get('view_id')
		$("#" + id).addClass('past_container_active')
	}


	$.get('/container', {page: title}, function(data){
		$("#load_hide").remove()
		container_handler(data, title)
	})
}

const get_account_reps = id => {
	const account_reps_handler = (data) => {
		data = JSON.parse(data)
	}

	$.get(`/account_reps/${id}`, (data)=>{
		account_reps_handler(data)
	})
} 	

const InputMethods = class {
	populate_inputs (data, key) {
		$(`select[name=${key}]`).val(data[0][key]).digits()
		$(`input[name=${key}]`).val(data[0][key]).digits()
		$(`textarea[name=${key}]`).val(data[0][key]).digits()
	} //end populate_inputs

	populate_percent_tiles () {
		$('.in_box').each(function(){
			if ($(this).val() != "") {
				const target = $(this).parentsUntil('.hover_box').parent()
				target.not(target.children()).addClass('hover_box_selected')
			}
		})
	} // end populate_percent_tiles

	populate_tiles () {
		$('.hidden_input').each(function(){
			if ($(this).val() != '') {
				// check if multi or single hover_box
				const value = $(this).val()
				// const parent_hover = $(this).parent().parent().parent().parent().parent().parent().parent()
				let target_val;
				if ($(this).parent().parent().parent().parent().parent().parent().hasClass('hb_many')) {
					target_val = $(this).parent().parent().find(`h6:contains('${value}')`)
				} else {
					target_val = $(this).parent().siblings('.hover_box').children().children().children().find(`h6:contains('${value}')`)
				}
				const target = target_val.parentsUntil('.hover_box').parent()
				target.not(target.children()).addClass('hover_box_selected')
			}
		})
	} //end populate_tiles

	product_title (data)  {
		const product_name = data[0]['name']
		$('#product_name_target').text(product_name)
	}

	load_sales_cycle (data) {
		var awareness = data.filter(function(item){
		    return item.stage == "awareness";         
		});
		var evaluation = data.filter(function(item){
		    return item.stage == "evaluation";         
		});
		var conversion = data.filter(function(item){
		    return item.stage == "conversion";         
		});
		var retention = data.filter(function(item){
		    return item.stage == "retention";         
		});
		var referral = data.filter(function(item){
		    return item.stage == "referral";         
		});

		var stages = [awareness, evaluation, conversion, retention, referral]

		function get_length(step){
			var length = step.length
			return length
		}

		// $('.stages input').not('.stages input').addClass('hide')

		for (var i=0;i<stages.length;i++){
			var length = get_length(stages[i])
			for (var x=0;x<stages[i].length;x++){
				var toShow = $(".stage_container." + stages[i][x]['stage'] + " input").slice(0, length)
				toShow.removeClass('hide')
				if (toShow.val() !== stages[i][x]['tactic']){
					toShow.eq(x).val(stages[i][x]['tactic'])
				}
			} // come back
		}	
	} //end load_sales_cycle
}

const handle_past_inputs = class {

	constructor(data, url_path, debug) {
		function isJson(str) {
			try {
				JSON.parse(str);
			} catch (e) {
				return false;
			}
			return true;
		}

		let jsonTest = isJson(data)
		if (jsonTest == true) {
			let inputs = JSON.parse(data)
			this.data = inputs
			this.url_path = url_path
			this.debug = debug		
		} else {
			this.data = data
		}
	}


	compile(){
		let denied_responses = ['nah, not this time', 'nah']
		if (!denied_responses.includes(this.data)) {
			if (this.debug == true) {
				console.log(this.data)
			}

			let methods = new InputMethods;

			const loop_it = data => {
				Object.keys(data[0]).forEach(function(key) {
					let param = new URLSearchParams(window.location.search)	
					methods.populate_inputs(data, key)
				})
			}
			
			setTimeout(function(){
				methods.populate_tiles()
			}, 300)
			
			switch (this.url_path) {
				case '/competitors/company/audience/product/product_2/salescycle':
					methods.load_sales_cycle(this.data)
					break
				case '/competitors/company':
					loop_it(this.data)
					methods.populate_percent_tiles()
					break
				case '/competitors/company/audience/product/product_2':
					loop_it(this.data)
					methods.product_title(this.data)
					break
				default:
					loop_it(this.data)
			}	
		}
	}
}


const stage_interactions = () => {

	const handle_last_in_left = () => {
		alert('last of left')
	}

	const add_row = (active, last=false) => {
		const path_to_input = active.parent().parent().next().find('input')
		const condition = (active.val() != '')

		if (last == false) {
			if (condition) {
				path_to_input.removeClass('hide')
				path_to_input.focus()	
			}
		} else {
			const path_to_right_stage = active.parent().parent().parent().parent().parent().parent().next().find('tr:first-of-type > td > input')
			if (condition) {
				path_to_right_stage.removeClass("hide")
				path_to_right_stage.focus()
			}
		}
	}

	const remove_row = (active, on_right=false) => {
		const path_to_prev = active.parent().parent().prev().find('input')
		if (on_right == false) {
			active.addClass('hide')
			path_to_prev.focus()	
		} else {
			const path_to_last_stage = active.parent().parent().parent().parent().parent().parent().prev().find('tr:last-of-type > td > input')
			active.addClass('hide')
			path_to_last_stage.focus()
		}
	}

	const handle_enter = (event, active, row, path_to_input, stage_container) => {
        event.preventDefault()

        if (row.is(':not(:last-child)')){
        	add_row(active)
	    } else {
	        if (stage_container.hasClass('left_stage')){
	        	add_row(active, true)
	        } 
	    }
	}

	const handle_backspace = (event, active, row) => {
		const not_first_of_left = (row.is(":not(.left_stage tr:first-of-type)"))
		const not_first_of_right = (row.is(":not(.right_stage tr:first-of-type)"))

		if (active.val() == ''){
			event.preventDefault()
			if (not_first_of_left && not_first_of_right) {
				remove_row(active)
			} else if (!not_first_of_right) {
				remove_row(active, true)
			}
		}
	}

	$('.stage_container input').keydown(function(event){

	    const active = $(document.activeElement)
	    const row = active.parent().parent()
	    const path_to_input = active.parent().parent().next().find('input')
	    const stage_container = active.parent().parent().parent().parent().parent().parent()

	    const keycode = (event.keyCode ? event.keyCode : event.which)

	    switch(keycode) {
	    	case 13:
	    		handle_enter(event, active, row, path_to_input, stage_container)
	    		break
	    	case 8:
	    	case 46:
	    		handle_backspace(event, active, row)
	    		break
	    }
	});

}

export default class InitFuncs {

	container(title){
		get_container(title)
	}

	allIntake(params, url_path, disallowed_urls, debug, helpTimer){
		

		const hover_box = () => {
			$(".in_box").click(function(event){
				event.stopPropagation()
				if (!$(this).parent().parent().parent().parent().parent().parent().hasClass('hover_box_selected')) {
					$(this).parent().parent().parent().parent().parent().parent().addClass('hover_box_selected')
				}
				input_clicked = true
				return input_clicked
			})


			$('.platform_row img').click(function(){				
				let input = $(this).parent().find('.img_input'),
					siblings = $(this).siblings(),
					face = $(this),
					active = 'platform_row_img_active'

				siblings.removeClass(active)
				if (!face.hasClass(active)) {
					input.val($(this).index())
				} else {
					input.val("")
				}
				face.toggleClass(active)
			})

			$('.hover_box').click(function(){
				var input_clicked = false
				var in_box = $(this).find("input")

				//toggle selected
				if($(this).hasClass('hb_many')){
					if(!in_box.hasClass('in_box')){
						$(this).toggleClass('hover_box_selected')
					} else {				
						$(this).toggleClass('hover_box_selected')
						if ($(this).hasClass('hover_box_selected')){
							$(this).find(".in_box").focus()
						} else {	
							$(this).find(".in_box").val("")
						}
					}
				} else {
					$(this).toggleClass('hover_box_selected')
					$(this).siblings().removeClass('hover_box_selected')
					$(this).parent().siblings().children().removeClass('hover_box_selected')
				}

				//populate database val
				var test = $(this).find("h6")
				var text = test[0]['textContent']

				if ($(this).hasClass('hb_many')){
					var nearest_input = $(this).find('.hidden_input');
				} else if ($(this).hasClass('multi_row')){
					var nearest_input = $(this).parentsUntil('.grandparent').find('.hidden_input')
				} else {
					var nearest_input = $(this).parent().find('.hidden_input');
				}

				if ($(this).hasClass('hover_box_selected')){	
					nearest_input.val(text)
				} else {
					nearest_input.val("")
				}
			})
		}

		hover_box()

		$('.ignore_btn').click(function(event){
			event.preventDefault()
		})

		$('.ignore_default input').keydown(function(event){
			var keycode = (event.keyCode ? event.keyCode : event.which);

		    if(keycode == '13'){
		        event.preventDefault()
		    }
		})

		$('.reveal_button').click(function(){
			$('.reveal').fadeIn('slow')
			$(this).addClass("hidden")
		})

		setTimeout(function() { 
		    $('.need_help').fadeIn()
		}, helpTimer);

		var args = {}
		if (params.has('view_id')){
			args = {page: url_path,
					view_id: params.get('view_id')}
		} else {
			args = {page: url_path}
		}

		if (!disallowed_urls.includes(url_path)) {

			$.get('/load_past_inputs', args, function(data){
				const inputHandler = new handle_past_inputs(data, url_path, debug)
				if (inputHandler.data != "nah, not this time"){
					inputHandler.compile()
				}
			})

		}

	} // end all

	admin(){
		const get_admin_availability = () => {
			const admin_availability_handler = (data) => {
				data = JSON.parse(data)
				  for(var i = 0; i<data.length; i++){
			
					  if(data[i]['email'] == $('#email').val()){
						  $('.availability').text('Email is taken.  Please try another.')
						  $('.availability').css('visibility', 'visible')
						$('.create_button').attr('disabled','disabled');
						  return false
					  } else {
						  $('.availability').text('username is available!')
						  $('.availability').css('visibility', 'visible')
						$('.create_button').prop('disabled', false);
					  }
				}
			}
		
			$.get('/admin_availability',function(data){
				admin_availability_handler(data)	
			})
		}
	} // end admin

	company() {

		var perc_format = $('.perc_format')
		var in_box = $('.in_box')

		$(in_box).each(function(){
			var this_hb = $(this).parent()
			if ($(this).val() == ""){
				this_hb.removeClass('hover_box_selected')
			}
		})

		const get_sum = () => {
			let sums = 0
			$(".percent").each(function(){
				let val = parseInt($(this).val())

			    if (!Number.isNaN(val)){
			    	sums += val;	
				}
			});
			return sums
		}

		const sum_and_populate = (sums) => {

			$(".perc").text(sums)

			const percent = parseInt($('.perc').text())
			const selector = $('.container.counter')

			if (percent == 100) {
				selector.removeClass('red')
				selector.addClass('green')
			} else if (percent > 100) {
				selector.addClass('red')
				selector.removeClass('green')
			} else {
				selector.removeClass('red')
				selector.removeClass('green')
			}
		}

		const init_sum = get_sum()
	    let target = $('.percent').parentsUntil('.row').parent()
	    target = target.not(target.children())
	    target.after(perc_container)

	    sum_and_populate(get_sum())

	    $(".percent").keyup(function(){
			sum_and_populate(get_sum())
		})
	} // end company

	company_view() {
		var pathname = window.location.pathname;
		$('.dyn_link').each(function(){
			var id = $(this).attr('id')
			var url = pathname + "?page=" + id
			$(this).attr('href', url)
		})
	}

	create_account() {
		$('.create_button').prop('disabled', true);
		function delay(callback, ms) {
			var timer = 0;
			return function() {
		    	var context = this, args = arguments;
		    	clearTimeout(timer);
		    	timer = setTimeout(function () {
					callback.apply(context, args);
		   		}, ms || 0);
			};
		}
		$('#email').keyup(delay(function (e) {
			get_account_availability()
			var testEmail = /^[A-Z0-9._%+-]+@([A-Z0-9-]+\.)+[A-Z]{2,4}$/i;
			if (testEmail.test($('#email').val())){
				$('.format').text(' ')
			} else {
				$('.format').text('invalid email format')
			}
		}, 1000));
	} // end create account

	customers(){	

		$('#account_reps').click(function(){
			const id = $(this).attr('id')
			$('#current_reps').empty()
			get_account_reps(id)
		})
	}


	personnel(){
		$('#account_reps').click(function(){
			const id = $(this).attr('id')
			$('#current_reps').empty()
			get_account_reps(id)
		})
	} // end personnel

	platforms(){
		const get_platforms = () => {
			const platforms_handler = data => {
				let x = 0
				for (let i = 0; i < data.length; i++){
					if (data[i] != ""){
						let row = platform_row(data[i], x)
						x++
						$('.platforms_container').append(row)
					}
				}
				let length = $(".platform_row").length
				$('#platform_length').val(length)
			}
		
			$.get('/get_platforms', function(data){
				$("#load_hide").remove()
				platforms_handler(JSON.parse(data))
			})
		}
		get_platforms()
	} // end platforms

	products(i){
		const get_branch_data = () => {
			const FormMap = class {
				constructor(selling_to, biz_model) {
					this.selling_to = selling_to
					this.biz_model = biz_model
				}
			
				build_form() {
					let test;
					switch (this.selling_to) {
						case 'B2C':
							test = 'hi'
							break
						case 'B2B':
							break
						case 'C2C':
							break
						case 'other':
							break
					}
			
					switch (this.biz_model) {
						case 'SaaS':
							break
						case 'Digital Products':
							break
						case 'Tangible Product':
							break
						case 'Professional Services':
							break
						case 'Manual Services':
							break
						case 'Media Provider':
							break
						case 'Commission / Rev Share':
							$("#heading-7").addClass('hidden')
							break
					}
			
			
					$("#heading-1").text('Product name')
		
			
				}
			}	
		
			const branch_data_handler = data => {
				data = JSON.parse(data)
				const map = new FormMap(data.selling_to, data.biz_model)
				map.build_form()
			}
		
			$.get('/branch_data', function(data){
				branch_data_handler(data)
			})
		}

		get_branch_data()

		$("#product_table label").not('th > label').remove()

		$(".edit_product").click(function(e){
			e.preventDefault()

			const handle_click = (e, i) => {
				if ($(this).hasClass("add_product")){
					let clone = $('.data-row').last().clone()
					
					let new_id = `data-row-${i}`
					clone.attr('id', new_id)

					let route = `td > .form-group > ul > li > table`
					let sub_route = ' > tbody > tr'

					const clone_selector = (pos, el='input') => clone.find(route + sub_route + `:nth-of-type(${pos}) > td > ` + el)
					const change_attr = (selector, name) => selector.attr('name', name).attr('id', name)

					let base_id = `product-${i}-`,
						name_id = base_id + "name",
						category_id = base_id + "category",
						cogs_id = base_id + "cogs",
						sales_price_id = base_id + "sales_price",
						price_model_id = base_id + "price_model",
						qty_sold_id = base_id + "qty_sold",
						est_unique_buyers_id = base_id + "est_unique_buyers",
						csrf_id = base_id + "csrf_token"


					clone.find(route).attr('id', `product-${i}`)

					change_attr(clone_selector(1), name_id)
					change_attr(clone_selector(2), category_id)
					change_attr(clone_selector(3), cogs_id)
					change_attr(clone_selector(4), sales_price_id)
					change_attr(clone_selector(5, 'select'), price_model_id)
					change_attr(clone_selector(6), qty_sold_id)
					change_attr(clone_selector(7), est_unique_buyers_id)
					change_attr(clone.find(route).siblings('input'), csrf_id)

					$('.tbody').append("<div class='product_separator separator'></div>")
					$('.tbody').append(clone)

				} else if ($(this).hasClass('remove_product')){
					if (i > 1){
						let last = $('.data-row').last()
						let last_sep = $(".product_separator").last()
						last.remove()
						last_sep.remove()
					}
				}		
			}

			let i = $("#product_table > tbody > .data-row").length
			handle_click(e, i)
		})

	}


	salescycle(){

		var awareness_tags = [
			"Website",
			"Physical storefront",
			"Amazon",
			"Google shopping",
			"Etsy",
			"Articles",
			"eBook",
			"TV ads",
			"Radio ads",
			"Podcast ads",
			"Online ads",
			"Shelf-space in other stores",
			"Tradeshows",
			"How-to-videos",
			"Cross promotion",
			"Referrals / word-of-mouth",
			"Signage (incl. billboards)",
			"Direct mailers",
			"Email newsletter"
	    ];
	    $( ".awareness input" ).autocomplete({
	      source: awareness_tags
	    });

	    var evaluation_tags = [
			'Competitive comparison',
			'Feature list',
			'Data sheet',
			'Case study',
			'Testimonials',
			'Webinar',
			'Online reviews',
			'FAQ',
			'Samples',
			'Demo video'
	    ]
	    $( ".evaluation input" ).autocomplete({
	      source: evaluation_tags
	    });
	    var conversion_tags = [
			'Free trial',
			'Pricing page',
			'Live demo',
			'Consultation',
			'Estimate / quote',
			'Coupon',
			'Call-to-action',
			'Re-targeting',
			'Sales call follow-up',
			'"Drip" email campaign'
	    ]
	    $( ".conversion input" ).autocomplete({
	      source: conversion_tags
	    });

	    var retention_tags = [
			'Packaging',
			'Email follow-up',
			'Coupons',
			'Subscription',
			'Easy re-order',
			'Birthday gifts',
			'New product notices',
			'Re-targeting online ads',
			'Cross-promotion / nurture campaigns',
			'Perk milestones for subscription anniversaries'
	    ]
	    $( ".retention input" ).autocomplete({
	      source: retention_tags
	    });

	    var referral_tags = [
			'Packaging',
			'Social sharing incentive',
			'Shareable coupons',
			'Referral incentive',
			'Testimonial / Reviews',
			'User generated content'
	    ]
	    $( ".referral input" ).autocomplete({
	      source: referral_tags
	    });

		$('.left_stage').addClass("stages")
		$('.right_stage').addClass('stages')


		const row_select = $(".stages.left_stage tr")
		const right_rows = $(".stages.right_stage input")
		row_select.not(":first-child").find('input').addClass('hide')
		right_rows.addClass("hide")

		// in eventHandlers.js
		stage_interactions()
	} //end salescycle
}

import {tabs, shadow_events, dots_loader} from '/static/src/components/UI_elements.js'

const styles = () => {
  /*html*/
  return `
  <style>
      @import url('/static/assets/css/bootstrap.min.css');
      @import url('/static/assets/css/styles.css');
      @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
      @import url("https://cdn.jsdelivr.net/npm/vanilla-datatables@v1.6.16/dist/vanilla-dataTables.min.css");

  </style>
  `.trim()
}

export default class MetaManager extends HTMLElement {
  static get observedAttributes() {
      return ['customer_id'];
  }
  constructor() {
      super();
      this.shadow = this.attachShadow({ mode: 'open' });
      this.state = {
          data: null
      }

      this.css = styles()
  }

  claim(data){
        const body = JSON.stringify({
            customer_id: this.customer_id,
            campaign_id: data.campaign_id,
            type: data.type,
            campaign_name: data.campaign_name
        })
        fetch('/api/claim_campaign', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body
        })
  }

  data_handler(el){
    el.querySelectorAll('.claimed').forEach(_el => {
        _el.addEventListener( 'change', e=> {
            if(e.currentTarget.checked) {
                this.claim(e.currentTarget.dataset)
            } else {
                console.log(false)
            }
        });
    });

    return el
  }

  datatable(){
    const el = document.createElement('div')
    /*html*/
    el.innerHTML = `
    <table id="campaign_table" class="table-responsive table">
        <thead>
            <th>type</th>
            <th>state</th>
            <th>campaign_name</th>
            <th>claimed?</th>
        </thead>
        ${this.state.data.map(camp=>{
            console.log(camp.claimed)
            let {type, state, campaign_name, campaign_id, claimed} = camp
            /*html*/
            return `
            <tr>
                <td><p>${type}</p></td>
                <td><p>${state}</p></td>
                <td><p>${campaign_name}</p></td>
                <td><input data-campaign_name="${campaign_name}" data-campaign_id="${campaign_id}" data-type="${type}" class="claimed form-control" type="checkbox" ${claimed ? 'checked' : ''}></td>
            </tr>
            `
        }).join("")}
    </table>
    `

    new DataTable(el.querySelector("#campaign_table"));
    return this.data_handler(el)
  }

  render(init=true){
    this.shadow.innerHTML = ""
    const el = document.createElement('div')

    el.innerHTML = `
        ${this.css}
    `

    if (init) {
        fetch('/api/campaigns', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body:  JSON.stringify({
                customer_id: this.customer_id,
                company_name: this.company_name,
                facebook: this.facebook,
                google: this.google
            })
        })
        .then(res=> res.json())
        .then(res=>{
            this.state.data = res
            el.appendChild(this.datatable())
        })
    } else {

    }
    this.shadow.appendChild(el)
  }

  connectedCallback() {
      this.customer_id = this.getAttribute('customer-id')
      this.company_name = this.getAttribute('company_name')
      this.google = this.getAttribute('google') ? true : false
      this.facebook = this.getAttribute('facebook') ? true : false
        
      this.render()
  }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('campaign-meta-manager', MetaManager))

import {urlify, iterate_text, modal, modal_trigger, modal_handlers, currency,currency_rounded,number,number_rounded,number_no_commas,percent,remove_commas,remove_commas_2} from '/static/src/convenience/helpers.js'

const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
        .rec-container {
            padding: 1%;
        }
        .rec {
            margin-bottom: 2%;
            padding: 5% 2% 0 5%;
        }
        .dismiss {
        }
        .rec-title {
            margin-bottom: 0;
            padding-bottom: 0;
        }
        .rec-apply {
            font-size: 75%;
            /*float: right;*/
        }
        #toolbar {
            width: 100%;
            text-align:left;
        }
        #toolbar span {
            margin-right: 5%;
        }
        .read-more {
            margin: auto;
        }
        html, body {
            min-height: 100%;
            height: 100%;
            background-image: url(http://theartmad.com/wp-content/uploads/Dark-Grey-Texture-Wallpaper-5.jpg);
            background-size: cover;
            background-position: top center;
            font-family: helvetica neue, helvetica, arial, sans-serif;
            font-weight: 200;
            }
            html.modal-active, body.modal-active {
            overflow: hidden;
            }

            #modal-container {
            position: fixed;
            display: table;
            height: 100%;
            width: 100%;
            top: 0;
            left: 0;
            transform: scale(0);
            z-index: 1;
            }
            #modal-container.one {
            transform: scaleY(0.01) scaleX(0);
            animation: unfoldIn 1s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.one .modal-background .modal {
            transform: scale(0);
            animation: zoomIn 0.5s 0.8s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.one.out {
            transform: scale(1);
            animation: unfoldOut 1s 0.3s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.one.out .modal-background .modal {
            animation: zoomOut 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.two {
            transform: scale(1);
            }
            #modal-container.two .modal-background {
            background: rgba(0, 0, 0, 0);
            animation: fadeIn 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.two .modal-background .modal {
            opacity: 0;
            animation: scaleUp 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.two + .content {
            animation: scaleBack 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.two.out {
            animation: quickScaleDown 0s .5s linear forwards;
            }
            #modal-container.two.out .modal-background {
            animation: fadeOut 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.two.out .modal-background .modal {
            animation: scaleDown 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.two.out + .content {
            animation: scaleForward 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.three {
            z-index: 0;
            transform: scale(1);
            }
            #modal-container.three .modal-background {
            background: rgba(0, 0, 0, 0.6);
            }
            #modal-container.three .modal-background .modal {
            animation: moveUp 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.three + .content {
            z-index: 1;
            animation: slideUpLarge 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.three.out .modal-background .modal {
            animation: moveDown 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.three.out + .content {
            animation: slideDownLarge 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.four {
            z-index: 0;
            transform: scale(1);
            }
            #modal-container.four .modal-background {
            background: rgba(0, 0, 0, 0.7);
            }
            #modal-container.four .modal-background .modal {
            animation: blowUpModal 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.four + .content {
            z-index: 1;
            animation: blowUpContent 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.four.out .modal-background .modal {
            animation: blowUpModalTwo 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.four.out + .content {
            animation: blowUpContentTwo 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.five {
            transform: scale(1);
            }
            #modal-container.five .modal-background {
            background: rgba(0, 0, 0, 0);
            animation: fadeIn 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.five .modal-background .modal {
            transform: translateX(-1500px);
            animation: roadRunnerIn 0.3s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.five.out {
            animation: quickScaleDown 0s .5s linear forwards;
            }
            #modal-container.five.out .modal-background {
            animation: fadeOut 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.five.out .modal-background .modal {
            animation: roadRunnerOut 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.six {
            transform: scale(1);
            }
            #modal-container.six .modal-background {
            background: rgba(0, 0, 0, 0);
            animation: fadeIn 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.six .modal-background .modal {
            background-color: transparent;
            animation: modalFadeIn 0.5s 0.8s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.six .modal-background .modal h2, #modal-container.six .modal-background .modal p {
            opacity: 0;
            position: relative;
            animation: modalContentFadeIn 0.5s 1s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.six .modal-background .modal .modal-svg rect {
            animation: sketchIn 0.5s 0.3s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.six.out {
            animation: quickScaleDown 0s .5s linear forwards;
            }
            #modal-container.six.out .modal-background {
            animation: fadeOut 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.six.out .modal-background .modal {
            animation: modalFadeOut 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.six.out .modal-background .modal h2, #modal-container.six.out .modal-background .modal p {
            animation: modalContentFadeOut 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.six.out .modal-background .modal .modal-svg rect {
            animation: sketchOut 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.seven {
            transform: scale(1);
            }
            #modal-container.seven .modal-background {
            background: rgba(0, 0, 0, 0);
            animation: fadeIn 0.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.seven .modal-background .modal {
            height: 75px;
            width: 75px;
            border-radius: 75px;
            overflow: hidden;
            animation: bondJamesBond 1.5s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.seven .modal-background .modal h2, #modal-container.seven .modal-background .modal p {
            opacity: 0;
            position: relative;
            animation: modalContentFadeIn .5s 1.4s linear forwards;
            }
            #modal-container.seven.out {
            animation: slowFade .5s 1.5s linear forwards;
            }
            #modal-container.seven.out .modal-background {
            background-color: rgba(0, 0, 0, 0.7);
            animation: fadeToRed 2s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.seven.out .modal-background .modal {
            border-radius: 3px;
            height: 162px;
            width: 227px;
            animation: killShot 1s cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container.seven.out .modal-background .modal h2, #modal-container.seven.out .modal-background .modal p {
            animation: modalContentFadeOut 0.5s 0.5 cubic-bezier(0.165, 0.84, 0.44, 1) forwards;
            }
            #modal-container .modal-background {
            display: table-cell;
            background: rgba(0, 0, 0, 0.8);
            text-align: center;
            vertical-align: middle;
            }
            #modal-container .modal-background .modal {
            background: white;
            padding: 50px;
            display: inline-block;
            border-radius: 3px;
            font-weight: 300;
            position: relative;
            }
            #modal-container .modal-background .modal h2 {
            font-size: 25px;
            line-height: 25px;
            margin-bottom: 15px;
            }
            #modal-container .modal-background .modal p {
            font-size: 18px;
            line-height: 22px;
            }
            #modal-container .modal-background .modal .modal-svg {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            width: 100%;
            border-radius: 3px;
            }
            #modal-container .modal-background .modal .modal-svg rect {
            stroke: #fff;
            stroke-width: 2px;
            stroke-dasharray: 778;
            stroke-dashoffset: 778;
            }

            .content {
            min-height: 100%;
            height: 100%;
            background: white;
            position: relative;
            z-index: 0;
            }
            .content h1 {
            padding: 75px 0 30px 0;
            text-align: center;
            font-size: 30px;
            line-height: 30px;
            }
            .content .buttons {
            max-width: 800px;
            margin: 0 auto;
            padding: 0;
            text-align: center;
            }
            .content .buttons .button {
            display: inline-block;
            text-align: center;
            padding: 10px 15px;
            margin: 10px;
            background: red;
            font-size: 18px;
            background-color: #efefef;
            border-radius: 3px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
            cursor: pointer;
            }
            .button {
                color: var(--secondary);
                cursor: pointer;
                padding: 11px 5px;
            }
            .button:hover {
                text-decoration: underline;
            }
            .content .buttons .button:hover {
            color: white;
            background: #009bd5;
            }

            @keyframes unfoldIn {
            0% {
                transform: scaleY(0.005) scaleX(0);
            }
            50% {
                transform: scaleY(0.005) scaleX(1);
            }
            100% {
                transform: scaleY(1) scaleX(1);
            }
            }
            @keyframes unfoldOut {
            0% {
                transform: scaleY(1) scaleX(1);
            }
            50% {
                transform: scaleY(0.005) scaleX(1);
            }
            100% {
                transform: scaleY(0.005) scaleX(0);
            }
            }
            @keyframes zoomIn {
            0% {
                transform: scale(0);
            }
            100% {
                transform: scale(1);
            }
            }
            @keyframes zoomOut {
            0% {
                transform: scale(1);
            }
            100% {
                transform: scale(0);
            }
            }
            @keyframes fadeIn {
            0% {
                background: rgba(0, 0, 0, 0);
            }
            100% {
                background: rgba(0, 0, 0, 0.7);
            }
            }
            @keyframes fadeOut {
            0% {
                background: rgba(0, 0, 0, 0.7);
            }
            100% {
                background: rgba(0, 0, 0, 0);
            }
            }
            @keyframes scaleUp {
            0% {
                transform: scale(0.8) translateY(1000px);
                opacity: 0;
            }
            100% {
                transform: scale(1) translateY(0px);
                opacity: 1;
            }
            }
            @keyframes scaleDown {
            0% {
                transform: scale(1) translateY(0px);
                opacity: 1;
            }
            100% {
                transform: scale(0.8) translateY(1000px);
                opacity: 0;
            }
            }
            @keyframes scaleBack {
            0% {
                transform: scale(1);
            }
            100% {
                transform: scale(0.85);
            }
            }
            @keyframes scaleForward {
            0% {
                transform: scale(0.85);
            }
            100% {
                transform: scale(1);
            }
            }
            @keyframes quickScaleDown {
            0% {
                transform: scale(1);
            }
            99.9% {
                transform: scale(1);
            }
            100% {
                transform: scale(0);
            }
            }
            @keyframes slideUpLarge {
            0% {
                transform: translateY(0%);
            }
            100% {
                transform: translateY(-100%);
            }
            }
            @keyframes slideDownLarge {
            0% {
                transform: translateY(-100%);
            }
            100% {
                transform: translateY(0%);
            }
            }
            @keyframes moveUp {
            0% {
                transform: translateY(150px);
            }
            100% {
                transform: translateY(0);
            }
            }
            @keyframes moveDown {
            0% {
                transform: translateY(0px);
            }
            100% {
                transform: translateY(150px);
            }
            }
            @keyframes blowUpContent {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            99.9% {
                transform: scale(2);
                opacity: 0;
            }
            100% {
                transform: scale(0);
            }
            }
            @keyframes blowUpContentTwo {
            0% {
                transform: scale(2);
                opacity: 0;
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
            }
            @keyframes blowUpModal {
            0% {
                transform: scale(0);
            }
            100% {
                transform: scale(1);
            }
            }
            @keyframes blowUpModalTwo {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            100% {
                transform: scale(0);
                opacity: 0;
            }
            }
            @keyframes roadRunnerIn {
            0% {
                transform: translateX(-1500px) skewX(30deg) scaleX(1.3);
            }
            70% {
                transform: translateX(30px) skewX(0deg) scaleX(0.9);
            }
            100% {
                transform: translateX(0px) skewX(0deg) scaleX(1);
            }
            }
            @keyframes roadRunnerOut {
            0% {
                transform: translateX(0px) skewX(0deg) scaleX(1);
            }
            30% {
                transform: translateX(-30px) skewX(-5deg) scaleX(0.9);
            }
            100% {
                transform: translateX(1500px) skewX(30deg) scaleX(1.3);
            }
            }
            @keyframes sketchIn {
            0% {
                stroke-dashoffset: 778;
            }
            100% {
                stroke-dashoffset: 0;
            }
            }
            @keyframes sketchOut {
            0% {
                stroke-dashoffset: 0;
            }
            100% {
                stroke-dashoffset: 778;
            }
            }
            @keyframes modalFadeIn {
            0% {
                background-color: transparent;
            }
            100% {
                background-color: white;
            }
            }
            @keyframes modalFadeOut {
            0% {
                background-color: white;
            }
            100% {
                background-color: transparent;
            }
            }
            @keyframes modalContentFadeIn {
            0% {
                opacity: 0;
                top: -20px;
            }
            100% {
                opacity: 1;
                top: 0;
            }
            }
            @keyframes modalContentFadeOut {
            0% {
                opacity: 1;
                top: 0px;
            }
            100% {
                opacity: 0;
                top: -20px;
            }
            }
            @keyframes bondJamesBond {
            0% {
                transform: translateX(1000px);
            }
            80% {
                transform: translateX(0px);
                border-radius: 75px;
                height: 75px;
                width: 75px;
            }
            90% {
                border-radius: 3px;
                height: 182px;
                width: 247px;
            }
            100% {
                border-radius: 3px;
                height: 162px;
                width: 227px;
            }
            }
            @keyframes killShot {
            0% {
                transform: translateY(0) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(300px) rotate(45deg);
                opacity: 0;
            }
            }
            @keyframes fadeToRed {
            0% {
                box-shadow: inset 0 0 0 rgba(201, 24, 24, 0.8);
            }
            100% {
                box-shadow: inset 0 2000px 0 rgba(201, 24, 24, 0.8);
            }
            }
            @keyframes slowFade {
            0% {
                opacity: 1;
            }
            99.9% {
                opacity: 0;
                transform: scale(1);
            }
            100% {
                transform: scale(0);
            }
            }

    </style>
    `.trim()
}

export default class Rec_shell extends HTMLElement {
    static get observedAttributes() {
        return ['rec-id', 'customer-id', 'admin-assigned', 'title', 'body'];
    }

    constructor(){
        super();
        this.shadow = this.attachShadow({ mode: 'open' });

        this.state = {
            data: null
        }
        this.css = styles()

    }

    modal(title, body, id){
        /*html*/
        const shell = `
        <div id="modal-container">
            <div class="modal-background">
                <div class="safe modal">
                    <h5 class="widget__title">${title}</h5>
                    <p>${body}</p>
                    <p>Rec id: ${id}</p>
                </div>
            </div>
        </div>
        `.trim()

        return shell
    }

    modal_handlers(){
        
    const modal_container = this.shadow.querySelectorAll("#modal-container")
    const body = document.querySelector('body')
    const parent = this.shadow
    
    parent.querySelectorAll('.button').forEach(el => {
        el.addEventListener('click', e=>{
                let buttonId = e.currentTarget.getAttribute('id')
            
                modal_container.forEach(el=>{
                    if (el.dataset.uid == e.currentTarget.dataset.uid) {
                        el.removeAttribute('class')
                        el.classList.add(buttonId)
                        body.classList.add('modal-active')
                    }
                })
        })
    }); 
    parent.querySelectorAll('.safe').forEach(el=>{
        const text = el.querySelector('p')
        text.innerHTML = urlify(text.textContent)
        el.addEventListener('click', e=>{
            e.stopPropagation()
        })
    })
    modal_container.forEach(el=>{
        el.addEventListener('click', e=>{
            if (el.dataset.uid == e.currentTarget.dataset.uid) {
                const _this = e.currentTarget
                _this.classList.add('out')
                body.classList.remove('modal-active')
            }
        })
    })
    }


    toolbar(){
        const el = document.createElement('div')
        /*html*/
        el.innerHTML = `
            <span>id: ${this.rec_id}</span>
            ${this.accepted == true 
                ? `<span class="small_txt text-success">accepted</span>`
                : ''
            }

            ${this.dismissed == true 
                ? `<span class="small_txt text-danger">dismissed</span>`
                : ''
            }
            <span class="x dismiss">delete</span>
        `.trim()

        return el
    }

    render(){
        this.shadow.innerHTML = ''
        const colors = ['#62cde0','#ca7d66','#01d4b4','#ff9c00', '#62cde0','#ca7d66','#01d4b4','#ff9c00', '#62cde0','#ca7d66','#01d4b4','#ff9c00', '#62cde0','#ca7d66','#01d4b4','#ff9c00']
        /*html*/
        const shell = async () => {
            return `
            ${this.css}
            ${this.modal(this.title, this.body, this.rec_id)}
            <div class="rec-container">
                <div class="rec">
                    <div id="six" class="button">
                        <h5 class="widget__title rec-title">
                            ${this.title}
                        </h5>
                    </div>
                    <div id="toolbar"></div>
                </div>
            </div>
            `.trim()
        }

        const init = () => {
            this.modal_handlers()

            this.shadow.querySelector(".x").addEventListener('click', e=>{
                this.style.display = 'none';
                this.setAttribute('deleted', 'true')
            })
        }

        shell()
            .then(html => {
                let el = document.createElement('div')
                el.innerHTML = html
                return el
            })
            .then(el => {el.querySelector("#toolbar").appendChild(this.toolbar()); return el})
            .then(el=> this.shadow.appendChild(el))
            .then(() => init())
    }

    connectedCallback(){
        this.rec_id = this.getAttribute('rec_id')
        this.customer_id = this.getAttribute('customer-id')
        this.customer_id = this.getAttribute('admin-assigned')
        this.title = this.getAttribute('title')
        this.body = this.getAttribute('body')

        const accepted = this.getAttribute('accepted')
        this.accepted = accepted != null && parseInt(accepted) == 1
                            ? true
                            : false

        const dismissed = this.getAttribute('dismissed')
        this.dismissed = dismissed != null && parseInt(dismissed) == 1
                            ? true
                            : false
        this.render()
    }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('admin-recommendation-shell', Rec_shell))
import Rec_shell from '/static/src/components/admin/rec_shell.js'
const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
        .rec-container {
            padding: 1%;
        }
        .rec {
            border-left: 4px solid gray;
            margin-bottom: 2%;
            padding: 5% 2% 0 5%;
        }
        .dismiss {
            position: absolute;
            right: 15%;
            top: 10%;
        }
        .rec-title {
            line-height: .5em;
        }
        .rec-apply {
            font-size: 75%;
            /*float: right;*/
        }
        .read-more {
            margin: auto;
        }
        .new_rec {
            width: 100%;
        }
        #rec_body {
            padding: 4%;
        }
        #past {
            max-height: 500px;
            overflow-y: scroll;
        }
    </style>
    `.trim()
}

export default class AdminRecs extends HTMLElement {
    static get observedAttributes() {
        return ['customer-id', 'admin-id'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.customer_id = this.getAttribute('customer-id')
        this.admin_id = this.getAttribute('admin-id')
        this.state = {
            data: null
        }

        this.observer = new MutationObserver(mutations=>{
            mutations.forEach(mutation => {
                if (mutation.type == "attributes") {
                    if (mutation.attributeName == 'deleted') this.delete(mutation.target)
                }
            });
        });

        this.css = styles()
    }

    form(){
        /* html */
        const el = `
        <form method="POST" id="new_rec">
            <h5 for="rec_title widget__title">Recommendation title</h5>
            <div class="input-group">
                <input name="rec_title" type="text" class="form-control" placeholder="Recommendation title">
                <span class="form-control-border"></span>
            </div>
            <h5 for="rec_body widget__title">Recommendation</h5>
            <textarea type="text" id="rec_body" name="rec_body" class="form-control" placeholder="Recommendation body"></textarea>
            
            <input type="submit" class="btn btn-primary">
        </form>
        `.trim()
        return el
    }

    remove_from_view(target){
        const refresh = async () => this.state.data = this.state.data.filter(rec => rec.rec_id != target.getAttribute('rec_id') );
        refresh()
            .then(this.render(true))
    }

    delete(target){
        this.remove_from_view(target)
        fetch('/api/recommendation/delete', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body:  JSON.stringify({
                admin_id: this.admin_id,
                customer_id: this.customer_id,
                rec_id: target.getAttribute('rec_id')
            })
        })
    }

    new_rec(form){
        const title = form.get('rec_title')
        const body = form.get('rec_body')
        if (!title) return false
        if (!body) return false

        fetch('/api/recommendations', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body:  JSON.stringify({
                admin_id: this.admin_id,
                customer_id: this.customer_id,
                title,
                body,
                outstanding: true
            })
        })
            .then((res) => res.json())
            .then(res=> this.state.data = res )
            .then(this.render())
    }

    handlers(el){
        const form = el.querySelector('#new_rec')

        form.onsubmit = ev => {
            ev.preventDefault()
            this.new_rec(new FormData(form))
            form.reset()
        }
        return el
    }

    recommendation(rec){
        const el = new Rec_shell
        el.setAttribute('rec_id', rec.rec_id)
        el.setAttribute('admin-assigned', this.admin_id)
        el.setAttribute('customer_id', this.customer_id)
        el.setAttribute('title', rec.title)
        el.setAttribute('body', rec.body)
        el.setAttribute('accepted', rec.accepted)
        el.setAttribute('dismissed', rec.dismissed)

        this.observer.observe(el, {
            attributes: true
        });
        
        return el
    }

    render(state = false){

        this.shadow.innerHTML = ""

        const append = (res) => {
            let el = document.createElement('div')
            /*html */
            el.innerHTML = `
                ${this.css}
                <h5 class="widget__title">Recommendations</h5>
                <div class="row">
                    <div class="col-lg-6 col-sm-12">
                        ${this.form()}
                    </div>
                    <div id="past" class="col-lg-6 col-12">
                        
                    </div>
                </div>
            `
            const past = el.querySelector("#past")
            if (this.state.data.length == 0) {
                past.innerHTML += `<p>This user doesn't currently have any recommendations. Make sure to assign some!</p>`
            } else for (let i in res) past.appendChild(this.recommendation(res[i]))
            
            return this.handlers(el)
        }

        if (state == false) {
            fetch('/api/recommendations', {
                method: 'POST',
                headers : new Headers({
                    "content-type": "application/json"
                }),
                body:  JSON.stringify({
                    customer_id: this.customer_id,
                    admin_id: this.admin_id
                })
            })
                .then(res=>res.json())
                .then(res=>this.state.data = res)
                .then(res=> append(res))
                .then(el => this.shadow.appendChild(el))
        } else {
            const el = append(this.state.data)
            this.shadow.appendChild(el)
        }
        
    }

    connectedCallback(){
        this.render()
    }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('admin-recommendations', AdminRecs))
import {tabs, shadow_events, dots_loader} from '/static/src/components/UI_elements.js'
import {iterate_text, modal, modal_trigger, modal_handlers, currency,currency_rounded,number,number_rounded,number_no_commas,percent,remove_commas,remove_commas_2} from '/static/src/convenience/helpers.js'

const styles = () => {
  /*html*/
  return `
  <style>
      @import url('/static/assets/css/bootstrap.min.css');
      @import url('/static/assets/css/styles.css');
      @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');


  </style>
  `.trim()
}

export default class Wallet extends HTMLElement {
    static get observedAttributes() {
        return ['customer_id'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null
        }

        this.css = styles()
    }

    error() {
        console.log('error')
    }

    init_submit(target, value) {
        target.addEventListener('click', e=>{
            let _value = value.value
            fetch(`/api/wallet/update`, {
                method: 'POST',
                headers : new Headers({
                    "content-type": "application/json"
                }),
                body: JSON.stringify({customer_id: this.customer_id, amount: _value})
            })
            .then(res => res.json())
            .then(res => {
                res.result == 200 ? location.reload() : this.error()
            })
        })
    }

    transaction(tr){
        let {date_added, amount, transaction_id} = tr
        let state = amount > 0 ? '+' : '-'
        let color = state == '+' ? '_green' : '_red'
        /*html*/
            const el = `
            <tr>
                <td><p>${date_added ? date_added : 'n/a'}</p></td>
                <td><p class="${color}">${state}$${amount}</p></td>
                <td><p>${transaction_id}</p></td>
            </tr>
            `

            return el
    }

    get_past_transactions(target){ 
        const get = async () => {
            const meta = await fetch(`/api/wallet/meta`, {
                method: 'POST',
                headers : new Headers({
                    "content-type": "application/json"
                }),
                body: JSON.stringify({customer_id: this.customer_id})
            })

            const _json = await meta.json()
            this.transactions = await _json

            /*html*/
            return `
            <table class="table table-striped table-borderless table-response">
                <thead>
                    <th>date added</th>
                    <th>amount</th>
                    <th>transaction_id</th>
                </thead>
                <tbody>
                    ${this.transactions.transactions.map(tr=>{
                        return this.transaction(tr)
                    }).join("")}   
                </tbody>
            </table>
            `
        }

        get().then(markup => {
            target.innerHTML += markup
        })
    }

    edit_form(){
        /*html*/
        const el = `
            <div class="row">
                <div class="col-lg-4 col-md-4 col-sm-12">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">$</span>
                        </div>
                        <input class="form-control" id="amount">
                        <span class="form-control-border"></span>
                    </div>
                    
                    <button id="update_wallet" class="btn btn-primary">Update</button>
                </div>
                <div class="col-lg-8 col-md-8 col-sm-12">  
                    <div id="transactions">
                        <h1 class="widget__title">Past transactions &darr;</h1>
                    </div>
                </div>
            </div>
            
        `

        return el
    }

  render(init=true){
    const first = async () => {
        this.shadow.innerHTML = ""
        const el = document.createElement('div')
        el.innerHTML = `
            ${this.css}
            ${modal_trigger('wallet', 'edit')}
            ${modal('Enter amount to add or remove', this.edit_form(), 'wallet', false)}
        `
        return el
    }

    first().then(el=>{
        this.get_past_transactions(el.querySelector("#transactions"))
        this.init_submit(el.querySelector('#update_wallet'), el.querySelector("#amount"))

        return el
    })
    .then(el=>{
        this.shadow.appendChild(modal_handlers(el))
    })
  }

  connectedCallback() {
      this.customer_id = this.getAttribute('customer_id')
      this.render()
  }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('admin-wallet', Wallet))

import {iterate_text, modal, modal_trigger, modal_handlers, currency,currency_rounded,number,number_rounded,number_no_commas,percent,remove_commas,remove_commas_2} from '/static/src/convenience/helpers.js'

const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('/static/assets/icons/all.min.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
        
        .rec-container {
            padding: 4%;
            border-bottom: 1px solid #f2f2ff;
        }
        .rec {
            margin-bottom: 2%;
            padding: 5% 0 0;
            overflow-x: hidden;
        }
        .dismiss {
            position: relative;
            top: 0;
            margin: 0px 1px 15px !important;
            font-weight: 400;
            text-transform: lowercase;
            font-weight: 
        }
        .rec-title {
            position: relative;
            top: 0;
            left: 0;
            margin-bottom: 0;
            padding-bottom: 0;
        }
        .rec-apply {
            font-size: 75%;
            padding: 5px 10px;
            /*float: right;*/
            font-weight: 300;
        }
        .read-more {
            margin: auto;
            padding: 0;
        }

        


    </style>
    `.trim()
}

export default class Rec_shell extends HTMLElement {
    static get observedAttributes() {
        return ['rec-id', 'customer-id', 'title', 'body', 'index'];
    }

    constructor(){
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        
        this.state = {
            data: null
        }
        this.css = styles()

    }


    RecEvents(){
        const x = this.shadow.querySelectorAll(".x")
        if (this.demo != 'True') {
            x.forEach(el=>{
                el.addEventListener('click', e=>{
                    this.style.display = 'none';
                    this.setAttribute('dismissed', 'true')
                })
            })

            const apply = this.shadow.querySelectorAll('.rec-apply')
            
            apply.forEach(el=>{
                el.addEventListener('click', e=>{
                    e.currentTarget.textContent = 'Done!'
                    setTimeout(()=>{
                        this.style.display = 'none'
                        this.setAttribute('applied', 'true')
                    }, 1000)
                })
            })
        }
        
    }

    render(){
        this.shadow.innerHTML = ''
        const colors = ['#62cde0','#ca7d66','#01d4b4','#ff9c00', '#62cde0','#ca7d66','#01d4b4','#ff9c00', '#62cde0','#ca7d66','#01d4b4','#ff9c00', '#62cde0','#ca7d66','#01d4b4','#ff9c00']
        /*html*/
        const shell = async () => {
            return `
            ${this.css}
            ${modal(this.title, this.body, this.title)}
            <div class="rec-container">
                <div class="rec">
                    <div class="row">
                        <div class="col-lg-8 col-md-8 col-sm-12">
                            <p class="squashed rec-title small_txt">${this.title}</p>
                            <div data-uid="${this.title}" id="six" class="small_txt button">read more <i class="fas fa-caret-right"></i></div>
                        </div>
                        <div style="text-align:right;margin: auto;" class="col-lg-4 col-md-4 col-sm-12">
                            <button class="small_txt rec-apply btn btn-secondary">do it</button>
                            <br>
                            <button style="padding: 0;" class="btn btn-neutral dismiss">dismiss</button>
                        </div>
                    </div>
                </div>
            </div>
            `.trim()
        }

        const init = () => {
            this.RecEvents();
            modal_handlers(this.shadow)
        }

        shell()
            .then(html => {
                let el = document.createElement('div')
                el.innerHTML = html
                modal_handlers(this.shadow)
                return el
            })
            .then(el=> {this.shadow.appendChild(el); return el})
            .then(el => init())
    }

    connectedCallback(){
        this.rec_id = parseInt(this.getAttribute('rec-id'))
        this.customer_id = this.getAttribute('customer-id')
        this.title = this.getAttribute('title')
        this.body = this.getAttribute('body')
        this.index = parseInt(this.getAttribute('index')) % 4
        this.demo = this.getAttribute('demo')

        this.render()
    }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('recommendation-shell', Rec_shell))
import Rec_shell from '/static/src/components/customer/rec_shell.js'
import {dots_loader} from '/static/src/components/UI_elements.js'

const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');

        #rec-container {
            max-height: 420px;
            overflow-y: auto;
        }
        .rec {
            border-left: 4px solid gray;
            margin-bottom: 2%;
            padding: 5% 2% 0 5%;
        }
        .dismiss {
            position: relative;
            right: 15%;
            top: 10%;
        }
        .rec-title {
            line-height: .5em;
        }
        .rec-apply {
            font-size: 75%;
            /*float: right;*/
        }
        .read-more {
            margin: auto;
        }
    </style>
    `.trim()
}

export default class Recommendations extends HTMLElement {
    static get observedAttributes() {
        return ['customer-id'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null
        }
        this.observer = new MutationObserver(mutations=>{
            mutations.forEach(mutation => {
                if (mutation.type == "attributes") {
                    if (mutation.attributeName == 'applied') this.apply(mutation.target)
                    else if (mutation.attributeName == 'dismissed') this.dismiss(mutation.target)
                }
            });
        });

        this.css = styles()
    }

    remove_from_view(target){
        const refresh = async () => this.state.data = this.state.data.filter(rec => rec.rec_id != target.getAttribute('rec_id') );
        refresh()
            .then(this.render(true))
    }

    apply(target){
        this.remove_from_view(target)
        fetch('/api/recommendation/approve', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body:  JSON.stringify({
                customer_id: this.customer_id,
                rec_id: target.getAttribute('rec_id')
            })
        })
            .then(res=>res.json())
            .then( res=> console.log(res) )

    }

    dismiss(target){
        this.remove_from_view(target)
        fetch('/api/recommendation/dismiss', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body:  JSON.stringify({
                customer_id: this.customer_id,
                rec_id: target.getAttribute('rec_id')
            })
        })
            .then(res=>res.json())
            .then( res=> console.log(res) )
    }

    recommendation(rec, index){
        const el = new Rec_shell
        el.setAttribute('rec_id', rec.rec_id)
        el.setAttribute('index', index)
        el.setAttribute('customer_id', this.customer_id)
        el.setAttribute('title', rec.title)
        el.setAttribute('body', rec.body)
        el.setAttribute('demo', this.demo)

        this.observer.observe(el, {
            attributes: true
        });
        
        return el
    }

    render(state = false){
        this.shadow.innerHTML = `<div id="rec-container"></div>`
        let el = document.createElement('div')

        const append = res => {
            el.innerHTML = `${this.css}`
            if (this.state.data.length == 0) {
                el.innerHTML += `
                <p class="small_txt">Every week, you will receive tailored, actionable recommendations from our internal engines and stellar team.</p>
                <p class="small_txt">You can implement these recommendations with only 1 click. Until then, explore your dashboard and we'll email you when you receive your recommendations.</p>`
            } else for (let i in res) el.appendChild(this.recommendation(res[i], i))
        }

        const append_to_shadow = el => this.shadow.querySelector("#rec-container").appendChild(el)
        const init_state = async () => {
            if (state == false) {
                if (this.fetch) {
                    fetch('/api/outstanding_recs', {
                        method: 'POST',
                        headers : new Headers({
                            "content-type": "application/json"
                        }),
                        body:  JSON.stringify({
                            customer_id: this.customer_id,
                            admin_id: this.admin_id
                        })
                    })
                        .then(res=>res.json())
                        .then(res=> this.state.data = res)
                } else this.state.data = this.recs_json ? this.recs_json : []
            }
        }

        init_state().then(()=>{
            append(this.state.data)
            append_to_shadow(el)
        })

    }

    connectedCallback(){
        this.demo = this.getAttribute('demo')
        this.customer_id = this.getAttribute('customer-id')
        this.recs_json = eval(this.getAttribute('recs_json'))
        this.fetch = eval(this.getAttribute('fetch'))
        this.render()
    }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('customer-recommendations', Recommendations))
import {tabs, shadow_events, dots_loader} from '/static/src/components/UI_elements.js'
import {iterate_text, modal, modal_trigger, modal_handlers, currency,currency_rounded,number,number_rounded,number_no_commas,percent,remove_commas,remove_commas_2} from '/static/src/convenience/helpers.js'
const styles = () => {
    /*html*/
    return `
    <style>
    @import url('/static/assets/css/bootstrap.min.css');
    @import url('/static/assets/css/styles.css');
    @import url('/static/assets/icons/all.min.css');
    @import url("https://cdn.jsdelivr.net/npm/vanilla-datatables@v1.6.16/dist/vanilla-dataTables.min.css");
    @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
        
    </style>
    `.trim()
  }
  
  export default class Listener extends HTMLElement {
    static get observedAttributes() {
        return ['keywords', 'customer_id'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null
        }
  
        this.css = styles()
    }

    core(){
        /*html*/
        return `
        <h5 class="small_txt">What people are saying:</h5>
        <div class="row">
            <div class="col">
                <table class="table" id="listening">
                    <thead>
                        <th>Title</th>
                        <th>Link</th>
                    </thead>
                    <tbody>
                        ${this.state.data.map(res=>{
                            /*html*/
                            return `
                            <tr>
                                <td><p>${res.title}</p></td>
                                <td><a target="__blank" href="${res.url}">View</a></td>
                            </tr>
                            `
                        }).join("")}
                    </tbody>
                </table>
            </div>
        </div>
        `
    }

    null(){
        return `
            <div id="stall" style="center_it"><span><span></div>
            ${dots_loader()}
            <div id="table_container" style="display:none;">
                <table id="listening"></table>
            </div>
        `
    }
  
    render(init=true){
        const first = async () => {
            this.shadow.innerHTML = ""
            const el = document.createElement('div')
            el.innerHTML = `
              ${this.css}
              ${
                  this.state.data
                  ? this.core()
                  : this.null()
              }
          `
            return el
        }
        first().then(el=>{
            new DataTable(el.querySelector("#listening"));
            return el
        })
        .then(el=>{
            this.shadow.appendChild(el)
        })
        .then(()=>{
            let it;
            if(this.state.data == null){
                const lines = [
                    '...Analyzing top keywords of your competitors...',
                    "...Scanning the web for related conversations...",
                    "...o_O  these look interesting...",
                    "...Check them out and get engaged!"
                ]
                it = iterate_text(lines, this.shadow.querySelector('#stall'))
            } else {
                clearInterval(it)
            }
   
        })
    }
  
    connectedCallback() {
        this.keywords = this.getAttribute('keywords')
        this.customer_id = this.getAttribute('customer_id')

        const body = JSON.stringify({
            keywords: JSON.parse(this.keywords),
            customer_id: this.customer_id
        })


        this.render()
        fetch('/api/intel/listener', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body
        })
            .then(res=>res.json())
            .then(res=>{
                this.state.data = res
                this.render(true)
            })
            .catch(e=>{
                console.log(e)
            })

    }
  }
  
  document.addEventListener( 'DOMContentLoaded', customElements.define('market-listener', Listener))
const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');

        .blue_label {
            font-weight: bold;
            color: var(--darker-blue);
        }
    </style>
    `.trim()
}

export default class Budget extends HTMLElement {
    static get observedAttributes() {
        return ['customer_id'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null
        }

        this.css = styles()
    }

    shell() {
        /*html*/
        return `
        ${this.css}
        <div class="row row_cancel">
            <div class="col-4">
                <p class='small_txt'>Funds remaining<br><a href="/home/settings">[add more]</a>:</p>
            </div>
            <div class="col-4">
                <p class="small_txt">Amount spent (last 7 days):</p>
            </div>
            <div class="col-4">
                <p class="small_txt">Target weekly spend<br><a href="/home/settings">[change]</a>:</p>
            </div>
        </div>

        <div class="row">
            <div class="col-4">
                <h5 class='blue_label'>${currency(parseFloat(this.funds_remaining || 0))}</h5>
            </div>
            <div class="col-4">
                <h5 class="blue_label">${currency_rounded(parseFloat(this.state.data.spend))}</h5>
            </div>
            <div class="col-4">
                <h5 class="blue_label">${currency_rounded(this.spend_rate * 12 / 52)}</h5>
            </div>
        </div>
        `.trim()
    }

    render(init=true){
        this.shadow.innerHTML = ""
        const el = document.createElement('div')
        
        fetch('/api/spend/last_7', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body:  JSON.stringify({
                company_name: this.customer_id == 200 ? "o3" : this.company_name,
                customer_id: this.customer_id
            })
        })
            .then((res) => res.json())
            .then(res=>this.state.data = res)
            .then(()=>{
                el.innerHTML = this.shell()
            })
            .then(()=>{
                this.shadow.appendChild(el)
            })
    }

    connectedCallback() {
        this.customer_id = this.getAttribute('customer_id')
        this.spend_rate = this.getAttribute('spend_rate')
        this.funds_remaining = this.getAttribute('funds_remaining')
        this.company_name = this.getAttribute('company_name')
        this.render()
    }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('portfolio-budget', Budget))


import {google, facebook} from '/static/src/components/UI_elements.js'
const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');

        .blue_label {
            color: var(--darker-blue);
            font-weight: bold;
        }
        th {
            font-size: 90%;
        }
    </style>
    `.trim()
}

export default class AccountCreative extends HTMLElement {
    static get observedAttributes() {
        return ['customer_id'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null
        }

        this.css = styles()
    }

    display_shell(name, type, perc_of_budget, index, creative){
        /*html*/
        return `
            <tr>
                <td><p class="small_txt">${name}</p></td>
                <td><p class="small_txt">${type}</p></td>
                <td><p class="small_txt">${index}</p></td>
                <td><p class="small_txt">${perc_of_budget}</p></td>
                <td><p class="small_txt">${creative}</p></td>
            </tr>
        `.trim()
    }

    ad_shell(ad, index, perc_budget, spend){
        return `
        <div class="row">
            <div class="col-lg-6">
                ${ad}
            </div>
            <div class="col-lg-6">
                <div class="row">
                    <div class="col">
                        <span class="small_txt">Market(r) Index</span>
                        <h5 class="blue_label">${index}</h5>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <span class="small_txt">Percent of ad budget</span>
                        <h5 class="blue_label">${perc_budget}</h5>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <span class="small_txt">Amount spent</span>
                        <h5 class="blue_label">${spend}</h5>
                    </div>
                </div>

            </div>
        </div>
        `
    }

    core() {
        /*html*/
        return `
        <div class="row">
            <div class="col">
                <table id="creative_table" class="table table-reponsive">
                    <thead>
                        <th>Campaign name</th>
                        <th>Campaign type</th>
                        <th>Market(r) Index</th>
                        <th>Percent of budget</th>
                        <th>View ad</th>
                    </thead>
                    <tbody>
                        ${this.data.ads.social.map((it, index)=>{
                            const creative_body = this.ad_shell(
                                facebook('', it.thumbnail_url, it.body),
                                it.marketr_index.toFixed(2),
                                percent(it.cost / this.data.total_spent * 100),
                                currency(it.cost)
                            )
                            const uid = `social-${index}`
                            const creative = modal(it.name, creative_body, `social-${index}`) + modal_trigger(uid, 'view ad')
                            
                                /*html*/
                                return `
                                    ${this.display_shell(it.name, 'Social', percent(it.cost / this.data.total_spent * 100), it.marketr_index.toFixed(2), creative)}
                                `
                            }).join("")}
                    
                            ${this.data.ads.search.map((it, index)=>{
                                if (it.headline1 != 0) {
                                    let url = JSON.parse(it.finalurl)
                                    const creative_body = this.ad_shell(
                                        google(it.headline1 + " " + it.headline2, url[0], it.description != 0 ? it.description : ''),
                                        it.marketr_index.toFixed(2),
                                        percent(it.cost / this.data.total_spent * 100),
                                        currency(it.cost)
                                    )
                                    
                                    const uid = `search-${index}`
                                    const creative = modal(it.name, creative_body, uid) + modal_trigger(uid, 'view ad')
                                    return `
                                        ${this.display_shell(it.name, 'Search', percent(it.cost / this.data.total_spent * 100), it.marketr_index.toFixed(2), creative)}
                                    `
                                }
                            }).join("")}
                    </tbody>
                </table>
            </div>
        </div>
  
  
        `.trim()

    }

    null_state(){
        return `
            <p>This is where you'll see the performance of all of the different ads that will be running for your business. Your Market(r) guide will reach out to you for any more info.</p>
            <p>Head over to the chat tab if you have any questions and you'll get a response within an hour!</p>
            <p class="small_txt">~ Tristan Tarpley, Founder of Market(r)</p>
        `
    }

    render(init=true){
        const first = async () => {
            this.shadow.innerHTML = ""
            const el = document.createElement('div')
            return el
        }

        first().then(el=>{
            /*html*/
            el.innerHTML = `
            ${this.css}
            ${this.data.total_spent > 0
                ? this.core()
                : this.null_state()
                }
            `
            return el
        }).then(el=>{
            new DataTable(el.querySelector("#creative_table"))
            return el
        }).then(el=>{
            this.shadow.appendChild(el)
            
        }).then(()=>modal_handlers(this.shadow))
    }

    connectedCallback() {
        this.customer_id = this.getAttribute('customer_id')
        this.data = JSON.parse(this.getAttribute('data'))
        this.render()
    }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('account-creative', AccountCreative))


import Funnel from '/static/src/components/portfolio/details/funnel.js'
import Active from '/static/src/components/portfolio/details/active.js'
const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');

 
    </style>
    `.trim()
}

export default class PortfolioDetails extends HTMLElement {
    static get observedAttributes() {
        return ['customer_id'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null
        }

        this.css = styles()
    }

    active(){
        const el = new Active()
        el.setAttribute('customer_id', this.customer_id)
        el.setAttribute('company_name', this.company_name)
        el.setAttribute('data', this.data)
        return el
    }

    funnel(){
        const el = new Funnel()
        el.setAttribute('customer_id', this.customer_id)
        el.setAttribute('company_name', this.company_name)
        return el
    }

    render(init=true){
        this.shadow.innerHTML = ""
        const el = document.createElement('div')

        el.innerHTML = `
            ${this.css}
            <div class="row">
                <div id="funnel" class="col-lg-12 col-md-12">
                </div>
            </div>
        `
        //el.querySelector("#active").appendChild(this.active())
        el.querySelector("#funnel").appendChild(this.funnel())
        this.shadow.appendChild(el)
    }

    connectedCallback() {
        this.customer_id = this.getAttribute('customer_id')
        this.company_name = this.getAttribute('company_name')
        this.data = JSON.parse(this.getAttribute('data'))
        this.render()
    }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('portfolio-details', PortfolioDetails))



import {urlify, iterate_text, modal, modal_trigger, modal_handlers, currency,currency_rounded,number,number_rounded,number_no_commas,percent,remove_commas,remove_commas_2} from '/static/src/convenience/helpers.js'

const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('/static/assets/icons/all.min.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
        .signature {
            font-style: italic;
        }
        .dark_blue {
            color: var(--darker-blue);
            font-weight: bold;
        }
        .shadow_insights {
            max-height: 500px;
            overflow-y: auto;
            overflow-x: hidden;
        }
    
        .shadow_insights p {
            white-space: pre-wrap;
        }
        ._insight_row {
            padding: 4%;
            border-top: 1px solid rgba(0,0,0,.1);
        }
        .clipped_txt {
            white-space: normal !important;
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            margin: 0;
        }
 
    </style>
    `.trim()
}

export default class Insights extends HTMLElement {
    static get observedAttributes() {
        return ['customer_id'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null
        }

        this.css = styles()
    }

    shell(){
        /*html*/
        return `
        ${this.css}
        <div class="shadow_insights">
                ${this.state.data.map((ins, index)=>{
                    let title = `From ${ins.admin} on ${ins.time}`
                    let uid = `${ins.time}_${index}`
                    let body = urlify(ins.body.replace('/\/g', "-"))

                    /*html*/
                    return `
                    ${modal(title, body, uid)}
                    <div class="rec-container">
                        <div class="rec">
                            <div class="row">
                                <div class="col">
                                    <p style="text-decoration:underline;" class="squashed rec-title small_txt">${title}</p>
                                    <p class="small_txt clipped_txt">${body}</p>
                                    <div style="padding: 0;" data-uid="${uid}" id="six" class="small_txt button">read more <i class="fas fa-caret-right"></i></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <hr>
                    `
                }).join("")}

                ${this.state.data.length == 0
                    ? `
                    <p>Every week your Market(r) guide will send you detailed analysis on your portfolio performance. These insights are archived here!</p>
                    <p>Head over to the chat tab if you have any questions and you'll get a response within an hour!</p>`
                    :  `    
                    <p class="signature x_small_txt">Are these insights helpful?  Send us a message via Chat to ask any follow-up questions or provide feedback for improvement.</p>
                    <p class="signature x_small_txt">Thanks! ~ Tristan | Founder </p>`
                }
        </div>
        `.trim()
    }

    render(){
        this.shadow.innerHTML = ""
        const el = document.createElement('div')
        const init_state = async () => {
            if (this.fetch) {
                fetch('/api/insights', {
                    method: 'POST',
                    headers : new Headers({
                        "content-type": "application/json"
                    }),
                    body:  JSON.stringify({
                        customer_id: this.customer_id
                    })
                })
                .then(res=>res.json())
                .then(res=>this.state.data = res)
            }
            else this.state.data = this.insights_json ? this.insights_json : []
        }
        
        init_state().then(()=>{
            el.innerHTML = this.shell()
            this.shadow.appendChild(modal_handlers(el))
        })
    }

    connectedCallback() {
        this.customer_id = this.getAttribute('customer_id')
        this.fetch = eval(this.getAttribute('fetch'))
        this.insights_json = eval(this.getAttribute('insights_json'))
        this.render()
    }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('portfolio-insights', Insights))


import {tabs, shadow_events, dots_loader} from '/static/src/components/UI_elements.js'
import {iterate_text, modal, modal_trigger, modal_handlers, currency,currency_rounded,number,number_rounded,number_no_commas,percent,remove_commas,remove_commas_2} from '/static/src/convenience/helpers.js'

const _score_color = (val) => {
  let _class;
  if (val <= 4) _class = '_red'
  else if (val > 4 && val <= 7) _class = '_yellow'
  else if (val > 7) _class = '_green'

  return _class
}
const _score = (val) => {
  let _class = _score_color(val)
  return `<h1 class="${_class} widget__value">${number(val)}</h1>`
}

const styles = (attrs) => {
  let {max_height} = attrs
  /*html*/
  return `
  <style>
      @import url('/static/assets/css/bootstrap.min.css');
      @import url('/static/assets/css/styles.css');
      @import url('/static/assets/icons/all.min.css');
      @import url("https://cdn.jsdelivr.net/npm/vanilla-datatables@v1.6.16/dist/vanilla-dataTables.min.css");
      @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');

      .opp_container {
          max-height: ${max_height}px;
          overflow-y: scroll;
          overflow-x: hidden;
      }
      .opp_row {
        border-bottom: 1px solid #eee !important;
        margin-bottom: 4%;
        display: flex;
        align-items: center;
        padding: 1% 5%;
      }
      table .widget__title {
        margin-bottom: 0 !important;
        font-size: .7em;
      }
      
      td {
        vertical-align: middle !important;
      }
      td span {
        font-size: 8pt;
      }
  </style>
  `.trim()
}

export default class Opportunities extends HTMLElement {
  static get observedAttributes() {
      return ['json'];
  }
  constructor() {
      super();
      this.shadow = this.attachShadow({ mode: 'open' });
      this.state = {
          data: null
      }
  }

  collapsed_view() {
    return `
    <div class="row">
      <div class="col-lg-6 col-md-6 col-sm-6 col-6">
        <h1 class="widget__title small">Topic</h1>
      </div>
      <div style="text-align:right;" class="col-lg-6 col-md-6 col-sm-6 col-6 ">
        <h1 style="justify-content: flex-end;" class="widget__title small">Opportunity score</h1>
      </div>
    </div>

    <div class="opp_container">
      ${this.state.data.aggregate.map(top =>{
        let {opp_score, cleaned_keywords} = top
        let returned = ''

        if (opp_score > 0) returned += this.row(cleaned_keywords, opp_score)
        else returned += ''

        return returned
      }).join("")}
    </div>`
  }

  expanded_view(){
    let data = this.state.data.raw
    const header = (title) => `<h1 class="widget__title">${title}</h1>`
    const value = (val) => `${val}`
    const num_value = (val, options) => {
      if (val) {
        let defaults = {
          percent: false,
          rounded: false,
          currency: false,
          color: false
        }

        options = Object.assign({}, defaults, options);

        const display = num => {
          let returned;
          if (options.rounded) returned = number_rounded(num)
          else returned = number(num)

          if (options.color) returned = `<span style="font-size:inherit;" class="${_score_color(returned)}">${returned}</span>`

          return returned
        }
        
        return `${options.currency ? "$" : ""}${val ? display(val) : 0}${options.percent ? "%" : ""}`
      }
      else return 'n/a'
    }

    let headings = [
      'opp. score',
      'keyword',
      'quality score',
      'quality score opportunity score',
      'impression share',
      'impression share opportunity score',
      'top impression share',
      'top impression share opportunity score',
      'lost top impression share',
      'lost impression share opportunity score',
      'profit potential per $100 spent',
      'contrained health score',
      'impressions',
      'clicks',
      'ctr',
      'cpc',
      'cost',
    ]

    let d_rows = data.map(row=>{
      return [
        num_value(row.opp_score > 0 ? row.opp_score : null, {color: true}),
        value(row.keyword),
        num_value(row.qualityscore),
        num_value(row.qs_opp_score),
        num_value(row.searchimprshare * 100, {percent: true}),
        num_value(row.is_opp_score),
        num_value(row.searchtopis * 100, {percent: true}),
        num_value(row.top_is_opp_score),
        num_value(row.searchlosttopisrank * 100, {percent: true}),
        num_value(row.lost_is_opp_score),
        num_value(row.pp100, {currency: true}),
        num_value(row.contrained_mi),
        num_value(row.impressions, {rounded: true}),
        num_value(row.clicks, {rounded: true}),
        num_value(row.ctr * 100, {percent: true}),
        num_value(row.cpc, {currency: true}),
        num_value(row.cost, {currency: true}),
      ]
    })

    const options = {
      searchable: false,
      perPage: 5,
      perPageSelect: false,
      sortable: true,
      data: {
        "headings": headings,
        "data": d_rows
      }
    }

    return options
  }

  row(keyword, score) {
    /*html*/
    return `
      <div class="opp_row row">
        <div class="col-lg-6 col-md-6 col-sm-6">
          <span>${keyword}</span>
        </div>
        <div style="text-align:right;" class="col-lg-6 col-md-6 col-sm-6">
          ${_score(score)}
        </div>
      </div>
    `
  }

  render(init=true){
      this.shadow.innerHTML = ""
      const el = document.createElement('div')
      /*html*/
      el.innerHTML = `
        ${this.css}
        ${!this.state.expanded ? this.collapsed_view() : `<table class="table-responsive" id="expanded_table"></table>`}
      `

      this.shadow.appendChild(el)

      if (this.state.expanded) {
        new DataTable(this.shadow.querySelector("#expanded_table"), this.expanded_view());
      }
  }

  connectedCallback() {
      this.state.data = JSON.parse(this.getAttribute('json'))
      this.max_height = this.getAttribute('max-height')
      this.state.expanded = eval(this.getAttribute('expanded'))

      this.css = styles({
        max_height: this.max_height
      })

      this.render()
  }
}

document.addEventListener( 'DOMContentLoaded', customElements.define('opportunities-agg', Opportunities))

import PortfolioTrendline from '/static/src/components/portfolio/portfolio_trendline.js'
import PortfolioDetails from '/static/src/components/portfolio/Details.js'
import Insights from '/static/src/components/portfolio/Insights.js'
import Creative from '/static/src/components/portfolio/Creative.js'
import {google, facebook} from '/static/src/components/UI_elements.js'
import Recommendations from '/static/src/components/customer/recommendations.js'
import Opportunities from '/static/src/components/portfolio/Opportunities.js'
import { dots_loader, custom_select_body } from '/static/src/components/UI_elements.js'
import {remove_duplicates, iterate_text, modal, modal_trigger, modal_handlers, currency,currency_rounded,number,number_rounded,number_no_commas,percent,remove_commas,remove_commas_2} from '/static/src/convenience/helpers.js'


const title = (text, small=false) => `<h1 class="widget__title ${small ? `small` : ''}">${text}</h1>`
const value = (text, small=false) => `<h1 class="${small ? 'small_txt' : '' } widget__value">${text}</h1>`
const marketr_score = (value, sub=false, huge=false) => {
    let _class;
    if (value <= 1) _class = '_red'
    else if (value > 1 && value <= 2) _class = '_yellow'
    else if (value > 2) _class = '_green'


    return `<h1 class="${_class} ${huge ? 'oversized_text' : ''} widget__value">${number(value)} ${sub ? `<p style="font-size:40%;">health score</p>` : ''}</h1>`
}

const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('/static/assets/icons/all.min.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
        #comparison_table td {
            /*border-bottom: 1px solid #f2f2ff;*/
            padding: 2%;
        }
        .custom_modal .button {
            display: flex;
            flex-grow: 1;
            padding: 0;
            margin: 0;
            flex-direction: column;
        }
        .custom_modal p {
            display: none;
        }
        .custom_modal h1.small {
            color: var(--nav-color);
        }
        .metric_display {
            color: var(--primary);
            font-weight: bold;
            font-size: 120%;
        }

        #profit_chart_container {
            width: 100% !important;
            max-height: 380px !important; 
        }

        #profit_chart {
            width: 100% !important;
        }
        #insights {
            max-height: 500px;
        }

        .metric_labels {
            font-weight: 300;
            font-size: 95%;
        }
        #select_container .widget__title {
            margin-bottom: 3%;
        }
        #view_selector {
            padding: 0 4%;
        }
        #view_selector button {
            font-size: .7em;
            margin: 0;
            width: 100%;
        }
        #view_selector div:nth-child(1) button {
            border-left: 2px solid var(--primary) !important;
            border-right: 1px solid var(--primary) !important;
            border-radius: 0.1875rem 0 0 0.1875rem !important;
        }
        #view_selector div:nth-child(4) button {
            border-left: 1px solid var(--primary) !important;
            border-right: 2px solid var(--primary) !important;
            border-radius: 0 0.1875rem 0.1875rem 0 !important;
        }
        #view_selector div {
            padding: 0;
            margin: 0;
        }
        #view_selector div button.btn-secondary {
            padding: 10px 22px !important;
        }
        #view_selector div button {
            border-radius: 0;
            border-top: 2px solid var(--primary);
            border-right: 1px solid var(--primary);
            border-left: 1px solid var(--primary);
            border-bottom: 2px solid var(--primary);
        }
        #select_range {
            border-top: none;
            border-left: none;
            border-right: none;
            border-bottom: 2px solid rgba(0,0,0,.1);
        }
        @media only screen and (max-width: 700px) {
            #select_range {
                position: static;
                width: 100%;
            }
        }

        .blue-card {
            background-color: var(--panel-bg);
            box-shadow: var(--silicon-raised);
            text-align:center;
        }

        .stats {
            align-items: center;
            padding: 13px 0 11px;
            border-bottom: 1px solid #f2f2ff;
        }

        .stats {
            list-style-type: none;
            margin: 0;
            padding: 0;
            list-style: none;
        }
        .stat {
            display: flex;
            align-items: center;
            padding: 13px 0 11px;
            border-bottom: 1px solid #f2f2ff;
        }
        .stat-wrapper {
            padding: 0 30px;
            position: relative;
            list-style-type: none;
            width: 100%;
        }
        .stat span {
            vertical-align: baseline;
            margin-bottom: 0;
        }
        .stat h1 {
            color: var(--darker-blue);
            font-weight: 600;
            font-size: 25px;
            margin-right: 20px;
            flex-shrink: 0;
            margin-bottom: 0;
        }
        .stat h3 {
            font-size: 18px;
            font-weight: 600;
            margin-left: auto;
            margin-bottom: 0;
        }
        .secondary_value {
            color: var(--secondary);
            font-size: 18px;
            font-weight: 600;
            margin-left: auto;
            margin-bottom: 0;
        }


    </style>
    `.trim()
}

export default class PortfolioPerformance extends HTMLElement {
    static get observedAttributes() {
        return ['customer-id', 'company-name', 'facebook_id', 'google_id', 'spend_rate', 'funds_remaining', 'insights'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null,
            date_range: 30,
            active_view: 0,
            active_data: {
                profitability: {
                    
                }
            },
            opp_expanded: false
        }

        this.static_copy = {
            score: `<p>An overall health metric of your portfolio. It’s a metric without limit.</p>
            <p>And much like a stock price, ideally increases over time. </p>
            <p>It’s a function of:</p>
            <ul style="text-align:left;">
                <li>Customer lifetime value</li>
                <li>Lead close rates</li>
                <li>Click through rates</li>
                <li>Cost per impression</li>
                <li>Impression share ranking</li>
                <li>Marketing portfolio strength</li>
            </ul>
            
            <p>This value is calculated and compared at the lowest levels of your marketing tactics and rolled up to the Account Portfolio level.</p>
            `
        }

        this.css = styles()
    }

    abort(){
        this.state = {
            data: null,
            date_range: 30,
            active_view: 0,
            active_data: {
                profitability: {
                    
                }
            }
        }
        this.render()
    }

    profit_chart(target){
        var chart = target.getContext('2d')

        target.innerHTML = ""

        let {dates, pp100, cpm} = this.state.active_data.profitability
   
        const data = {
            labels: dates,
            datasets: [
                {
                    label: "Profit potential per $100 spent",
                    fill: false,
                    borderColor: "#09A1BC",
                    backgroundColor: "rgba(98, 205, 224, 0.8)",
                    borderWidth: 5,
                    pointRadius: 0,
                    pointBackgroundColor: "rgb(154, 238, 252)",
                    pointBorderColor: "rgba(98, 205, 224, 0.9)",
                    data: pp100,
                    pointHoverBorderWidth: 2,
                    pointHoverRadius: 7,
                    drawBorder: true
                },
                // {
                //     label: "Cost per thousand impressions",
                //     fill: false,
                //     borderColor: "#ca7d66",
                //     backgroundColor: "rgba(202, 125, 100, 0.8)",
                //     borderWidth: 5,
                //     pointRadius: 0,
                //     pointBackgroundColor: "rgb(224, 167, 148)",
                //     pointBorderColor: "rgba(202, 125, 100, 0.8)",
                //     data: cpm,
                //     pointHoverBorderWidth: 2,
                //     pointHoverRadius: 7,
                //     drawBorder: true
                // }
            ]
        };
        let font_color = `#b8b8d9`
        const options = {
            maintainAspectRatio: false,
            legend: {
                display: false,
                labels: {
                    fontColor: font_color
                }
            },
            scales: {
                xAxes: [{ 
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    ticks: {
                      fontColor: font_color
                    },
                }],
                yAxes: [{
                    gridLines: {
                        display: false,
                        drawBorder: false
                    },
                    ticks: {
                      fontColor: font_color
                    },
                }],
            },
            plugins: {
                datalabels:{
                    display: false
                }
            },
            elements: {
                line: {
                    tension: 0
                }
            },
            responsive: true
        };
        new Chart(chart, {
            type: 'line',
            data: data,
            options: options
        });
    }

    reset_charts(el){
        setTimeout(()=>{
            this.profit_chart(el.querySelector("#profit_chart"))
        }, 800)
    }


    data_controller(){
        let { active_view, data, active_data } = this.state
        let dates = []
        let pp100 = []
        let cpm = []
        let buckets = []
        let sub_filters = []
        let campaigns = []
    
        const append_data = (iterable, value) => [...iterable, value]
        const group = i => {
            dates = append_data(dates, i.date_start)
            pp100 = append_data(pp100, i.pp100)
            cpm = append_data(cpm, i.cpm)
        }
        const group_buckets = i => {

            sub_filters.push(i.type)
            buckets = [...buckets, {
                type: i.type,
                dates: i.raw.map(x => x.date_start),
                cpm: i.raw.map(x => x.cpm),
                pp100: i.raw.map(x => x.pp100),
                marketr_index:i.index,  
                cost: i.cost
            }]
        }

         //dates = Array.from(new Set([...dates, i.date_start]))
       
        switch(active_view) {
            // portfolio
            case 0:
                for (let i of data.aggregate.raw) group(i)
                this.state.breakdown = data.buckets
                this.state.active_data.profitability = {dates, pp100, cpm, marketr_index: this.state.data.aggregate.index}
                break
            // platforms
            case 1:
                for (let i of data.buckets) group_buckets(i)
                this.sub_filters = sub_filters
                let _buckets = buckets.filter(x=>{
                    return x.type == this.state.active_sub_view
                })
                
                this.state.breakdown = data.campaigns
                this.state.active_data.profitability = {
                    dates: _buckets.map(i => i.dates).flat(),
                    pp100: _buckets.map(i=>i.pp100).flat(),
                    cpm: _buckets.map(i=>i.cpm).flat(),
                    marketr_index: _buckets[0] ? _buckets[0]['marketr_index'] : 0,
                    cost: _buckets.map(i=>i.cost).reduce((a, b) => a + b, 0)
                }
                break
            // campaigns
            case 2:
                const campaign_struct = (camp) => {
                    return {
                        campaign_name: camp.campaign_name,
                        pp100: camp.pp100,
                        cpm: camp.cpm,
                        date_start: camp.date_start,
                        marketr_index:camp.marketr_index,
                        action: camp.action,
                        conversions: camp.conversions,
                        cost: camp.cost,
                        cost_comp: camp.cost_comp,
                        pp100_comp: camp.pp100_comp,
                        index_comp: camp.index_comp,
                        cost_comp: camp.cost_comp,
                        cpl_comp: camp.cpl_comp,
                        perc_change: camp.perc_change
                    }
                } 
                let ranged_campaigns = []
                const group_ranged_campaigns = camp => {
                    ranged_campaigns = [...ranged_campaigns, campaign_struct(camp)]
                    if (!sub_filters.includes(camp.campaign_name)) sub_filters.push(camp.campaign_name)
                }
                const group_campaigns = camp => {
                    campaigns = [...campaigns, campaign_struct(camp)]
                }

                if (data.ranged_campaigns.search) {
                    data.ranged_campaigns.search.map(camp=> group_ranged_campaigns(camp) )
                }
                if (data.ranged_campaigns.social) {
                    data.ranged_campaigns.social.map(camp=> group_ranged_campaigns(camp) )
                }
                if (data.campaigns.search) {
                    data.campaigns.search.map(camp=> group_campaigns(camp) )
                }
                if (data.campaigns.social) {
                    data.campaigns.social.map(camp=> group_campaigns(camp) )
                }

                this.sub_filters = sub_filters
                let _ranged_campaigns = ranged_campaigns.filter(x=>x.campaign_name == this.state.active_sub_view)
                let _campaigns = campaigns.filter(x=>x.campaign_name == this.state.active_sub_view)
                let copied_ranged_campaigns = _ranged_campaigns.filter(x=>x.campaign_name == this.state.active_sub_view)
                let copied_campaigns = _campaigns.filter(x=>x.campaign_name == this.state.active_sub_view)
                this.state.breakdown = remove_duplicates(copied_campaigns, 'campaign_name')

                this.state.active_data.profitability = {
                    dates: copied_ranged_campaigns.map(_camp=>_camp.date_start),
                    pp100: copied_ranged_campaigns.map(_camp=>_camp.pp100),
                    cpm: copied_ranged_campaigns.map(_camp=>_camp.cpm),
                    marketr_index: copied_ranged_campaigns.map(_camp=>_camp.marketr_index)[copied_ranged_campaigns.map(_camp=>_camp.marketr_index).length - 1],
                    action: copied_ranged_campaigns.map(i=>i.action)[copied_ranged_campaigns.map(i=>i.action).length - 1],
                    cost: copied_ranged_campaigns.map(i=>i.cost).reduce((a, b) => a + b, 0)
                }
        
                break
            // ads
            case 3:
                let ads = []
                let ranged_ads = []
                const ads_struct = (i, id, name, creative) => {
                    return {
                        campaign_name: i.campaign_name,
                        id: id,
                        pp100: i.pp100,
                        cpm: i.cpm,
                        marketr_index:i.marketr_index,
                        date_start: i.date_start,
                        action: i.action,
                        cost: i.cost,
                        creative,
                        name,
                        conversions: i.conversions,
                        cost_comp: i.cost_comp,
                        pp100_comp: i.pp100_comp,
                        index_comp: i.index_comp,
                        cost_comp: i.cost_comp,
                        cpl_comp: i.cpl_comp,
                        perc_change: i.perc_change
                    }
                }

                const group_ranged_ads = i => {
                    let id = i.id == undefined ? i['adid'] : i['id']
                    
                    let name = i.ad_name == undefined || 0 ? id : i.ad_name
                    let creative;

                    if (i.id == undefined) {
                        creative = {
                            headline: `${i.headline1} | ${i.headline2}`,
                            description: i.description,
                            url: i.finalurl,
                            imageadurl: i.imageadurl
                        }
                    } else {
                        creative = {
                            thumbnail: i.thumbnail_url,
                            body: i.body
                        }
                    }

                    ranged_ads = [...ranged_ads, ads_struct(i, id, name, creative)]
                    if (!sub_filters.includes(name)) sub_filters.push(name)
                }
                

                if (data.ranged_ads.search) {
                    data.ranged_ads.search.map(ad=>{
                        group_ranged_ads(ad)
                    })
                }
                if (data.ranged_ads.social) {
                    data.ranged_ads.social.map(ad=>{
                        group_ranged_ads(ad)
                    })
                }




                const group_ads = i => {
                    let id = i.id == undefined ? i['adid'] : i['id']
                        
                    let name = i.ad_name == undefined || 0 ? id : i.ad_name
                    let creative;

                    if (i.id == undefined) {
                        creative = {
                            headline: `${i.headline1} | ${i.headline2}`,
                            description: i.description,
                            url: i.finalurl,
                            imageadurl: i.imageadurl
                        }
                    } else {
                        creative = {
                            thumbnail: i.thumbnail_url,
                            body: i.body
                        }

                    }

                    ads = [...ads, ads_struct(i, id, name, creative)]

                }

                if (data.ads.search) {
                    data.ads.search.map(ad=>{
                        group_ads(ad)
                    })
                }
                if (data.ads.social) {
                    data.ads.social.map(ad=>{
                        group_ads(ad)
                    })
                }

                this.sub_filters = sub_filters
                
                let _copied_ads = ranged_ads.filter(x=>x.name == this.state.active_sub_view)
                let copied_ads;

                if (_copied_ads.length == 0) copied_ads = ranged_ads.filter(x=>x.id == this.state.active_sub_view)
                else copied_ads = _copied_ads

                let _breakdown_ads = ads.filter(x=>x.name == this.state.active_sub_view)
                let breakdown_ads;

                if (_breakdown_ads.length == 0) {
                    try {
                        breakdown_ads = ads.filter(x=>x.id === this.state.active_sub_view)
                    } catch (error) {
                        console.log(error)
                        breakdown_ads = _breakdown_ads
                    }   
                } else {
                    breakdown_ads = _breakdown_ads
                }

                this.state.breakdown = breakdown_ads[0]

                this.state.active_data.profitability = {
                    dates: copied_ads.map(_camp=>_camp.date_start),
                    pp100: copied_ads.map(_camp=>_camp.pp100),
                    cpm: copied_ads.map(_camp=>_camp.cpm),
                    marketr_index: copied_ads.map(_camp=>_camp.marketr_index).reduce((sum, value) => sum + value, 0 / copied_ads.map(_camp=>_camp.marketr_index).length),
                    action: copied_ads.map(i=>i.action)[copied_ads.map(i=>i.action).length - 1],
                    cost: copied_ads.map(i=>i.cost).reduce((a, b) => a + b, 0)
                }
                break
        }

    }

    view_controller(el){
        
        el.querySelectorAll('#view_selector button').forEach(el=>{
            el.addEventListener('click', e => {
                let target = e.currentTarget
                target.classList.remove('btn-outline')
                target.classList.remove('btn-outline-secondary')
                target.classList.add('btn-secondary')

                this.sub_edited = false
                const first = async () => {
                    this.state.active_view = parseInt(target.value)
                } 
                first().then(()=>this.data_controller()).then(()=>{
                    setTimeout(()=>{
                        this.render(false)
                    }, 600)
                })
            })
        })

        el.querySelector("#sub_target").addEventListener('change', e=>{
            this.sub_edited = true
            const first = async () => this.state.active_sub_view = e.currentTarget.value
            first().then(()=>this.data_controller()).then(() => {
                setTimeout(()=>{
                    this.render(false)
                }, 600)
            })

        })

        el.querySelector('#date_range').addEventListener('change', e=>{
            this.state.date_range = parseInt(e.currentTarget.value)
            this.data_controller()
            this.render(true)
        })

        return el
    }

    mas_campaigns_cta() {
        return `
        <div class="center_it"> 
        <br><br>
            <h1 style="margin-bottom:0;" class="widget__title">Is there a campaign type you want to run, but we don't offer (yet)?</h1>
            <p class="small_txt">Head over to chat and tell your Market(r) guide and we'll add it to our list.</p>
            <a href="${!this.demo ? '/home?view=messages' : '#'}" class="btn btn-outline btn-outline-secondary">Tell us</a>
        </div>
        `
    }

    breakdown_markup(){
        let markup;
        let data = this.state.breakdown
        let {active_view} = this.state
        
        if (!data) this.data_controller()

        const row = (index, description, description_sub, cost) => {
            let third_sub = {
                0: `<p style="font-size:8pt;">total spent</p>`,
                1: `<p style="font-size:8pt;">total spent</p>`,
                2: `<p style="font-size:8pt;">cost per<br>conversion</p>`,
                3: ``
            }
            /*html*/
            return`
                <li class="stat-wrapper">
                    <div class="stat">
                        ${marketr_score(index, true)}
                        <br>
                        <span>${description}<br> <p style="font-size: 8pt;">${description_sub}</p></span>
                        <h3 style="text-align:right;">
                            ${currency(cost)}
                            ${third_sub[active_view]}
                        </h3>
                    </div>
                </li>
            `
        } 

        const meta = (index, perc_change, condensed=false) => {
            let third_sub = {
                0: `<p style="font-size:8pt;">total spent</p>`,
                1: `<p style="font-size:8pt;">total spent</p>`,
                2: `<p style="font-size:8pt;">total spent</p>`,
                3: ``
            }
            let up = `<i class="fas direction_icons good_direction fa-arrow-circle-up"></i>`
            let down = `<i class="fas direction_icons bad_direction fa-arrow-circle-down"></i>`
            /*html*/
            return`
                <div class="center_vertically ${condensed ? 'condensed' : '' }">
                    <div class="center_it">
                        ${title('health score', true)}
                        ${marketr_score(index, false, true)}
                    </div>
                    
                    <div class="center_it stat-trend up green">
                        ${perc_change > 0 ? up : down }
                        <p class="center_it"><span class="${perc_change > 0 ? '_green' : '_red'}">${number_rounded(perc_change * 100)}%</span> in past 7 days</p>
                    </div>
                </div>
                
                
            `
        } 

        
        switch(this.state.active_view) {
            case 0:
                /*html*/
                markup = `
                ${data.map(_row=>{
                    return row(_row.index, _row.type, 'campaign type', _row.cost)
                }).join('')}
                
                `

                if (data.length < 3) markup += this.mas_campaigns_cta()

                break
            case 1:

                let run_search = this.state.active_sub_view == 'search' ? true : false
                let run_social = this.state.active_sub_view == 'social' ? true : false
      
                let social = run_social && data.social ? remove_duplicates(data.social.reverse(), 'campaign_id') : null
                let search = run_search && data.search ? remove_duplicates(data.search.reverse(), 'campaignid') : null
                
                let length;
                if (run_search) length = search.length
                else if (run_social) length = social.length

                markup = `
                    ${social ? social.map(_row=>{
                        return row(
                            _row.marketr_index,
                            _row.campaign_name,
                            'campaign name',
                            _row.cost
                        )
                    }).join("") : ''}
                    ${search ? search.map(_row=>{
                        return row(
                            _row.marketr_index,
                            _row.campaign_name,
                            'campaign name',
                            _row.cost
                        )
                    }).join("") : ''}
                `
                if (length < 3) {
                    markup += this.mas_campaigns_cta()
                }
                
                break
            case 2:
                /*html*/
                markup = `
                ${data.map(_row=>{
                    return meta(_row.marketr_index, _row.perc_change)
                }).join("")}
                `
                break
            case 3:
                let is_search;
                let is_social;

                if (data) {
                    is_search = data.creative.headline == undefined ? false : true;
                    is_social = data.creative.headline == undefined ? true : false;
                }
                markup = meta(data.marketr_index, data.perc_change, true) + `<div class='separator'></div>`

                if (is_search) {
                    if (data.creative.headline != '0 | 0') {
                        markup += google(
                            data.creative.headline,
                            JSON.parse(data.creative.url)[0],
                            data.creative.description
                        )
                    } else {
                        
                        markup += facebook('', data.creative.imageadurl, '')
                    }
                }

                else if (is_social) markup +=  `
                    <div class="center_it">${modal_trigger('view_creative', 'view creative')}</div>
                    ${modal('', facebook('', data.creative.thumbnail, data.creative.body), 'view_creative')}
                `

                break
        }
        return markup
    }

    date_range(){
        let options = [
            {'value': 365, 'title': 'Past year'},
            {'value': 180, 'title': 'Past 6 months'},
            {'value': 90, 'title': 'Past 90 days'},
            {'value': 60, 'title': 'Past 60 days'},
            {'value': 45, 'title': 'Past 45 days'},
            {'value': 30, 'title': 'Past 30 days'},
            {'value': 21, 'title': 'Past 21 days'},
            {'value': 14, 'title': 'Past 14 days'},
            {'value': 7, 'title': 'Past 7 days'},
            {'value': 3, 'title': 'Past 3 days'}
        ]
        return `
            ${title('Filter by', true)}
            <select class="form-control" id="date_range">
                <option value="10000000000000000" ${this.state.date_range == 10000000000000 ? 'selected' : ''}>Lifetime</option>
                <option value="365" ${this.state.date_range == 365 ? 'selected' : ''}>Past year</option>
                <option value="180" ${this.state.date_range == 180 ? 'selected' : ''}>Past 6 months</option>
                <option value="90" ${this.state.date_range == 90 ? 'selected' : ''}>Past 90 days</option>
                <option value="60" ${this.state.date_range == 60 ? 'selected' : ''}>Past 60 days</option>
                <option value="45" ${this.state.date_range == 45 ? 'selected' : ''}>Past 45 days</option>
                <option value="30" ${this.state.date_range == 30 ? 'selected' : ''}>Past 30 days</option>
                <option value="21" ${this.state.date_range == 21 ? 'selected' : ''}>Past 21 days</option>
                <option value="14" ${this.state.date_range == 14 ? 'selected' : ''}>Past 14 days</option>
                <option value="7" ${this.state.date_range == 7 ? 'selected' : ''}>Past 7 days</option>
                <option value="3" ${this.state.date_range == 3 ? 'selected' : ''}>Past 3 days</option>
            </select>
        `
    }

    comparison_markup(){
  
        let breakdown;
        try {
            breakdown = this.state.breakdown[0] == undefined ? this.state.breakdown : this.state.breakdown[0]
        } catch (error) {
            console.log(error)
            this.abort()
        }
        let {cost, cost_comp, pp100, pp100_comp, marketr_index, index_comp, cpl_comp, conversions} = breakdown
        let cpl = conversions > 0 ? cost / conversions : null
        
        const perc_variance = (_value, low_is_good=false) => {
            let value = !isNaN(_value) ? parseFloat(_value) : 'n/a'
            let green = '_green'
            let red = '_red'
            let color;
        
            if (value > 0) {
                if (low_is_good == true) color = red
                else if (low_is_good == false) color = green
            } else if (value < 0) {
                if (low_is_good == false) color = red
                else if (low_is_good == true) color = green
            } else if (value == 0) color = 'rgba(0,0,0,.3)'
            
            if (low_is_good == null) color = 'rgba(0,0,0,.3)'
            return color
        }

        const comparison_row = (_title, _value, perc) => {
            let {__title} = _title,
                {__value, _currency, score} = _value,
                {comp, low_is_good} = perc

            let display_value;
            if (_currency) display_value = value(currency(__value))
            else if (score) display_value = marketr_score(__value)
            else display_value = value(number_rounded(__value))


            /*html*/
            return `
            <div class="">
                <div class="row">
                    <div class="col-lg-6 col-md-6 col-sm-6 col-6">
                        <span>${__title}</span>
                    </div>
                    <div style="text-align:right;" class="col-lg-6 col-md-6 col-sm-6 col-6">
                        ${display_value}
                        <p style="font-size: 8pt;">
                            <span class="${perc_variance(comp, low_is_good)}">${comp > 1 ? "+" : ""}${number_rounded(comp)}%</span>
                            vs. campaign avg.
                        </p>
                    </div>
                </div>
            </div>
            `
        }

        // ${perc_change > 0 ? up : down }
        // <p class="center_it"><span class="${perc_change > 0 ? '_green' : '_red'}">${number_rounded(perc_change * 100)}%</span> in past 7 days</p>
        const el = /*html*/ `
            ${this.state.active_view == 3 ? `<p class="small_txt">Campaign: ${breakdown.campaign_name ? breakdown.campaign_name : ''}</p>` : ''}
            ${comparison_row(
                {__title: 'health score'},
                {__value: marketr_index ? marketr_index : 0, _currency: false, score: true},
                {comp: index_comp ? index_comp : 0, low_is_good: false}
            )}
            ${comparison_row(
                {__title: 'spend over<br>time period'},
                {__value: cost ? cost : 0, _currency: true, score: false},
                {comp: cost_comp ? cost_comp : 0, low_is_good: null}
            )}
            ${comparison_row(
                {__title: 'conversion cost'},
                {__value: cpl ? cpl : 0, _currency: true, score: false},
                {comp: cpl_comp ? cpl_comp : 0, low_is_good: true}
            )}
            ${comparison_row(
                {__title: 'profit potential per $100 spent'},
                {__value: pp100 ? pp100 : 0, _currency: true, score: false},
                {comp: pp100_comp ? pp100_comp : 0, low_is_good: false}
            )}
            `

        return el
    }

    profit_spread() {
        return `
        <div class="h--500 card card-body">
            ${title('profit potential per $100 spent')}
            <br>

            <div id="profit_chart_container">
                <canvas style="width: 100%; height: 100%;" id="profit_chart"></canvas>
            </div>

        </div>
        `
    }

    summary() {
        let company_index = this.state.data.aggregate.index
        let {marketr_index, action, cost} = this.state.active_data.profitability
        let meta_map = {
            0: '',
            1: 'platform',
            2: 'campaign',
            3: 'ad'
        }
        let {active_view} = this.state
        return  `
            <div class="card card-body">
                <div class="row row_cancel">
                    
                    <div style="display: ${active_view != 0 ? 'auto' : 'none'};" class="col-lg-6 col-md-6 col-sm-12">
                        ${title(`${meta_map[active_view]}<br>Health score`)}
                        ${value(number(marketr_index ? marketr_index : 0))}
                    </div>
        
                    <div class="col-lg-6 col-md-6 col-sm-12">
                        ${title('company<br>health score')}
                        ${value(number(company_index ? company_index : 0))}
                    </div>

                </div>
            </div>`
    }

    opps_classList(){
        let opps_classList;

        if (this.analytics) opps_classList = `col-lg-4 col-md-6 col-sm-12`
        if (this.state.opp_expanded) opps_classList = `h--750 col-lg-12 col-md-12 col-sm-12`
        else opps_classList = `col-lg-4 col-md-6 col-sm-12`

        return opps_classList
    }

    opps_title(){
        let closed = `<i class="far fa-caret-square-right"></i>`,
            open = `<i class="far fa-caret-square-down"></i>`,
            expanded = this.state.opp_expanded;

        /*html*/
        return `
        <h1 style="margin-bottom: 1em;" class="widget__title">
            Opportunities
            <button style="padding: 0;margin: 0 0 0 7px;" id="opp_expand" class="btn btn-neutral small_txt">
                Nerd view
                ${expanded ? open : closed}
            </button>
        </h1>
    `
    }

    opps_container(){
        let el = document.createElement('div')

        if (this.state.opp_expanded) this.shadow.querySelector("#opps_container").style.margin = "0 0 2em 0"
        /*html*/
        el.innerHTML = `
            <div class="h--500 mobile--h--700 card card-body" id="topic_opps">
                ${this.opps_title()}
                <div id="append__to"></div>
            </div>
        `

        let opp = this.Opportunities()
        opp.setAttribute('json', JSON.stringify(this.state.data.topics))
        el.querySelector('#append__to').appendChild(opp)

        el.querySelector("#opp_expand").addEventListener('click', e=>{
            this.state.opp_expanded = this.state.opp_expanded ? false : true
            let target = this.shadow.querySelector("#opps_container")
            target.classList.remove(...target.classList)
            target.classList.add(...this.opps_classList().split(" "))
            this.shadow.querySelector('#opps_container').innerHTML = ""
            this.shadow.querySelector('#opps_container').appendChild(this.opps_container())
        })

        return el
    }

    template(){
        let {action} = this.state.active_data.profitability
        let {active_view} = this.state


        let breakdown_title = {
            0: 'active platforms',
            1: 'active campaigns',
            2: 'campaign breakdown',
            3: 'ad creative'
        }

        let recommendation_map = {
            'middle of the pack': 'middle of the pack',
            'invest more': `You've found a winner! Figure out what's succeeding with this campaign and replicate it. Make use of the intel tab. If you need some inspiration, just reach out to your Market(r) guide in the chat!`,
            'kill it': `They can't all be winners, unfortunately. We recommend cutting bait on this one, analyzing to see what didn't work, and learning for next time.`
        }
        let class_list = `col`
        let column_set = ![0,1].includes(active_view) ? 'col-lg-6 col-md-6 col-sm-12' : 'col-lg-12 col-md-12 col-sm-12'
        /*html*/
        return `
        <div class="row row_cancel">
            <div class="col-lg-8 col-md-8 col-sm-12">
                <div class="row">
                    <div class="${column_set}">
                        <div style="overflow-y:auto;" class="h--500 mobile--h--cancel card card-body">
                            ${title(breakdown_title[active_view])}
                            ${this.breakdown_markup()}
                        </div>
                    </div>
                    ${
                        ![0,1].includes(active_view)
                            ? `
                            <div class="col-lg-6 col-md-6 col-sm-12">
                                <div style="overflow-y:auto;" class="h--500 mobile--h--600 card card-body">
                                    ${title(`Our recommendation: &nbsp;<span class="action">${action ? action : ""}</span>`)}
                                    ${this.comparison_markup()}
                                </div>
                            </div>`
                            : ''
                        }
                </div>
            </div>


            ${this.analytics ? `
            <div class="h--500 col-lg-4 col-md-6 col-sm-12">
                ${this.profit_spread()}
            </div>
            <div style="${this.state.opp_expanded ? 'margin-bottom: 2em;' : ""}" class="${this.opps_classList()}" id="opps_container"></div>
            
            ` : ''}

            ${this.analytics ? `` : `

            <div id="recommendations" class="col-lg-4 col-md-4 col-sm-12">
                <div class="h--500 card card-body">
                    <h1 class="widget__title">Recommendations</h1>
                </div>
            </div>`
            }
        </div>
        ${this.analytics
            ? ``
            : `
                <div class="row row_cancel">
                    <div style="${this.state.opp_expanded ? 'margin-bottom: 2em;' : ""}" class="${this.opps_classList()}" id="opps_container"></div>
                    <div class="h--500 col-lg-4 col-md-6 col-sm-12">
                        ${this.profit_spread()}
                    </div>
                    <div class="col-lg-4 col-md-6 col-sm-12">
                        <div class="d-none d-md-block d-lg-none divider"></div>
                        <div id="insights" class="card card-responsive card-body">
                            ${title('insights')}    
                        </div>
                    </div>
                </div>
                `
        }
        `
    }

    shell(){
        /*html*/
        return `
            <div style="padding-left: 0; padding-right: 0;" class="container-fluid">
                <div class="row row_cancel">
                    ${this.analytics ? ''
                    : `
                        <div class="col-lg-12 col-md-12 col-12">
                            <div style="padding: 1.25rem 1.25rem 0 1.25rem;" class="card card-body">
                                <div class="main-group__trend row row_cancel">
                                    <div class="col-lg-4 col-md-4 col-12"> 
                                    ${modal('What is the health score?', this.static_copy.score, 'health')}
                                        <div class="custom_modal center_it trend__group">
                                            ${modal_trigger(
                                                'health',
                                                `${title(
                                                    `${this.company_name}'<span style="text-transform:lowercase;">s</span> &nbsp;health score:
                                                    &nbsp;<i class="far fa-question-circle"></i>
                                                    <br>${marketr_score(
                                                        this.state.data.aggregate.index
                                                    )}`,
                                                true
                                            )}`)}
                                        </div>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-12">
                                        <div class="center_it trend__group">
                                            ${title(`Funds remaining: ${value(currency_rounded(this.funds_remaining ? this.funds_remaining : 0))}`, true)}
                                        </div>
                                    </div>
                                    <div class="col-lg-4 col-md-4 col-12">
                                        <div class="center_it trend__group">  
                                            ${title(`budget: ${value(`${currency_rounded(this.spend_rate ? this.spend_rate : 0)}/month`)}`, true)}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `
                    }
                    
                </div>
                <div class="row row_cancel">
      
                        <div class="col-lg-6 col-md-6 col-12">
                            ${this.view_by()}
                        </div>
                        <div class="col-lg-6 col-md-6 col-12">
                            <div class="card card-body mobile--h--225 h--300">
                                <div class="row row_cancel">
                                    ${
                                        this.state.active_view != 0
                                        /*html*/
                                        ? `
                                        <div class="col-lg-6 col-sm-6">
                                            ${title('filter by', true)}
                                            <select id="sub_target" class="form-control">
                                                ${this.sub_filters.map((filter, index)=>{
                                                    
                                                    return (
                                                        `<option value="${filter}" ${filter == this.state.active_sub_view  ? `selected` : '' }>
                                                            ${filter}
                                                        </option>
                                                        `
                                                    )
                                                }).join('')}
                                            </select>
                                        </div>`
                                        : `<select id="sub_target" style="display:none;" class="form-control"></select>`
                                    }
                                    <div class="${this.state.active_view != 0 ? "col-lg-6 col-sm-6" : "col-lg-9 col-sm-9"}">
                                        ${this.date_range()}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div style="padding-left: 0; padding-right: 0;" class="container-fluid" id="home-row">
            </div>
           
        `
    }

    recs(){
        const recs_ = new Recommendations()
        recs_.setAttribute('customer-id', this.customer_id)
        recs_.setAttribute('demo', this.demo)
        recs_.setAttribute('recs_json', this.recs_json)
        recs_.setAttribute('fetch', false)
        return recs_
    }


    insights(){
        const insights = new Insights()
        insights.setAttribute('customer_id', this.customer_id)
        insights.setAttribute('insights_json', this.insights_json)
        insights.setAttribute('fetch', false)
        return insights
    }


    Opportunities(){
        const ops = new Opportunities()
        ops.setAttribute('max-height', '383')
        ops.setAttribute('expanded', this.state.opp_expanded)
        return ops
    }

    error_markup(){
        const div = `
        <div class="row row_cancel">
            <div class="col-lg-12 col-md-12 col-sm-12">
                <div class="center_it card card-body">
                    <p style="margin: auto;">Looks like your data hasn't finished syncing yet. This usually takes 24-72 hours, depending on how much there is. Check back later to see your marketing health!</p>
                </div>
            </div>
        </div>
        <div class="row row_cancel">
            <div id="recommendations" class="col-lg-6 col-md-6 col-sm-12">
                <div class="h--500 card card-body">
                    ${title('Recommendations')}  
                </div>
            </div>

            <div class="col-lg-6 col-md-6 col-sm-12">
                <div id="insights" class="card card-responsive card-body">
                    ${title('insights')}    
                </div>
            </div>
        </div>
        `
        return div
    }

    view_by(){
        let btn_length = `col-lg-3 col-md-3 col-sm-3`
        let {active_view} = this.state
        let active_classlist = `btn-secondary`
        let inactive_classlist = `btn-outline btn-outline-secondary`
        /*html*/
        return `
        <div class="h--300 mobile--h--225 card card-body">
            <div class="row row_cancel">
                <div id="select_container" class="col-lg-12">
                    ${title('view by', true)}
                    <div id="view_selector" class="h--300 row row_cancel">
                        <div class="${btn_length}">
                            <button value="0" class="btn ${active_view == 0 ? active_classlist : inactive_classlist}">
                            portfolio
                            </button>
                        </div>
                        <div class="${btn_length}">
                            <button value="1" class="btn ${active_view == 1 ? active_classlist : inactive_classlist}">
                            platforms
                            </button>
                        </div>
                        <div class="${btn_length}">
                            <button value="2" class="btn ${active_view == 2 ? active_classlist : inactive_classlist}">
                            campaigns
                            </button>
                        </div>
                        <div class="${btn_length}">
                            <button value="3" class="btn ${active_view == 3 ? active_classlist : inactive_classlist}">
                            ads
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        `
    }

    render(init=true){
        this.shadow.innerHTML = ""

        const recs = this.recs()
        const insights = this.insights()
        const opps = this.Opportunities()

        const append_other = el => {
            if (!this.analytics) {
                el.querySelector("#recommendations div").appendChild(recs)
                el.querySelector('#insights').appendChild(insights)
            }
        }

        const compile = async () => {
            let el;
            const markup = `
                ${this.css}
                ${this.shell()}
            `
            el = document.createElement('div')
            el.innerHTML = markup

            if (this.state.active_view > 0 && !this.sub_edited) this.state.active_sub_view = this.sub_filters[0]
            this.data_controller()

            return el
        } 

        const run = () => {
            compile()
                .then(el=>{
                    el.querySelector('#home-row').innerHTML += this.template()
                    return el
                })
                .then(el=>{
                    this.reset_charts(el)
                    el.querySelector('#opps_container').appendChild(this.opps_container())

                    append_other(el)
                    return modal_handlers(el)
                })
                .then( el => this.shadow.appendChild(this.view_controller(el)) )
        }


        if (init == true) {
            document.querySelector('#performance_loader').style.display = 'block'
            fetch('/api/index/detailed', {
                method: 'POST',
                headers : new Headers({
                    "content-type": "application/json"
                }),
                body:  JSON.stringify({
                    customer_id: this.customer_id,
                    company_name: this.customer_id == 200 ? "o3" : this.company_name,
                    ltv: this.ltv,
                    date_range: this.state.date_range,
                    facebook: this.facebook_id,
                    google: this.google_id
                })
            })
            .then(res => res.json())
            .then(res => {
                document.querySelector('#performance_loader').style.display = 'none'
                this.state.data = res.index
                this.state.data.topics = res.topics
                opps.setAttribute('json', JSON.stringify(res.topics))
                run()
            })
            .catch(e=>{
                console.log(e)
                document.querySelector('#performance_loader').style.display = 'none'
                this.shadow.innerHTML = `
                    ${this.css}
                    ${this.error_markup()}
                `
                append_other(this.shadow)
            })
        } else run()
    }

    connectedCallback() {
        this.customer_id = this.getAttribute('customer-id')
        this.facebook_id = this.getAttribute('facebook_id') ? true : false
        this.google_id = this.getAttribute('google_id') ? true : false
        this.company_name = this.getAttribute('company-name')
        this.spend_rate = this.getAttribute('spend_rate') != null ? parseFloat(this.getAttribute('spend_rate')) : 0
        this.funds_remaining = this.getAttribute('funds_remaining') != null ? parseFloat(this.getAttribute('funds_remaining')) : 0
        this.insights_json = this.getAttribute('insights')
        this.recs_json = this.getAttribute('recommendations')
        this.ltv = this.getAttribute('ltv')
        this.demo = this.getAttribute('demo')
        this.analytics = this.getAttribute('analytics') ? true : false


        this.render()

    }
}
  
document.addEventListener( 'DOMContentLoaded', customElements.define('portfolio-performance', PortfolioPerformance))


const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
        #trendline {
            width: 100% !important;
            margin: 0 auto;
        }
 
    </style>
    `.trim()
}

export default class PortfolioTrendline extends HTMLElement {
    static get observedAttributes() {
        return ['customer-id', 'start_date'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null
        }

        this.css = styles()
    }

    init_chart(target){
        target.innerHTML = ""
        let labels = this.state.data ? this.state.data.map(i => i.date) : [0]
        let dataset = this.state.data ? this.state.data.map(i => i.index) : [0]
    
        const data = {
            labels,
            datasets: [
                {
                    label: "Market(r) Index",
                    fill: false,
                    borderColor: "#62cde0",
                    backgroundColor: "rgba(98, 205, 224, 0.8)",
                    borderWidth: 2,
                    pointRadius: 7,
                    pointBackgroundColor: "rgb(154, 238, 252)",
                    pointBorderColor: "rgba(98, 205, 224, 0.9)",
                    data: dataset,
                    pointHoverBorderWidth: 2,
                    pointHoverRadius: 7,
                    drawBorder: true
                }
            ]
        };
        const ctx = target.getContext("2d");
        const options = {
            plugins: {
                datalabels:{
                    display: false
                }
            },
            elements: {
                line: {
                    tension: 0
                }
            },
            responsive: true,
            scales: {
                xAxes: [{
                    gridLines: {
                        display:false
                    }
                }],
                yAxes: [{
                    gridLines: {
                        display:false
                    }   
                }]
            }
        };
        new Chart(ctx, {
            type: 'line',
            data: data,
            options: options
        });
    }

    render(){
        this.shadow.innerHTML = ""

        fetch('/api/index/trendline', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body:  JSON.stringify({
                company_name: this.customer_id == 200 ? "o3" : this.company_name,
                customer_id: this.customer_id
            })
        })
            .then((res) => res.json())
            .then(data => this.state.data = data)
            .then(()=>{
                const el = document.createElement('div')
                /*html*/
                el.innerHTML = `
                    ${this.css}
                    ${!this.state.data
                        ? `<p class="small_txt">When your campaigns become active, you will begin to see a trendline of your Market(r) Index-- your marketing portfolio health score.</p>
                        <p class="small_txt">If you have any questions, head over to the chat tab and your Market(r) guide will reponse within an hour!</p>
                        <p class="small_txt">~ Tristan Tarpley, Founder of Market(r)</p>`
                        : ''
                    }
                    <div class="row">
                        <div class="col" id="chart_container">
                            <canvas id="trendline"></canvas>
                        </div>
                    </div>
                `
                return el
            })
            .then(el => {
                setTimeout(()=>{
                    this.init_chart(el.querySelector("#trendline"))
                }, 800)

                return el
            })
            .then(el => {
                this.shadow.appendChild(el)
            })
            .catch((err)=>console.log(err))
    }

    connectedCallback() {
        this.customer_id = this.getAttribute('customer_id')
        this.company_name = this.getAttribute('company_name')
        this.render()

    }
}
  
document.addEventListener( 'DOMContentLoaded', customElements.define('portfolio-trendline', PortfolioTrendline))
const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
  
  
    </style>
    `.trim()
  }
  
  export default class Active extends HTMLElement {
    static get observedAttributes() {
        return ['customer_id'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null
        }
  
        this.css = styles()
    }
  
    render(init=true){
        this.shadow.innerHTML = ""
        const el = document.createElement('div')
        el.innerHTML = `
          ${this.css}
          <p>Campaign history</p>
          <table class="table table-striped table-responsive">
            <thead>
                <th>Campaign Type</th>
                <th>% of marketing investment</th>
                <th>Market(r) Index</th>
            </thead>
            <tbody>
                ${this.data.campaign.social.map(it=>{
                    return `
                    <tr>
                        <td>Social Media PPC</td>
                        <td>${it.cost / this.data.total_spent}</td>
                        <td>${it.index}</td>
                    </tr>
                    `
                }).join("")}

                ${this.data.campaign.search.map(it=>{
                    return 'hi'
                }).join("")}
                
            </tbody>
          </table>
      `
        this.shadow.appendChild(el)
    }
  
    connectedCallback() {
        this.customer_id = this.getAttribute('customer_id')
        this.data = JSON.parse(this.getAttribute('data'))
        this.render()
    }
  }
  
  document.addEventListener( 'DOMContentLoaded', customElements.define('portfolio-active', Active))
const styles = () => {
    /*html*/
    return `
    <style>
        @import url('/static/assets/css/bootstrap.min.css');
        @import url('/static/assets/css/styles.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
  
        label.small_txt {
            font-size: 80%;
        }

    </style>
    `.trim()
  }
  
  export default class Funnel extends HTMLElement {
    static get observedAttributes() {
        return ['customer_id'];
    }
    constructor() {
        super();
        this.shadow = this.attachShadow({ mode: 'open' });
        this.state = {
            data: null
        }
  
        this.css = styles()
    }

    summary(){
        const handle = (key, value) => {
            const data = this.state.data
            let returned;
            if (data == null){
                returned = "..."
            } else {
                let _value = data[key][value]
                switch (value) {
                    case 'engagement':
                        returned = percent(_value)
                        break
                    case 'impressions':
                        returned = number_no_commas(_value)
                        break
                    case 'ctr':
                        returned = percent(_value)
                        break
                    case 'cpc':
                        returned = currency(_value)
                        break
                    case 'cta':
                        returned = number_no_commas(_value)
                        break
                    case 'site_visits':
                        returned = number_no_commas(_value)
                        break
                    case 'end':
                    case 'start': 
                        returned = _value
                        break
                    case 'cost':
                        returned = currency(data.cost)
                        break
                    
                }
            }
            return `<span class="metric_display">${returned}</span>`
        }

        const column_packets = [
            {
                'category': 'Awareness',
                'columns': [
                    {
                        'metric': handle('awareness', 'engagement'),
                        'label': 'Engagement'
                    },
                    {
                        'metric': handle('awareness', 'impressions'),
                        'label': 'Impressions'
                    },
                ]
            },
            {
                'category': 'Evaluation',
                'columns': [
                    {
                        'metric': handle('evaluation', 'ctr'),
                        'label': 'Click-through rate'
                    },
                    {
                        'metric': handle('evaluation', 'cpc'),
                        'label': 'Cost per click'
                    },
                ]
            },
            {
                'category': 'Conversion',
                'columns': [
                    {
                        'metric': handle('conversion', 'cta'),
                        'label': 'Conversions'
                    },
                    {
                        'metric': handle('conversion', 'site_visits'),
                        'label': 'Site visits'
                    },
                ]
            }
        ]

        const el = `
        <div class="row">
            <div class="col-12">
                ${column_packets.map(packet=>{
            
                    return `
                    <div class="separator"></div>
                    <h5 class="small_txt">${packet.category}</h5>
                    <div class="row">
                        ${packet.columns.map((column, index)=>{
                
                            return `                                  
                                <div class="col-lg-6">
                                    <span class="small_txt">${column.label}</span>
                                    <h5 class="blue_label">${column.metric}</h5>
                                </div>
                            `
                        }).join("")}
                    </div>
                    `
                }).join("")}
            </div>
        </div>
        `.trim()

        return el
    }
  
    render(init=true){
        this.shadow.innerHTML = ""
        const el = document.createElement('div')
        fetch('/api/portfolio_metrics', {
            method: 'POST',
            headers : new Headers({
                "content-type": "application/json"
            }),
            body:  JSON.stringify({
                customer_id: this.customer_id,
                company_name: this.customer_id == 200 ? "o3" : this.company_name
            })
        })
            .then((res) => res.json())
            .then(res=>this.state.data = res)
            .then(()=>{ 
                el.innerHTML = `
                ${this.css}
                ${this.summary()}
            `
            })
        this.shadow.appendChild(el)
    }
  
    connectedCallback() {
        this.customer_id = this.getAttribute('customer_id')
        this.company_name = this.getAttribute('company_Name')
        this.render()
    }
  }
  
  document.addEventListener( 'DOMContentLoaded', customElements.define('portfolio-funnel', Funnel))