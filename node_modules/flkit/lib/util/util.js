'use strict';

exports.__esModule = true;
exports.isWhiteSpace = undefined;
exports.toHash = toHash;
exports.makePredicate = makePredicate;
exports.hasSpaceBetweenTokens = hasSpaceBetweenTokens;

var _config = require('./config.js');

/**
 * string to object
 * @param  {String | Array} str []
 * @return {Object}     []
 */
function toHash(str) {
  if (typeof str === 'string') {
    str = str.split('');
  }
  var ret = {};
  var length = str.length;
  for (var i = 0; i < length; i++) {
    ret[str[i]] = 1;
  }
  return ret;
}
/**
 * make compare function
 * @param  {String} string []
 * @return {Function}        []
 */
function makePredicate(string) {
  var code = 'switch(code){\n';
  string.split('').forEach(function (chr) {
    code += '  case 0x' + chr.charCodeAt(0).toString(16) + ':\n';
  });
  code += '    return true;\n}\nreturn false';
  return new Function('code', code);
}
/**
 * is whitespace char
 */
var isWhiteSpace = exports.isWhiteSpace = makePredicate(_config.whitespace);

/**
 * check has space between tokens
 */
function hasSpaceBetweenTokens(preToken, token) {
  if (!preToken) {
    return token.start > 0;
  }
  if (token.commentBefore.length) {
    var tokens = [].concat(token.commentBefore, [token]);
    return tokens.some(function (item) {
      var delta = item.start - preToken.end;
      preToken = item;
      return delta > 0;
    });
  } else {
    return token.start - preToken.end > 0;
  }
}
//# sourceMappingURL=util.js.map