{"version":3,"sources":["../../src/util/util_ext.js"],"names":["createToken","createRawToken","baseTokenizeInstance","type","value","referToken","token","getToken","start","end","length","types","style","HTML_TAG_STYLE","script","HTML_TAG_SCRIPT","tags","tokens","Array","isArray","tagName","startToken","ext","attrs","tag","tagLowerCase","contentToken","HTML_RAW_TEXT","endToken","HTML_TAG_END","content"],"mappings":";;;;;;QAOgBA,W,GAAAA,W;QAkBAC,c,GAAAA,c;;AAzBhB;;;;AACA;;;;;;AAEA,IAAMC,uBAAuB,uBAAiB,EAAjB,CAA7B;AACA;;;AAGO,SAASF,WAAT,CAAqBG,IAArB,EAA2BC,KAA3B,EAAkCC,UAAlC,EAA8C;AACnD,MAAMC,QAAQJ,qBAAqBK,QAArB,CAA8BJ,IAA9B,EAAoCC,KAApC,CAAd;AACAE,QAAME,KAAN,GAAcH,aAAaA,WAAWG,KAAxB,GAAgC,CAA9C;AACAF,QAAMG,GAAN,GAAYH,MAAME,KAAN,GAAcJ,MAAMM,MAAhC;AACA,SAAOJ,KAAP;AACD;;AAED;;;AAGA,IAAMK,QAAQ;AACZC,SAAO,qBAAUC,cADL;AAEZC,UAAQ,qBAAUC;AAFN,CAAd;AAIA,IAAMC,0BACH,qBAAUH,cADP,IACwB,OADxB,QAEH,qBAAUE,eAFP,IAEyB,QAFzB,QAAN;AAIO,SAASd,cAAT,CAAwBE,IAAxB,EAA8BC,KAA9B,EAAqCC,UAArC,EAAiD;AACtDF,SAAOQ,MAAMR,IAAN,KAAeA,IAAtB;AACA,MAAIc,eAAJ;AACA,MAAIC,MAAMC,OAAN,CAAcf,KAAd,CAAJ,EAA0B;AACxBa,aAASb,KAAT;AACAA,YAAQ,EAAR;AACD;AACD,MAAME,QAAQN,YAAYG,IAAZ,EAAkBC,KAAlB,EAAyBC,UAAzB,CAAd;AACA,MAAMe,UAAUJ,KAAKb,IAAL,CAAhB;AACA,MAAMkB,aAAarB,YAAY,qBAAUa,cAAtB,QAA0CO,OAA1C,SAAqDhB,KAArD,UAA+DgB,OAA/D,QAA2Ef,UAA3E,CAAnB;AACAgB,aAAWC,GAAX,GAAiB;AACfC,WAAO,EADQ;AAEfC,SAAKJ,OAFU;AAGfK,kBAAcL;AAHC,GAAjB;AAKA,MAAMM,eAAe1B,YAAY,qBAAU2B,aAAtB,EAAqCvB,KAArC,EAA4CiB,UAA5C,CAArB;AACAK,eAAaJ,GAAb,GAAmB;AACjBL;AADiB,GAAnB;AAGA,MAAMW,WAAW5B,YAAY,qBAAU6B,YAAtB,SAAyCT,OAAzC,QAAqDM,YAArD,CAAjB;AACAE,WAASN,GAAT,GAAe;AACbE,SAAKJ,OADQ;AAEbK,kBAAcL;AAFD,GAAf;AAIAd,QAAMgB,GAAN,GAAY;AACVd,WAAOa,UADG;AAEVS,aAASJ,YAFC;AAGVjB,SAAKmB;AAHK,GAAZ;AAKA,SAAOtB,KAAP;AACD","file":"util_ext.js","sourcesContent":["import BaseTokenize from './tokenize.js';\nimport TokenType from './token_type.js';\n\nconst baseTokenizeInstance = new BaseTokenize('');\n/**\n * create token\n */\nexport function createToken(type, value, referToken) {\n  const token = baseTokenizeInstance.getToken(type, value);\n  token.start = referToken ? referToken.start : 0;\n  token.end = token.start + value.length;\n  return token;\n}\n\n/**\n * create raw token, such as: style or script\n */\nconst types = {\n  style: TokenType.HTML_TAG_STYLE,\n  script: TokenType.HTML_TAG_SCRIPT\n};\nconst tags = {\n  [TokenType.HTML_TAG_STYLE]: 'style',\n  [TokenType.HTML_TAG_SCRIPT]: 'script'\n};\nexport function createRawToken(type, value, referToken) {\n  type = types[type] || type;\n  let tokens;\n  if (Array.isArray(value)) {\n    tokens = value;\n    value = '';\n  }\n  const token = createToken(type, value, referToken);\n  const tagName = tags[type];\n  const startToken = createToken(TokenType.HTML_TAG_STYLE, `<${tagName}>${value}</${tagName}>`, referToken);\n  startToken.ext = {\n    attrs: [],\n    tag: tagName,\n    tagLowerCase: tagName\n  };\n  const contentToken = createToken(TokenType.HTML_RAW_TEXT, value, startToken);\n  contentToken.ext = {\n    tokens\n  };\n  const endToken = createToken(TokenType.HTML_TAG_END, `</${tagName}>`, contentToken);\n  endToken.ext = {\n    tag: tagName,\n    tagLowerCase: tagName\n  };\n  token.ext = {\n    start: startToken,\n    content: contentToken,\n    end: endToken\n  };\n  return token;\n}\n"]}