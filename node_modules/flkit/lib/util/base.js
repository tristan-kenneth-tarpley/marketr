'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _util = require('util');

var _util2 = _interopRequireDefault(_util);

var _message = require('./message.js');

var _message2 = _interopRequireDefault(_message);

var _base = require('../template/base.js');

var _base2 = _interopRequireDefault(_base);

var _php = require('../template/php.js');

var _php2 = _interopRequireDefault(_php);

var _smarty = require('../template/smarty.js');

var _smarty2 = _interopRequireDefault(_smarty);

var _error = require('./error.js');

var _error2 = _interopRequireDefault(_error);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isArray = Array.isArray;

var templates = {
  php: _php2.default,
  smarty: _smarty2.default
};

var Base = function () {
  /**
   * constructor
   * @param  {String} text    []
   * @param  {Object} options []
   * @return {}         []
   */
  function Base() {
    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      tpl: '',
      ld: [],
      rd: []
    };
    (0, _classCallCheck3.default)(this, Base);

    this.text = this.clean(text);
    this._text = this.text.toLowerCase(); // text lowercase
    this.length = this.text.length;
    this.options = options;

    this.initTpl();
    this._hasTpl = this.hasTpl();
  }
  /**
   * remove unnecessary chars in text
   * @param  {String} text [source text]
   * @return {String}      [cleaned text]
   */


  Base.prototype.clean = function clean(text) {
    // \uFEFF is BOM char
    return text.replace(/\r\n?|[\n\u2028\u2029]/g, '\n').replace(/\uFEFF/g, '');
  };
  /**
   * init tpl
   * @return {} []
   */


  Base.prototype.initTpl = function initTpl() {
    this.tpl = (this.options.tpl || '').toLowerCase();
    if (!this.tpl || !this.options.ld) {
      this.ld = [];
      this.rd = [];
      return;
    }
    var ld = this.options.ld;
    var rd = this.options.rd;
    if (!isArray(ld)) {
      ld = [ld];
      rd = [rd];
    }
    ld = ld.filter(function (item) {
      return item;
    });
    rd = rd.filter(function (item) {
      return item;
    });
    if (ld.length !== rd.length) {
      throw new Error(_message2.default.DelimiterNotEqual);
    }
    this.ld = ld;
    this.rd = rd;
  };
  /**
   * check text has tpl
   * @return {Boolean}      []
   */


  Base.prototype.hasTpl = function hasTpl(text) {
    if (!this.tpl || !this.ld.length) {
      return false;
    }
    var tplInstance = this.getTplInstance();
    for (var i = 0, length = this.ld.length, ld, rd; i < length; i++) {
      ld = this.ld[i];
      rd = this.rd[i];
      if (tplInstance.hasTpl(text || this.text, ld, rd)) {
        return true;
      }
    }
    return false;
  };
  /**
   * throw error
   * @param  {[type]} message:    string        [description]
   * @param  {[type]} line?:      number        [description]
   * @param  {[type]} col?:number [description]
   * @param  {[type]} data?:any   [description]
   * @return {[type]}             [description]
   */


  Base.prototype.error = function error(message, line, col, data) {
    if (isArray(line)) {
      data = line;
      line = undefined;
    }
    if (line === undefined && this.line !== undefined) {
      line = this.line;
      col = this.col;
    }
    if (isArray(data)) {
      message = _util2.default.format.call(null, data.unshift(message));
    }
    throw new _error2.default(message, line, col);
  };
  /**
   * get template instance
   * @return {}       []
   */


  Base.prototype.getTplInstance = function getTplInstance() {
    var cls = _base2.default;
    if (this.tpl && templates[this.tpl]) {
      cls = templates[this.tpl];
    }
    return new cls();
  };
  /**
   * register template
   * @type {}
   */


  Base.prototype.registerTpl = function registerTpl(type, tplClass) {
    templates[type] = tplClass;
  };
  /**
   * run
   * @return {[type]} []
   */


  Base.prototype.run = function run() {};

  return Base;
}();

exports.default = Base;
//# sourceMappingURL=base.js.map