{"version":3,"sources":["../../src/util/util.js"],"names":["toHash","makePredicate","hasSpaceBetweenTokens","str","split","ret","length","i","string","code","forEach","chr","charCodeAt","toString","Function","isWhiteSpace","preToken","token","start","commentBefore","tokens","some","delta","item","end"],"mappings":";;;;QAQgBA,M,GAAAA,M;QAgBAC,a,GAAAA,a;QAgBAC,qB,GAAAA,qB;;AAvChB;;AAEA;;;;;AAKO,SAASF,MAAT,CAAgBG,GAAhB,EAAqB;AAC1B,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,UAAMA,IAAIC,KAAJ,CAAU,EAAV,CAAN;AACD;AACD,MAAMC,MAAM,EAAZ;AACA,MAAMC,SAASH,IAAIG,MAAnB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAID,MAApB,EAA4BC,GAA5B,EAAiC;AAC/BF,QAAIF,IAAII,CAAJ,CAAJ,IAAc,CAAd;AACD;AACD,SAAOF,GAAP;AACD;AACD;;;;;AAKO,SAASJ,aAAT,CAAuBO,MAAvB,EAA+B;AACpC,MAAIC,OAAO,iBAAX;AACAD,SAAOJ,KAAP,CAAa,EAAb,EAAiBM,OAAjB,CAAyB,UAASC,GAAT,EAAc;AACrCF,YAAQ,cAAcE,IAAIC,UAAJ,CAAe,CAAf,EAAkBC,QAAlB,CAA2B,EAA3B,CAAd,GAA+C,KAAvD;AACD,GAFD;AAGAJ,UAAQ,mCAAR;AACA,SAAO,IAAIK,QAAJ,CAAa,MAAb,EAAqBL,IAArB,CAAP;AACD;AACD;;;AAGO,IAAMM,sCAAed,iCAArB;;AAEP;;;AAGO,SAASC,qBAAT,CAA+Bc,QAA/B,EAAyCC,KAAzC,EAAgD;AACrD,MAAI,CAACD,QAAL,EAAe;AACb,WAAOC,MAAMC,KAAN,GAAc,CAArB;AACD;AACD,MAAID,MAAME,aAAN,CAAoBb,MAAxB,EAAgC;AAC9B,QAAMc,mBAAaH,MAAME,aAAnB,GAAkCF,KAAlC,EAAN;AACA,WAAOG,OAAOC,IAAP,CAAY,gBAAQ;AACzB,UAAMC,QAAQC,KAAKL,KAAL,GAAaF,SAASQ,GAApC;AACAR,iBAAWO,IAAX;AACA,aAAOD,QAAQ,CAAf;AACD,KAJM,CAAP;AAKD,GAPD,MAOO;AACL,WAAOL,MAAMC,KAAN,GAAcF,SAASQ,GAAvB,GAA6B,CAApC;AACD;AACF","file":"util.js","sourcesContent":["\nimport {whitespace} from './config.js';\n\n/**\n * string to object\n * @param  {String | Array} str []\n * @return {Object}     []\n */\nexport function toHash(str) {\n  if (typeof str === 'string') {\n    str = str.split('');\n  }\n  const ret = {};\n  const length = str.length;\n  for (let i = 0; i < length; i++) {\n    ret[str[i]] = 1;\n  }\n  return ret;\n}\n/**\n * make compare function\n * @param  {String} string []\n * @return {Function}        []\n */\nexport function makePredicate(string) {\n  let code = 'switch(code){\\n';\n  string.split('').forEach(function(chr) {\n    code += '  case 0x' + chr.charCodeAt(0).toString(16) + ':\\n';\n  });\n  code += '    return true;\\n}\\nreturn false';\n  return new Function('code', code);\n}\n/**\n * is whitespace char\n */\nexport const isWhiteSpace = makePredicate(whitespace);\n\n/**\n * check has space between tokens\n */\nexport function hasSpaceBetweenTokens(preToken, token) {\n  if (!preToken) {\n    return token.start > 0;\n  }\n  if (token.commentBefore.length) {\n    const tokens = [...token.commentBefore, token];\n    return tokens.some(item => {\n      const delta = item.start - preToken.end;\n      preToken = item;\n      return delta > 0;\n    });\n  } else {\n    return token.start - preToken.end > 0;\n  }\n}\n"]}