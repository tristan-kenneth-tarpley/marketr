{"version":3,"sources":["../../src/util/base.js"],"names":["isArray","Array","templates","php","smarty","Base","text","options","tpl","ld","rd","clean","_text","toLowerCase","length","initTpl","_hasTpl","hasTpl","replace","filter","item","Error","DelimiterNotEqual","tplInstance","getTplInstance","i","error","message","line","col","data","undefined","format","call","unshift","cls","registerTpl","type","tplClass","run"],"mappings":"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","file":"base.js","sourcesContent":["\nimport util from 'util';\n\nimport Message from './message.js';\nimport BaseTemplate from '../template/base.js';\nimport PHPTemplate from '../template/php.js';\nimport SmartyTemplate from '../template/smarty.js';\nimport Err from './error.js';\n\nconst isArray = Array.isArray;\n\nconst templates = {\n  php: PHPTemplate,\n  smarty: SmartyTemplate\n};\n\nexport default class Base {\n  /**\n   * constructor\n   * @param  {String} text    []\n   * @param  {Object} options []\n   * @return {}         []\n   */\n  constructor(text = '', options = {\n    tpl: '',\n    ld: [],\n    rd: []\n  }) {\n    this.text = this.clean(text);\n    this._text = this.text.toLowerCase(); // text lowercase\n    this.length = this.text.length;\n    this.options = options;\n\n    this.initTpl();\n    this._hasTpl = this.hasTpl();\n  }\n  /**\n   * remove unnecessary chars in text\n   * @param  {String} text [source text]\n   * @return {String}      [cleaned text]\n   */\n  clean(text) {\n    // \\uFEFF is BOM char\n    return text.replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, '\\n').replace(/\\uFEFF/g, '');\n  }\n  /**\n   * init tpl\n   * @return {} []\n   */\n  initTpl() {\n    this.tpl = (this.options.tpl || '').toLowerCase();\n    if (!this.tpl || !this.options.ld) {\n      this.ld = [];\n      this.rd = [];\n      return;\n    }\n    let ld = this.options.ld;\n    let rd = this.options.rd;\n    if (!isArray(ld)) {\n      ld = [ld];\n      rd = [rd];\n    }\n    ld = ld.filter(item => item);\n    rd = rd.filter(item => item);\n    if (ld.length !== rd.length) {\n      throw new Error(Message.DelimiterNotEqual);\n    }\n    this.ld = ld;\n    this.rd = rd;\n  }\n  /**\n   * check text has tpl\n   * @return {Boolean}      []\n   */\n  hasTpl(text) {\n    if (!this.tpl || !this.ld.length) {\n      return false;\n    }\n    const tplInstance = this.getTplInstance();\n    for (var i = 0, length = this.ld.length, ld, rd; i < length; i++) {\n      ld = this.ld[i];\n      rd = this.rd[i];\n      if (tplInstance.hasTpl(text || this.text, ld, rd)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * throw error\n   * @param  {[type]} message:    string        [description]\n   * @param  {[type]} line?:      number        [description]\n   * @param  {[type]} col?:number [description]\n   * @param  {[type]} data?:any   [description]\n   * @return {[type]}             [description]\n   */\n  error(message, line, col, data) {\n    if (isArray(line)) {\n      data = line;\n      line = undefined;\n    }\n    if (line === undefined && this.line !== undefined) {\n      line = this.line;\n      col = this.col;\n    }\n    if (isArray(data)) {\n      message = util.format.call(null, data.unshift(message));\n    }\n    throw new Err(message, line, col);\n  }\n  /**\n   * get template instance\n   * @return {}       []\n   */\n  getTplInstance() {\n    let cls = BaseTemplate;\n    if (this.tpl && templates[this.tpl]) {\n      cls = templates[this.tpl];\n    }\n    return new cls();\n  }\n  /**\n   * register template\n   * @type {}\n   */\n  registerTpl(type, tplClass) {\n    templates[type] = tplClass;\n  }\n  /**\n   * run\n   * @return {[type]} []\n   */\n  run() {\n\n  }\n}\n"]}