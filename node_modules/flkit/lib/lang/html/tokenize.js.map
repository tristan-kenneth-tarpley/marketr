{"version":3,"sources":["../../../src/lang/html/tokenize.js"],"names":["specialTokensLength","length","reservedCommentLength","rawTokensLength","isArray","Array","HtmlTokenize","getNextToken","token","code","_text","charCodeAt","pos","nextCode","getSpecialToken","getRawToken","getTagToken","getTextToken","ret","isTplNext","next2Code","next","getToken","HTML_TEXT","value","record","type","tagEnd","quote","chr","text","HTML_TAG_END","error","lookAt","XML_START","HTML_TAG_START","tagName","getTagName","tagAttrs","getTagAttrs","str","tag","tagLowerCase","toLowerCase","attrs","slash","getQuote","checkNext","rollback","find","tpl","getTplToken","HTML_RAW_TEXT","slice","trim","hasEqual","spaceBefore","tplInstance","getTplInstance","attrName","attrValue","tplToken","voidElement","commentBefore","hasOutput","push","name","isWhiteSpace","message","TagUnClosed","i","item","ld","undefined","hasTpl","nameLowerCase","skipComment","commentLabel","comment","getCommentToken","startToken","contentToken","endToken","HTML_TAG_SCRIPT","options","jsTplTypes","HTML_TAG_STYLE","forward","ext","start","content","end","npos","findItem","j","substr","getMatched"],"mappings":"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","file":"tokenize.js","sourcesContent":["import Base from '../../util/tokenize.js';\nimport TokenType from '../../util/token_type.js';\nimport Message from '../../util/message.js';\nimport {\n  specialTokens,\n  reservedCommentPrefix,\n  rawTokens\n} from './config.js';\nimport {\n  isTagFirstChar,\n  isTagNameChar,\n  parseScriptAttrs,\n  parseStyleAttrs\n} from './util.js';\n\nconst specialTokensLength = specialTokens.length;\nconst reservedCommentLength = reservedCommentPrefix.length;\nconst rawTokensLength = rawTokens.length;\nconst isArray = Array.isArray;\n\n/**\n * html tokenize\n */\nexport default class HtmlTokenize extends Base {\n  /**\n   * get next token\n   * @return {Object} [token]\n   */\n  getNextToken() {\n    let token = super.getNextToken();\n    if (token || token === false) {\n      return token;\n    }\n    const code = this._text.charCodeAt(this.pos);\n    // <\n    if (code === 0x3c) {\n      const nextCode = this._text.charCodeAt(this.pos + 1);\n      // all special token start with <!\n      token = nextCode === 0x21 ? this.getSpecialToken() : this.getRawToken();\n      if (token) {\n        return token;\n      }\n      if (isTagFirstChar(nextCode)) {\n        return this.getTagToken();\n      }\n    }\n    return this.getTextToken();\n  }\n  /**\n   * get text token\n   * @return {Object} []\n   */\n  getTextToken() {\n    let ret = '';\n    while (this.pos < this.length) {\n      if (this.isTplNext()) {\n        break;\n      }\n      const nextCode = this._text.charCodeAt(this.pos);\n      const next2Code = this._text.charCodeAt(this.pos + 1);\n      // if next char is < and next2 char is tag first char\n      if (nextCode === 0x3c && (next2Code === 0x21 || isTagFirstChar(next2Code))) {\n        break;\n      }\n      ret += this.next();\n    }\n    const token = this.getToken(TokenType.HTML_TEXT, ret);\n    token.value = ret;\n    return token;\n  }\n  /**\n   * get tag token\n   * @return {Object} []\n   */\n  getTagToken() {\n    this.record();\n    let ret = this.next();\n    let type, tagEnd = false, quote;\n    while (this.pos < this.length) {\n      const chr = this.text[this.pos];\n      const code = this._text.charCodeAt(this.pos);\n      if (!type) {\n        switch (code) {\n          case 0x2f: // /\n            const nextCode = this._text.charCodeAt(this.pos + 1);\n            // if next char is not  >= 'a' && <= 'z', throw error\n            if (nextCode >= 0x61 && nextCode <= 0x7a) {\n              type = TokenType.HTML_TAG_END;\n            } else {\n              this.error('end tag is not valid');\n            }\n            break;\n          case 0x3f: // ?\n            ret += this.next();\n            if (this.lookAt('xml ') || this.lookAt('xml>')) {\n              type = TokenType.XML_START;\n            } else {\n              type = TokenType.HTML_TAG_START;\n            }\n            break;\n          default:\n            // a-z\n            if (code >= 0x61 && code <= 0x7a) {\n              const tagName = this.getTagName();\n              const tagAttrs = this.getTagAttrs();\n              const str = '<' + tagName + tagAttrs.value;\n              const token = this.getToken(TokenType.HTML_TAG_START, str, {\n                tag: tagName,\n                tagLowerCase: tagName.toLowerCase(),\n                attrs: tagAttrs.attrs,\n                slash: tagAttrs.slash\n              });\n              return token;\n            } else {\n              type = TokenType.HTML_TEXT;\n            }\n            break;\n        }\n      }\n      if (code === 0x22 || code === 0x27) { // char is ' or \"\n        quote = this.getQuote({\n          checkNext: true,\n          rollback: true\n        });\n        ret += quote.value;\n        if (!quote.find) {\n          this.error(`can not find matched quote char \\`${chr}\\``);\n        }\n        continue;\n      }\n      const tpl = this.getTplToken();\n      if (tpl) {\n        ret += tpl.value;\n        continue;\n      }\n      // 0x3e is >\n      if (code === 0x3e) {\n        ret += this.next();\n        tagEnd = true;\n        break;\n      }\n      ret += this.next();\n    }\n    // tag not closed\n    if (!tagEnd) {\n      return this.getToken(TokenType.HTML_RAW_TEXT, ret);\n    }\n    // get tag attrs\n    if (type === TokenType.HTML_TAG_END) {\n      // 8.1.2.2 in http://www.w3.org/TR/html5/syntax.html\n      // in end tag, may be have whitespace on right\n      const tag = ret.slice(2, -1).trim();\n      const token = this.getToken(type, ret, {\n        tag: tag,\n        tagLowerCase: tag.toLowerCase()\n      });\n      return token;\n    }\n    return this.getToken(type, ret);\n  }\n  /**\n   * get tag name\n   * @return {[type]} [description]\n   */\n  getTagName() {\n    let chr, ret = '';\n    while (this.pos < this.length) {\n      chr = this._text[this.pos];\n      if (!isTagNameChar(chr.charCodeAt(0))) {\n        break;\n      }\n      ret += this.next();\n    }\n    return ret;\n  }\n  /**\n   * get tag attrs\n   * http://www.w3.org/TR/html5/syntax.html\n   * @param  {String} tag [tag string]\n   * @return {Object}     [tag name & attrs]\n   */\n  getTagAttrs() {\n    let attrs = [], chr, code, value = '';\n    let hasEqual = false, spaceBefore = false, tagEnd = false;\n    const tplInstance = this.getTplInstance();\n    let attrName = '', attrValue = '', tplToken;\n    let voidElement = false;\n    const commentBefore = this.commentBefore;\n    // avoid comments to tplToken\n    this.commentBefore = [];\n    while (this.pos < this.length) {\n      tplToken = this.getTplToken();\n      if (tplToken) {\n        value += tplToken.value;\n        if (tplInstance.hasOutput(tplToken)) {\n          if (hasEqual) {\n            attrValue += tplToken.value;\n          } else {\n            attrName += tplToken.value;\n          }\n        } else {\n          if (hasEqual) {\n            if (attrValue) {\n              attrs.push({name: attrName, value: attrValue}, tplToken);\n              attrName = attrValue = '';\n            } else {\n              attrValue += tplToken.value;\n            }\n          } else {\n            if (attrName) {\n              attrs.push({name: attrName});\n            }\n            tplToken.spaceBefore = spaceBefore;\n            attrs.push(tplToken);\n            attrName = attrValue = '';\n          }\n        }\n        spaceBefore = false;\n        continue;\n      }\n      chr = this.text[this.pos];\n      code = chr.charCodeAt(0);\n      value += chr;\n      // char is >\n      if (code === 0x3e) {\n        tagEnd = true;\n        this.next();\n        break;\n      }\n      voidElement = false;\n      if (code === 0x3d) { // char is =\n        hasEqual = true;\n        spaceBefore = false;\n      } else if (!hasEqual && code === 0x2f) { // 0x2f is /\n        voidElement = true;\n        if (this.text.charCodeAt[this.pos - 1] !== 0x2f) {\n          if (attrName) {\n            attrs.push({name: attrName});\n          }\n          attrName = attrValue = '';\n          hasEqual = false;\n        }\n      } else if (hasEqual && (code === 0x22 || code === 0x27)) { // char is ' or \"\n        const quote = this.getQuote({\n          checkNext: true,\n          rollback: true\n        });\n        value += quote.value.slice(1);\n        // quote string not found\n        if (!quote.find) {\n          this.error(`can not find matched quote char \\`${chr}\\``);\n        }\n        attrValue += quote.value;\n        attrs.push({name: attrName, value: attrValue});\n        attrName = attrValue = '';\n        hasEqual = spaceBefore = false;\n        continue;\n      } else if (this.isWhiteSpace(code)) { // whitespace\n        if (hasEqual && attrValue) {\n          attrs.push({name: attrName, value: attrValue});\n          attrName = attrValue = '';\n          hasEqual = spaceBefore = false;\n        } else {\n          spaceBefore = true;\n        }\n      } else {\n        if (hasEqual) {\n          attrValue += chr;\n        } else {\n          if (spaceBefore && attrName) {\n            attrs.push({name: attrName});\n            attrName = chr;\n          } else {\n            attrName += chr;\n          }\n        }\n        spaceBefore = false;\n      }\n      this.next();\n    }\n    // add extra attr name or attr value\n    if (attrName || attrValue) {\n      if (hasEqual) {\n        attrs.push({name: attrName, value: attrValue});\n      } else {\n        attrs.push({name: attrName});\n      }\n    }\n    if (!tagEnd) {\n      return {\n        value: value,\n        message: Message.TagUnClosed\n      };\n    }\n    for (let i = 0, length = attrs.length, item; i < length; i++) {\n      item = attrs[i];\n      if (item.ld) {\n        attrs[i].tpl = true;\n        continue;\n      } else if (item.value !== undefined) {\n        code = item.value.charCodeAt(0);\n        if (code === 0x22 || code === 0x27) {\n          attrs[i].quote = item.value.slice(0, 1);\n          attrs[i].value = item.value.slice(1, -1);\n        } else {\n          attrs[i].quote = '';\n          attrs[i].value = item.value;\n        }\n        const hasTpl = this.hasTpl(attrs[i].value);\n        // add has tpl flag for value\n        if (hasTpl && !attrs[i].type) {\n          attrs[i].hasTpl = true;\n        }\n      }\n      // template syntax in attribute name\n      // may be has uppercase chars in template syntax\n      // etc: <input <?php echo $NAME;?>name=\"value\" >\n      if (this.hasTpl(item.name)) {\n        attrs[i].nameLowerCase = item.name;\n      } else {\n        attrs[i].nameLowerCase = item.name.toLowerCase();\n      }\n    }\n    this.commentBefore = commentBefore;\n    return {\n      value: value,\n      slash: voidElement,\n      attrs: attrs\n    };\n  }\n  /**\n   * skip comment\n   * @return {void} []\n   */\n  skipComment() {\n    // start with <!\n    commentLabel: while (this.text.charCodeAt(this.pos) === 0x3c &&\n      this.text.charCodeAt(this.pos + 1) === 0x21) {\n      for (let i = 0; i < reservedCommentLength; i++) {\n        if (this.lookAt(reservedCommentPrefix[i])) {\n          break commentLabel;\n        }\n      }\n      // template delimiter may be <!-- & -->\n      if (this.isTplNext()) {\n        break;\n      }\n      const comment = this.getCommentToken(2);\n      if (comment) {\n        this.commentBefore.push(comment);\n      } else {\n        break;\n      }\n    }\n  }\n  /**\n   * get raw element token\n   * @return {Object} []\n   */\n  getRawToken() {\n    let i = 0, item, pos = 0, code;\n    let startToken, contentToken, endToken, token;\n    while (i < rawTokensLength) {\n      item = rawTokens[i++];\n      if (!this.lookAt(item[0])) {\n        continue;\n      }\n      code = this._text.charCodeAt(this.pos + item[0].length);\n      // next char is not space or >\n      if (!this.isWhiteSpace(code) && code !== 0x3e) {\n        continue;\n      }\n      pos = this.find(item[1]);\n      if (pos === -1) {\n        return;\n      }\n      code = this._text.charCodeAt(pos + item[1].length);\n      // next char is not space or >\n      if (!this.isWhiteSpace(code) && code !== 0x3e) {\n        continue;\n      }\n      token = this.getToken(item[2], '');\n\n      this.startToken();\n      startToken = this.getTagToken();\n      if (item[2] === TokenType.HTML_TAG_SCRIPT) {\n        startToken = parseScriptAttrs(startToken, this.options.jsTplTypes);\n      } else if (item[2] === TokenType.HTML_TAG_STYLE) {\n        startToken = parseStyleAttrs(startToken);\n      }\n      this.startToken();\n      contentToken = this.getToken(TokenType.HTML_RAW_TEXT, this.forward(pos - this.pos));\n      // add hasTpl flag for content token\n      contentToken.ext.hasTpl = this.hasTpl(contentToken.value);\n      this.startToken();\n      endToken = this.getTagToken();\n      token.value = startToken.value + contentToken.value + endToken.value;\n      token.ext.start = startToken;\n      token.ext.content = contentToken;\n      token.ext.end = endToken;\n      return token;\n    }\n  }\n  /**\n   * get special token\n   * @return {Object} []\n   */\n  getSpecialToken() {\n    let pos, npos, findItem, j, length, ret, i = 0, item;\n    while (i < specialTokensLength) {\n      item = specialTokens[i++];\n      // if text is not start with item[0], continue\n      if (!this.lookAt(item[0])) {\n        continue;\n      }\n      if (isArray(item[1])) {\n        pos = -1;\n        findItem = '';\n        for (j = 0, length = item[1].length; j < length; j++) {\n          npos = this.find(item[1][j]);\n          if (npos === -1) {\n            continue;\n          }\n          if (pos === -1) {\n            pos = npos;\n            findItem = item[1][j];\n          } else if (npos < pos) {\n            pos = npos;\n            findItem = item[1][j];\n          }\n        }\n        // find end special chars\n        if (findItem) {\n          length = pos + findItem.length - this.pos;\n          ret = this.text.substr(this.pos, length);\n          this.forward(length);\n          return this.getToken(item[2], ret);\n        }\n      } else {\n        ret = this.getMatched(item[0], item[1]);\n        if (ret) {\n          return this.getToken(item[2], ret);\n        }\n      }\n    }\n  }\n}\n"]}