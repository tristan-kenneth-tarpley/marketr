{"version":3,"sources":["../../../src/lang/html/compress.js"],"names":["compressOpts","HtmlCompress","text","options","_optText","tokens","isXML","index","length","jsHandle","cssHandle","jsTplHandle","prev","next","initTokens","instance","run","compressCommon","token","commentBefore","removeComment","comments","start","hasSpace","end","forEach","item","value","indexOf","push","prevHasRightSpace","type","HTML_TEXT","test","HTML_DOCTYPE","XML_START","tagTypes","HTML_TAG_START","HTML_TAG_END","ext","tagLowerCase","compressText","spaces","Array","join","replace","removeInterTagSpace","compressDocType","simpleDoctype","compressCharset","attrs","charset","contentValue","flag","some","nameLowerCase","toLowerCase","reg","matches","match","name","quote","removeAttrsQuote","compressTagStart","compressTag","lowerTagName","tagToLower","tag","simpleCharset","ret","retAttrs","attr","TPL","tplCompress","compressTpl","removeOptionalAttrs","removeHtmlXmlns","removeAttrsOptionalValue","removeHttpProtocol","slice","removeHttpsProtocol","hasTpl","trim","split","compressStyleValue","compress","compressValue","removeVoidElementSlash","slash","compressTagEnd","HTML_TAG_STYLE","HTML_TAG_SCRIPT","removeOptionalEndEag","optionalEndTagList","compressStyle","contentToken","content","removeEmptyStyle","handle","compressInlineCss","compressScript","isExternal","removeEmptyScript","compressInlineJs","isScript","isTpl","compressJsTpl","getTplInstance","compressToken","retTokens","firstToken","result","js","stringify","css"],"mappings":"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","file":"compress.js","sourcesContent":["import Base from '../../util/base.js';\nimport Tokenize from './tokenize.js';\nimport TokenType from '../../util/token_type.js';\nimport {\n  token2Text,\n  isTagAttrDefaultValue,\n  isTagAttrOnlyName,\n  isAttrValueNoQuote,\n  isOptionalEndTag,\n  isVoidElement,\n  isSafeTag,\n  isTag\n} from './util.js';\n\nimport CssCompress from '../css/compress.js';\n\n/**\n * compress options\n */\nconst compressOpts = {\n  'trim': false, // 去除首尾空白字符\n  'removeComment': true, // 移除注释\n  'simpleDoctype': true, // 简化doctype\n  'simpleCharset': true, // 简化charset\n  'tagToLower': true, // 小写标签名\n  'removeHtmlXmlns': true, // 移除html的命名空间\n  'removeInterTagSpace': false, // 移除标签之间的空格，非安全\n  'removeEmptyScript': false, // 移除空的script标签\n  'removeEmptyStyle': false, // 移除空的style标签\n  'removeOptionalAttrs': true, // 移除可选的属性\n  'removeAttrsQuote': true, // 移除属性值的引号\n  'removeAttrsOptionalValue': true, // 移除可选属性的值\n  'removeHttpProtocol': false, // 移除http协议\n  'removeHttpsProtocol': false, // 移除https协议\n  'removeOptionalEndEag': true, // 移除可选的结束标签\n  'optionalEndTagList': null, // 结束标签列表\n  'removeVoidElementSlash': true, // 移除单一标签最后的 /\n  'compressStyleValue': true, // 压缩标签的style值\n  'compressInlineCss': true, // 压缩内联的CSS\n  'compressInlineJs': true, // 压缩内联的JS\n  'removeInlineJsCdata': true, //\n  'compressJsTpl': true, // 压缩前端模版\n  'compressTag': true // 压缩标签\n};\n\nexport default class HtmlCompress extends Base {\n  /**\n   * constructor\n   */\n  constructor(text, options = {}) {\n    super('', options);\n    this._optText = text;\n    this.tokens = [];\n    this.isXML = false;\n\n    this.index = 0;\n    this.length = 0;\n\n    this.jsHandle = null;\n    this.cssHandle = null;\n    this.jsTplHandle = null;\n\n    this.prev = null;\n    this.next = null;\n\n    this.options = {\n      ...compressOpts,\n      ...this.options\n    };\n  }\n  /**\n   * init tokens\n   */\n  initTokens() {\n    if (typeof this._optText === 'string') {\n      const instance = new Tokenize(this._optText, this.options);\n      this.tokens = instance.run();\n    } else {\n      this.tokens = this._optText;\n    }\n    this.length = this.tokens.length;\n  }\n  /**\n   * compress common\n   */\n  compressCommon(token) {\n    // compress comment\n    if (token.commentBefore.length && this.options.removeComment) {\n      const comments = [];\n      const start = token.commentBefore[0].start;\n      let prev = null;\n      let hasSpace = token.start - token.commentBefore[token.commentBefore.length - 1].end > 0;\n      token.commentBefore.forEach(item => {\n        if (item.value.indexOf('<!--!') === 0) {\n          comments.push(item);\n        }\n        if (prev && !hasSpace) {\n          hasSpace = (item.start - prev.end) > 0;\n        }\n        prev = item;\n      });\n      token.commentBefore = comments;\n      let prevHasRightSpace = false;\n      if (this.prev && this.prev.type === TokenType.HTML_TEXT) {\n        prevHasRightSpace = /\\s$/.test(this.prev.value);\n      }\n      token.start = !prevHasRightSpace && hasSpace ? start + 1 : start;\n    }\n\n    if (!this.prev) {\n      if (token.type === TokenType.HTML_DOCTYPE || token.type === TokenType.XML_START) {\n        token.start = 0;\n        return token;\n      }\n    }\n\n    if (this.isXML) {\n      token.start = this.prev ? this.prev.end : 0;\n      return token;\n    }\n\n    // safe tags\n    const tagTypes = [\n      TokenType.HTML_TAG_START,\n      TokenType.HTML_TAG_END\n    ];\n    if (tagTypes.indexOf(token.type) > -1 && isSafeTag(token.ext.tagLowerCase)) {\n      token.start = this.prev ? this.prev.end : 0;\n    }\n\n    return token;\n  }\n  /**\n   * compress text\n   */\n  compressText(token) {\n    // can not remove extra whitespace in title tag\n    if (this.prev && this.prev.type === TokenType.HTML_TAG_START) {\n      if (this.prev.ext.tagLowerCase === 'title') {\n        const spaces = token.start - this.prev.end;\n        if (spaces) {\n          token.value = (new Array(spaces + 1)).join(' ') + token.value;\n        }\n        token.start = this.prev.end;\n        return token;\n      }\n    }\n\n    let value = token.value;\n    // 如果文本中含有//，则不去除换行等，主要是一些异步接口（JS环境）会被识别成HTML环境，如果有JS的//注释就要注意了\n    if (value.indexOf('//') > -1) {\n      return token;\n    }\n    value = value.replace(/\\s+/g, ' ');\n    // remove right space\n    if (this.options.removeInterTagSpace) {\n      value = value.replace(/\\s$/, '');\n    }\n    token.value = value;\n    return token;\n  }\n  /**\n   * compress doctype\n   */\n  compressDocType(token) {\n    if (this.options.simpleDoctype) {\n      token.value = '<!Doctype html>';\n    }\n    token.start = this.prev ? this.prev.end : 0;\n    return token;\n  }\n  /**\n   * compress charset\n   */\n  compressCharset(token) {\n    const attrs = token.ext.attrs;\n    let charset = 0;\n    let contentValue = '';\n    const flag = attrs.some(item => {\n      const value = item.value || '';\n      if (item.nameLowerCase === 'http-equiv' && value.toLowerCase() === 'content-type') {\n        charset++;\n      } else if (item.nameLowerCase === 'content' && value.indexOf('charset=') > -1) {\n        charset++;\n        contentValue = item.value;\n      } else {\n        return true;\n      }\n    });\n    if (flag) {\n      return;\n    }\n    if (charset !== 2 || !contentValue) {\n      return;\n    }\n    const reg = /charset=([\\w\\-]+)/i;\n    const matches = contentValue.match(reg);\n    if (matches && matches[1]) {\n      // token.value = `<meta charset=${matches[1]}>`;\n      token.ext.attrs = [{\n        name: 'charset',\n        value: matches[1],\n        nameLowerCase: 'charset',\n        quote: this.options.removeAttrsQuote ? '' : '\"'\n      }];\n    }\n    return token;\n  }\n  /**\n   * compress tag start\n   */\n  compressTagStart(token) {\n    if (this.isXML || !this.options.compressTag) {\n      return token;\n    }\n    const lowerTagName = token.ext.tagLowerCase;\n    if (!isTag(lowerTagName)) {\n      return token;\n    }\n    if (this.options.tagToLower) {\n      token.ext.tag = lowerTagName;\n    }\n    if (lowerTagName === 'meta' && this.options.simpleCharset) {\n      const ret = this.compressCharset(token);\n      if (ret) {\n        return ret;\n      }\n    }\n    const attrs = token.ext.attrs;\n    const retAttrs = [];\n    const options = this.options;\n    attrs.forEach(attr => {\n      if (attr.type === TokenType.TPL) {\n        const tplCompress = this.compressTpl(attr);\n        if (tplCompress) {\n          retAttrs.push(tplCompress);\n        }\n        return;\n      }\n\n      let value = attr.value;\n      const name = attr.nameLowerCase;\n\n      // remove tag attribute default value\n      if (options.removeOptionalAttrs && isTagAttrDefaultValue(name, value, lowerTagName)) {\n        return;\n      }\n\n      // remove xmlns attribute in html tag\n      if (options.removeHtmlXmlns && lowerTagName === 'html' && name === 'xmlns') {\n        return;\n      }\n\n      // tag attribute only has name, remove value\n      if (options.removeAttrsOptionalValue && isTagAttrOnlyName(name)) {\n        delete attr.value;\n        delete attr.quote;\n        retAttrs.push(attr);\n        return;\n      }\n\n      // remove value quote\n      if (options.removeAttrsQuote && isAttrValueNoQuote(value)) {\n        delete attr.quote;\n        retAttrs.push(attr);\n        return;\n      }\n\n      // remove http/https protocol prefix\n      if (name === 'href' || name === 'src') {\n        if (options.removeHttpProtocol && value.indexOf('http://') === 0) {\n          attr.value = value.slice(5);\n          retAttrs.push(attr);\n          return;\n        }\n        if (options.removeHttpsProtocol && value.indexOf('https://') === 0) {\n          attr.value = value.slice(6);\n          retAttrs.push(attr);\n          return;\n        }\n      }\n\n      // class value has extra blank chars\n      if (name === 'class' && !this.hasTpl(value)) {\n        attr.value = value.trim().split(/\\s+/).join(' ');\n        if (attr.value) {\n          retAttrs.push(attr);\n        }\n        return;\n      }\n\n      // compress style value\n      if (options.compressStyleValue && name === 'style') {\n        value = `*{${value}}`;\n        if (this.cssHandle && this.cssHandle.compress) {\n          const compressValue = this.cssHandle.compress(value);\n          attr.value = compressValue.slice(2, compressValue.length - 1);\n        } else {\n          const instance = new CssCompress(value, this.options);\n          const compressValue = instance.run();\n          attr.value = compressValue.slice(2, compressValue.length - 1);\n        }\n        retAttrs.push(attr);\n        return;\n      }\n\n      // remove last ; on event\n      if (name.indexOf('on') === 0) {\n        value = value.trim();\n        if (value[value.length - 1] === ';') {\n          attr.value = value.slice(0, value.length - 1);\n        }\n      }\n\n      retAttrs.push(attr);\n    });\n    // remove / in void element\n    if (this.options.removeVoidElementSlash && token.ext.slash) {\n      if (isVoidElement(lowerTagName)) {\n        token.ext.slash = false;\n      }\n    }\n    token.ext.attrs = retAttrs;\n    return token;\n  }\n  /**\n   * compress tag end\n   */\n  compressTagEnd(token) {\n    // </div> </div> => </div></div>\n    const tagTypes = [\n      TokenType.HTML_TAG_END,\n      TokenType.HTML_TAG_STYLE,\n      TokenType.HTML_TAG_SCRIPT\n    ];\n    if (this.prev && tagTypes.indexOf(this.prev.type) > -1) {\n      token.start = this.prev.end;\n    }\n    const tagLowerCase = token.ext.tagLowerCase;\n    if (this.isXML || !isTag(tagLowerCase)) {\n      return token;\n    }\n\n    if (this.options.removeOptionalEndEag) {\n      if (isOptionalEndTag(tagLowerCase, this.options.optionalEndTagList)) {\n        return;\n      }\n    }\n\n    if (this.options.tagToLower) {\n      token.ext.tag = tagLowerCase;\n    }\n\n    return token;\n  }\n  /**\n   * compress style\n   */\n  compressStyle(token) {\n    // remove whitespace before token\n    token.start = this.prev ? this.prev.end : 0;\n\n    if (!this.options.compressTag) {\n      return token;\n    }\n\n    const contentToken = token.ext.content;\n    const contentValue = contentToken.value.trim();\n    if (this.options.removeEmptyStyle && !contentValue) {\n      return;\n    }\n\n    let handle = this.cssHandle;\n    if (this.cssHandle && this.cssHandle.compress) {\n      handle = this.cssHandle.compress;\n    }\n    if (this.options.compressInlineCss && handle) {\n      token.ext.content = handle(contentToken, this);\n    }\n\n    token.ext.start = this.compressTagStart(token.ext.start);\n    token.ext.end = this.compressTagEnd(token.ext.end);\n    return token;\n  }\n\n  /**\n   * compress script\n   */\n  compressScript(token) {\n    // remove whitespace before token\n    token.start = this.prev ? this.prev.end : 0;\n\n    if (!this.options.compressTag) {\n      return token;\n    }\n\n    const {start, content, end} = token.ext;\n    token.ext.start = this.compressTagStart(start);\n    token.ext.end = this.compressTagEnd(end);\n    if (start.ext.isExternal) {\n      return token;\n    }\n\n    const contentValue = content.value.trim();\n    // remove empty script\n    if (this.options.removeEmptyScript && !contentValue) {\n      return;\n    }\n\n    // compress inline script\n    if (this.options.compressInlineJs && start.ext.isScript && !start.ext.isExternal) {\n      const hasTpl = this.hasTpl(contentValue);\n      let handle = this.jsHandle;\n      if (this.jsHandle && this.jsHandle.compress) {\n        handle = this.jsHandle.compress;\n      }\n      if (!hasTpl && handle) {\n        token.ext.content = handle(content, this);\n      }\n    }\n\n    // compress js tpl\n    if (start.ext.isTpl && this.options.compressJsTpl && this.jsTplHandle) {\n      token.ext.content = this.jsTplHandle(content, this);\n    }\n\n    return token;\n  }\n  /**\n   * compress tpl\n   */\n  compressTpl(token) {\n    const instance = this.getTplInstance();\n    return instance.compress(token, this);\n  }\n  /**\n   * compress token\n   */\n  compressToken(token) {\n    if (!this.prev && this.options.trim) {\n      token.start = 0;\n    }\n    token = this.compressCommon(token);\n    switch (token.type) {\n      case TokenType.HTML_DOCTYPE:\n        token = this.compressDocType(token);\n        break;\n      case TokenType.HTML_TAG_START:\n        token = this.compressTagStart(token);\n        break;\n      case TokenType.HTML_TEXT:\n        token = this.compressText(token);\n        break;\n      case TokenType.HTML_TAG_END:\n        token = this.compressTagEnd(token);\n        break;\n      case TokenType.HTML_TAG_STYLE:\n        token = this.compressStyle(token);\n        break;\n      case TokenType.HTML_TAG_SCRIPT:\n        token = this.compressScript(token);\n        break;\n      case TokenType.TPL:\n        token = this.compressTpl(token);\n        break;\n    }\n    return token;\n  }\n  /**\n   * run\n   */\n  run(retTokens = false) {\n    this.initTokens();\n\n    const firstToken = this.tokens[0];\n    if (firstToken && firstToken.type === TokenType.XML_START) {\n      this.isXML = true;\n      this.options.tagToLower = false;\n    }\n    const result = [];\n    while (this.index < this.length) {\n      if (this.index) {\n        this.prev = this.tokens[this.index - 1];\n      }\n      let token = this.tokens[this.index++];\n      this.next = this.tokens[this.index];\n\n      token = this.compressToken(token);\n      if (token) {\n        result.push(token);\n      }\n    }\n    return retTokens ? result : token2Text(result, {\n      js: this.jsHandle && this.jsHandle.stringify,\n      css: this.cssHandle && this.cssHandle.stringify\n    });\n  }\n}\n"]}