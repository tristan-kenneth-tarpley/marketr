{"version":3,"sources":["../../../src/lang/css/compress.js"],"names":["compressOpts","removeComment","removeLastSemicolon","removeEmptySelector","overrideSameProperty","shortValue","mergeProperty","sortProperty","sortSelector","mergeSelector","propertyToLower","CssCompress","text","options","_optText","tokens","index","length","result","selectors","inKeyframes","initTokens","instance","run","compressValue","value","property","replace","toLowerCase","getSelectorProperties","braces","type","CSS_LEFT_BRACE","Error","attrs","pos","key","propertyToken","valueToken","tplToken","hasTpl","hasHack","selectorCondition","token","CSS_PROPERTY","ext","CSS_VALUE","CSS_SEMICOLON","CSS_RIGHT_BRACE","TPL","suffix","CSS_BRACK_HACK","CSS_COLON","sortProperties","mergePropertyChildren","collectSelector","selectorPos","group","detail","selector","selectorKey","selectorCanCombine","list","every","indexOf","item","getPropertiesIntersect","se1","se2","attrs1","attrs2","assoc","assoclen","attrs1Value","attrs2Value","isUnMergeProperty","selen","checkValueTokenEqual","item1","item2","ext1","ext2","item1Property","item1PropertyPrefix","prefix","item1Value","itemPropertyValue","itemPropertyPrefix","getAssocSelectorToken","CSS_SELECTOR","equal","specificityEqual","minSpecificity","concat","Math","min","maxSpecificity","max","getSelectorsIntersect","flag","assocSelectorToken","push","sortSelectors","cache","compare","se1Ext","se2Ext","compareNeighbor","i","j","k","tmp","compressSelectorToken","keys","ret","forEach","selectorToTokens","leftBrace","colon","rightBrace","semicolon","map","attr","compressSelector","se","comments","commentBefore","retTokens","hasCharset","CSS_KEYFRAMES","CSS_CHARSET"],"mappings":"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","file":"compress.js","sourcesContent":["import Base from '../../util/base.js';\nimport Tokenize from './tokenize.js';\n\nimport TokenType from '../../util/token_type.js';\nimport SelectorTokenize from './selector_tokenize.js';\n\nimport {\n  getShortValue,\n  isMultiSameProperty,\n  mergeProperties,\n  selectorToken2Text,\n  isAtType,\n  isUnMergeProperty,\n  token2Text,\n  mergePropertyChildren,\n  selectorGroupToken2Text\n} from './util.js';\n\nimport {createToken} from '../../util/util_ext.js';\n\n/**\n * default compress options\n */\nconst compressOpts = {\n  removeComment: true,\n  removeLastSemicolon: true,\n  removeEmptySelector: true,\n  overrideSameProperty: true,\n  shortValue: true,\n  mergeProperty: true,\n  sortProperty: true,\n  sortSelector: true,\n  mergeSelector: true,\n  propertyToLower: true\n};\n/**\n * compress css\n */\nexport default class CssCompress extends Base {\n  /**\n   * constructor\n   */\n  constructor(text, options = {}) {\n    super('', options);\n    this._optText = text;\n\n    this.tokens = [];\n    this.index = 0;\n    this.length = 0;\n\n    this.result = [];\n    this.selectors = {};\n    this.inKeyframes = false;\n\n    this.options = {\n      ...compressOpts,\n      ...this.options\n    };\n  }\n  /**\n   * init tokens\n   */\n  initTokens() {\n    if (typeof this._optText === 'string') {\n      const instance = new Tokenize(this._optText, this.options);\n      this.tokens = instance.run();\n    } else {\n      this.tokens = this._optText;\n    }\n    this.length = this.tokens.length;\n  }\n  /**\n   * compress css value\n   */\n  compressValue(value, property) {\n    // remove comment\n    value = value.replace(/\\/\\*.*?\\*\\//g, '');\n    // remove newline\n    value = value.replace(/\\n+/g, '');\n    // remove extra whitespace\n    value = value.replace(/\\s+/g, ' ');\n\n    // get short value\n    if (this.options.shortValue) {\n      value = getShortValue(value, property);\n    }\n\n    // if property is filter, can't replace `, ` to `,`\n    // see http://www.imququ.com/post/the_bug_of_ie-matrix-filter.html\n    if (property.toLowerCase() !== 'filter') {\n      // remove whitespace after ,\n      value = value.replace(/,\\s+/g, ',');\n      value = value.replace(/#([0-9a-fA-F])\\1([0-9a-fA-F])\\2([0-9a-fA-F])\\3/g, '#$1$2$3');\n    }\n\n    // replace 0(px,em,%) with 0.\n    value = value.replace(/(^|\\s)(0)(?:px|em|%|in|cm|mm|pc|pt|ex|rem)/gi, '$1$2');\n    // replace 0.6 to .6\n    value = value.replace(/(^|\\s)0\\.(\\d+)/g, '$1.$2');\n    // replace 1.0 to 1\n    value = value.replace(/(\\d+)\\.0(\\s|$)/g, '$1$2');\n    // replace .0 to 0\n    value = value.replace(/(^|\\s)\\.(0)(\\s|$)/g, '$1$2$3');\n    // Shorten colors from #AABBCC to #ABC. Note that we want to make sure\n    // the color is not preceded by either \", \" or =. Indeed, the property\n    //     filter: chroma(color=\"#FFFFFF\");\n    // would become\n    //     filter: chroma(color=\"#FFF\");\n    // which makes the filter break in IE.\n    // value = value.replace(/([^\\\"'=\\s])(\\s*)#([0-9a-fA-F])\\3([0-9a-fA-F])\\4([0-9a-fA-F])\\5/ig, '$1$2#$3$4$5');\n    return value;\n  }\n  /**\n   * get selector properties\n   */\n  getSelectorProperties() {\n    const braces = this.tokens[this.index++];\n    if (!braces) {\n      return {};\n    }\n    if (braces.type !== TokenType.CSS_LEFT_BRACE) {\n      throw new Error('after selector must be a {');\n    }\n\n    let attrs = {}, pos = 0, key = '';\n    let propertyToken = null, valueToken = null, tplToken = null;\n    let hasTpl = false, hasHack = false;\n\n    selectorCondition: while (this.index < this.length) {\n      let token = this.tokens[this.index++];\n      token = this.removeComment(token);\n      switch (token.type) {\n        case TokenType.CSS_PROPERTY:\n          key += this.options.propertyToLower ? token.value.toLowerCase() : token.value;\n          if (!this.options.overrideSameProperty && (key in attrs)) {\n            key += pos++;\n          }\n          if (this.options.propertyToLower) {\n            token.ext.value = token.ext.value.toLowerCase();\n            token.value = token.value.toLowerCase();\n          }\n          propertyToken = token;\n\n          // has tplToken before property\n          if (tplToken) {\n            attrs[`${tplToken.value}%${pos++}`] = {\n              value: tplToken\n            };\n            tplToken = null;\n          }\n          break;\n        case TokenType.CSS_VALUE:\n          valueToken = token;\n          break;\n        case TokenType.CSS_SEMICOLON:\n        case TokenType.CSS_RIGHT_BRACE:\n          if (valueToken === null && tplToken && propertyToken) {\n            valueToken = tplToken;\n            tplToken = null;\n          }\n\n          // already has tplToken\n          if (tplToken) {\n            attrs[`${tplToken.value}%${pos++}`] = {\n              value: tplToken\n            };\n            tplToken = null;\n          }\n\n          if (!propertyToken || !valueToken) {\n            if (token.type === TokenType.CSS_RIGHT_BRACE) {\n              break selectorCondition;\n            }\n            break;\n          }\n\n          // propertyToken is tpl\n          if (propertyToken.type === TokenType.TPL) {\n            attrs[`${propertyToken.value}%${pos++}`] = {\n              property: propertyToken,\n              value: valueToken\n            };\n            propertyToken = valueToken = null;\n            if (token.type === TokenType.CSS_RIGHT_BRACE) {\n              break selectorCondition;\n            }\n            break;\n          }\n\n          // optimize css value\n          if (valueToken.type === TokenType.CSS_VALUE) {\n            valueToken.ext.value = this.compressValue(valueToken.ext.value, propertyToken.ext.value);\n            /**\n             * for div{color:red;color:blue\\9;}\n             * if suffix in css value, can not override property.\n             */\n            key += valueToken.ext.suffix;\n          }\n\n          // multi same property\n          // background:red;background:url(xx.png)\n          if (isMultiSameProperty(key, valueToken.value)) {\n            key += '%' + pos++;\n          }\n\n          // already has tpl syntax, can not override property\n          // div{<&if $name&>color:red;<&else&>color:blue;<&/if&>font-size:12px;}\n          if (hasTpl) {\n            key += '%' + pos++;\n          }\n\n          if (this.options.overrideSameProperty) {\n            attrs = mergeProperties(attrs, {\n              [key]: {\n                property: propertyToken,\n                value: valueToken\n              }\n            });\n          } else {\n            attrs[key] = {\n              property: propertyToken,\n              value: valueToken\n            };\n          }\n          propertyToken = valueToken = null;\n          // hasColon = false;\n          key = '';\n\n          if (token.type === TokenType.CSS_RIGHT_BRACE) {\n            break selectorCondition;\n          }\n          break;\n        case TokenType.CSS_BRACK_HACK:\n          // for css hack [;color:red;]\n          attrs[`${token.value}%${pos++}`] = {\n            value: token\n          };\n          hasHack = true;\n          break;\n        case TokenType.TPL:\n          // already has tplToken\n          if (tplToken) {\n            attrs[`${token.value}%${pos++}`] = {\n              value: tplToken\n            };\n          }\n          tplToken = token;\n          hasTpl = true;\n          break;\n        case TokenType.CSS_COLON:\n          // is tplToken before :\n          if (!propertyToken && tplToken) {\n            propertyToken = tplToken;\n            tplToken = null;\n          }\n          // hasColon = true;\n          break;\n      }\n    }\n    if (!hasHack && !hasTpl) {\n      if (this.options.sortProperty) {\n        attrs = this.sortProperties(attrs);\n      }\n      if (this.options.mergeProperty) {\n        attrs = this.mergePropertyChildren(attrs);\n      }\n    }\n    return attrs;\n  }\n  /**\n   * sort properties\n   */\n  sortProperties(attrs) {\n    return attrs;\n  }\n  /**\n   * merge properties\n   */\n  mergePropertyChildren(attrs) {\n    attrs = mergePropertyChildren(attrs, 'padding');\n    attrs = mergePropertyChildren(attrs, 'margin');\n    return attrs;\n  }\n  /**\n   * collect selector\n   */\n  collectSelector(token, selectorPos = 0) {\n    const attrs = this.getSelectorProperties();\n    // remove empty selector\n    if (this.options.removeEmptySelector && Object.keys(attrs).length === 0) {\n      return true;\n    }\n    if (!token.ext.group) {\n      const instance = new SelectorTokenize(token.value, this.options);\n      token.ext = instance.run();\n    }\n    const detail = {\n      attrs,\n      selector: token,\n      pos: selectorPos++\n    };\n    const selectorKey = selectorToken2Text(token);\n    token.value = selectorKey;\n    if (selectorKey in this.selectors) {\n      this.selectors[selectorKey].attrs = mergeProperties(this.selectors[selectorKey].attrs, attrs);\n    } else {\n      this.selectors[selectorKey] = detail;\n    }\n  }\n  /**\n   * selector can combine\n   */\n  selectorCanCombine(selectors) {\n    const list = ['-ms-', ':root', '-placeholder'];\n    return selectors.every(selector => {\n      return list.every(item => {\n        return selector.selector.value.indexOf(item) === -1;\n      });\n    });\n  }\n  /**\n   * get properties intersect in 2 selectors\n   */\n  getPropertiesIntersect(se1, se2) {\n    const attrs1 = se1.attrs;\n    const attrs2 = se2.attrs;\n    const assoc = {};\n    let assoclen = 0;\n    for (const key in attrs1) {\n      // only have value token\n      if (!attrs1[key].property) {\n        continue;\n      }\n      // not exist in attrs2\n      if (!(key in attrs2)) {\n        continue;\n      }\n      if (!attrs2[key].property) {\n        continue;\n      }\n      const attrs1Value = attrs1[key].value.value;\n      const attrs2Value = attrs2[key].value.value;\n      // value not equal\n      if (attrs1Value !== attrs2Value) {\n        continue;\n      }\n      // property has prefix or value has suffix\n      // if(attrs1[key].property.ext.prefix || attrs1[key].value.ext.suffix){\n      //   continue;\n      // }\n      if (this.isUnMergeProperty(attrs1[key], attrs1, attrs2)) {\n        continue;\n      }\n      assoc[key] = attrs1[key];\n      // 2 chars is : and ;\n      assoclen += attrs1[key].property.value.length + attrs1[key].value.value.length + 2;\n    }\n    const length = Object.keys(assoc).length;\n    if (length === 0) {\n      return false;\n    }\n    if (length !== Object.keys(attrs1).length &&\n      length !== Object.keys(attrs2).length) {\n      // 3 chars is `, { }`\n      const selen = se1.selector.value.length + se2.selector.value.length + 3;\n      if (selen >= assoclen) {\n        return false;\n      }\n    }\n    return assoc;\n  }\n  /**\n   * check css value token equal\n   */\n  checkValueTokenEqual(item1, item2) {\n    const ext1 = item1.ext;\n    const ext2 = item2.ext;\n    const list = ['prefix', 'suffix', 'value', 'important'];\n    return list.every(item => {\n      return ext1[item] === ext2[item];\n    });\n  }\n  /**\n   * is unmerge property\n   */\n  isUnMergeProperty(item1, attrs1, attrs2) {\n    const item1Property = item1.property.ext.value.toLowerCase();\n    const item1PropertyPrefix = item1.property.ext.prefix;\n    const item1Value = item1.value.ext.value;\n    if (isUnMergeProperty(item1Property, item1Value)) {\n      return true;\n    }\n    // if(isUnSortProperty(item1Property)){\n    //   return true;\n    // }\n    for (const key in attrs1) {\n      const itemPropertyValue = attrs1[key].property.ext.value.toLowerCase();\n      const itemPropertyPrefix = attrs1[key].property.ext.prefix;\n      if (item1Property === itemPropertyValue) {\n        if (item1PropertyPrefix !== itemPropertyPrefix) {\n          return true;\n        }\n        if (!this.checkValueTokenEqual(item1.value, attrs1[key].value)) {\n          return true;\n        }\n      }\n      if (item1Property.indexOf('-') > -1) {\n        if (item1Property.indexOf(itemPropertyValue + '-') > -1) {\n          return true;\n        }\n      } else {\n        if (itemPropertyValue.indexOf(item1Property + '-') > -1) {\n          return true;\n        }\n      }\n    }\n    for (const key in attrs2) {\n      const itemPropertyValue = attrs2[key].property.ext.value.toLowerCase();\n      const itemPropertyPrefix = attrs2[key].property.ext.prefix;\n      if (item1Property === itemPropertyValue) {\n        if (item1PropertyPrefix !== itemPropertyPrefix) {\n          return true;\n        }\n        if (!this.checkValueTokenEqual(item1.value, attrs2[key].value)) {\n          return true;\n        }\n      }\n      if (item1Property.indexOf('-') > -1) {\n        if (item1Property.indexOf(itemPropertyValue + '-') > -1) {\n          return true;\n        }\n      } else {\n        if (itemPropertyValue.indexOf(item1Property + '-') > -1) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  /**\n   * get assoc selector token\n   */\n  getAssocSelectorToken(se1, se2) {\n    const value = se1.value + ',' + se2.value;\n    const token = createToken(TokenType.CSS_SELECTOR, value, se1);\n    let equal = false;\n    if (se1.ext.specificityEqual && se2.ext.specificityEqual) {\n      equal = se1.ext.minSpecificity === se2.ext.minSpecificity;\n    }\n    const group = se1.ext.group.concat(se2.ext.group);\n    token.ext = {\n      minSpecificity: Math.min(se1.ext.minSpecificity, se2.ext.minSpecificity),\n      maxSpecificity: Math.max(se1.ext.maxSpecificity, se2.ext.maxSpecificity),\n      specificityEqual: equal,\n      group\n    };\n    return token;\n  }\n  /**\n   * get selector intersect\n   */\n  getSelectorsIntersect(selectors) {\n    while (1) {\n      const length = selectors.length;\n      if (length < 2) {\n        break;\n      }\n      const result = [];\n      let flag = false;\n      for (let index = 0; index < length - 1; index++) {\n        let assoc = null;\n        if (this.selectorCanCombine([selectors[index], selectors[index + 1]])) {\n          assoc = this.getPropertiesIntersect(selectors[index], selectors[index + 1]);\n        }\n        if (assoc) {\n          for (const key in assoc) {\n            delete selectors[index].attrs[key];\n            delete selectors[index + 1].attrs[key];\n          }\n          flag = true;\n          const assocSelectorToken = this.getAssocSelectorToken(selectors[index].selector, selectors[index + 1].selector);\n          result.push({\n            attrs: assoc,\n            selector: assocSelectorToken\n          });\n        }\n        if (Object.keys(selectors[index].attrs).length) {\n          result.push(selectors[index]);\n        }\n      }\n      if (Object.keys(selectors[length - 1].attrs).length) {\n        result.push(selectors[length - 1]);\n      }\n      selectors = result;\n      if (!flag) {\n        break;\n      }\n    }\n    return selectors;\n  }\n  /**\n   * sort selectors\n   */\n  sortSelectors(selectors) {\n    const cache = {};\n    const length = selectors.length;\n\n    const compare = (se1, se2) => {\n      const se1Ext = se1.selector.ext;\n      const se2Ext = se2.selector.ext;\n      if (!se1Ext.specificityEqual || !se2Ext.specificityEqual) {\n        if (se1Ext.minSpecificity > se2Ext.maxSpecificity) {\n          return 1;\n        } else if (se1Ext.maxSpecificity < se2Ext.minSpecificity) {\n          return -1;\n        }\n        return se1.pos - se2.pos;\n      }\n      if (se1Ext.minSpecificity === se2Ext.minSpecificity) {\n        return se1.pos - se2.pos;\n      }\n      return se1Ext.minSpecificity - se2Ext.minSpecificity;\n    };\n    const compareNeighbor = (i, j) => {\n      for (let k = i + 1; k < j; k++) {\n        const key = `${k}_${j}`;\n        if (!cache[key]) {\n          cache[key] = compare(selectors[k], selectors[j]);\n        }\n        if (cache[key] < 0) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (let i = 0; i < length; i++) {\n      for (let j = i + 1; j < length; j++) {\n        const key = `${i}_${j}`;\n        if (!cache[key]) {\n          cache[key] = compare(selectors[i], selectors[j]);\n        }\n        if (cache[key] > 0 && compareNeighbor(i, j)) {\n          const tmp = selectors[j];\n          selectors[j] = selectors[i];\n          selectors[i] = tmp;\n        }\n      }\n    }\n    return selectors;\n  }\n  /**\n   * remove exist selector\n   */\n  compressSelectorToken(selector) {\n    const group = selector.ext.group;\n    if (group.length === 1) {\n      return selector;\n    }\n    let keys = {}, ret = [];\n    group.forEach(item => {\n      const key = selectorGroupToken2Text(item);\n      if (!(key in keys)) {\n        ret.push(item);\n        keys[key] = true;\n      }\n    });\n    selector.ext.group = ret;\n    return selector;\n  }\n  /**\n   * selector to tokens\n   */\n  selectorToTokens(selectors) {\n    const ret = [];\n\n    const leftBrace = createToken(TokenType.CSS_LEFT_BRACE, '{');\n    const colon = createToken(TokenType.CSS_COLON, ':');\n    const rightBrace = createToken(TokenType.CSS_RIGHT_BRACE, '}');\n    const semicolon = createToken(TokenType.CSS_SEMICOLON, ';');\n\n    selectors.forEach(item => {\n      item.selector = this.compressSelectorToken(item.selector);\n      ret.push(item.selector, leftBrace);\n      const attrs = Object.keys(item.attrs).map(key => item.attrs[key]);\n      const length = attrs.length;\n      attrs.forEach((attr, index) => {\n        if (attr.property) {\n          ret.push(attr.property, colon);\n        }\n        ret.push(attr.value);\n        if (attr.value.type !== TokenType.TPL) {\n          if (!this.options.removeLastSemicolon || index < length - 1) {\n            ret.push(semicolon);\n          }\n        }\n      });\n      ret.push(rightBrace);\n    });\n    return ret;\n  }\n  /**\n   * compress selector\n   */\n  compressSelector() {\n    const keys = Object.keys(this.selectors);\n    if (keys.length === 0) {\n      return;\n    }\n    let selectors = keys.map(key => this.selectors[key]);\n    this.selectors = {};\n\n    if (this.options.sortSelector) {\n      selectors = this.sortSelectors(selectors);\n    }\n\n    let se = [], result = [];\n    selectors.forEach(item => {\n      if (item.selector.ext.specificityEqual) {\n        se.push(item);\n      } else {\n        se = this.getSelectorsIntersect(se);\n        result = result.concat(se);\n        result.push(item);\n        se = [];\n      }\n    });\n    if (se.length) {\n      se = this.getSelectorsIntersect(se);\n      result = result.concat(se);\n    }\n    const tokens = this.selectorToTokens(result);\n    this.result.push(...tokens);\n  }\n  /**\n   * remove comment\n   */\n  removeComment(token) {\n    if (!this.options.removeComment) {\n      return token;\n    }\n    const comments = [];\n    token.commentBefore.forEach(item => {\n      if (item.value.indexOf('/*!') === 0) {\n        comments.push(item);\n      }\n    });\n    token.commentBefore = comments;\n    return token;\n  }\n  /**\n   * run\n   */\n  run(retTokens = false) {\n    this.initTokens();\n    let hasCharset = false;\n    const sortSelector = this.options.sortSelector;\n    const sortProperty = this.options.sortProperty;\n    let selectorPos = 0;\n    let property = '';\n    while (this.index < this.length) {\n      let token = this.tokens[this.index++];\n      token = this.removeComment(token);\n      switch (token.type) {\n        case TokenType.CSS_SELECTOR:\n          this.collectSelector(token, selectorPos++);\n          break;\n        case TokenType.CSS_VALUE:\n          token.ext.value = this.compressValue(token.ext.value, property);\n          this.result.push(token);\n          break;\n        case TokenType.CSS_RIGHT_BRACE:\n          if (this.index > 1 && this.tokens[this.index - 2].type === TokenType.CSS_RIGHT_BRACE) {\n            this.compressSelector();\n            this.options.sortProperty = sortProperty;\n            this.options.sortSelector = sortSelector;\n            this.inKeyframes = false;\n            this.result.push(token);\n            break;\n          }\n        case TokenType.CSS_KEYFRAMES:\n          this.options.sortSelector = false;\n          this.options.sortProperty = false;\n          this.inKeyframes = true;\n        default:\n          if (isAtType(token.type)) {\n            this.compressSelector();\n          }\n          if (token.type === TokenType.CSS_PROPERTY) {\n            property = token.ext.value.toLowerCase();\n          }\n          if (token.type === TokenType.CSS_CHARSET) {\n            if (!hasCharset) {\n              this.result.push(token);\n            }\n            hasCharset = true;\n          } else {\n            this.result.push(token);\n          }\n      }\n    }\n    this.compressSelector();\n    return retTokens ? this.result : token2Text(this.result);\n  }\n}\n"]}