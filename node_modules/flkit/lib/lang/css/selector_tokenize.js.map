{"version":3,"sources":["../../../src/lang/css/selector_tokenize.js"],"names":["CssSelectorTokenize","text","options","prevToken","getNextToken","token","type","CSS_SELECTOR_COMMA","match","forward","length","getToken","CSS_SELECTOR_NAMESPACE","code","charCodeAt","pos","CSS_SELECTOR_UNIVERSAL","next","CSS_SELECTOR_COMBINATOR","getCommonToken","CSS_SELECTOR_ID","CSS_SELECTOR_CLASS","getAttributeToken","CSS_SELECTOR_PSEUDO_ELEMENT","value","vender","getPseudoClassToken","CSS_SELECTOR_TYPE","skipComment","comment","getCommentToken","commentBefore","push","ret","isWhiteSpace","getMatchedChar","quote","CSS_SELECTOR_ATTRIBUTE","nest","CSS_SELECTOR_PSEUDO_CLASS","checkInvalid","run","result","tokens","min","max","specificity","invalid","data","minSpecificity","maxSpecificity","specificityEqual","hasVender","group"],"mappings":"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","file":"selector_tokenize.js","sourcesContent":["import Base from '../../util/tokenize.js';\nimport TokenType from '../../util/token_type.js';\nimport {selectorBreakChar, isPseudoElement, calculateSelectorSpecificity} from './util.js';\nimport {namespaceReg} from './config.js';\n\n/**\n * css selector tokenize\n * https://www.w3.org/TR/css3-selectors/#lex\n */\nexport default class CssSelectorTokenize extends Base {\n  /**\n   * constructor\n   */\n  constructor(text, options) {\n    super(text, options);\n    this.prevToken = null;\n  }\n  /**\n   * get next token\n   * @return {Object} []\n   */\n  getNextToken() {\n    let token = super.getNextToken();\n    if (token || token === false) {\n      return token;\n    }\n    if (!this.prevToken || this.prevToken.type === TokenType.CSS_SELECTOR_COMMA) {\n      const match = this.text.match(namespaceReg);\n      if (match) {\n        this.forward(match[0].length);\n        return this.getToken(TokenType.CSS_SELECTOR_NAMESPACE, match[0]);\n      }\n    }\n    const code = this.text.charCodeAt(this.pos);\n    switch (code) {\n      case 0x2a: // *\n        return this.getToken(TokenType.CSS_SELECTOR_UNIVERSAL, this.next());\n      case 0x2c: // ,\n        return this.getToken(TokenType.CSS_SELECTOR_COMMA, this.next());\n      case 0x3e: // >\n      case 0x2b: // +\n      case 0x7e: // ~\n        return this.getToken(TokenType.CSS_SELECTOR_COMBINATOR, this.next());\n      case 0x23: // #\n        return this.getCommonToken(TokenType.CSS_SELECTOR_ID);\n      case 0x2e: // .\n        return this.getCommonToken(TokenType.CSS_SELECTOR_CLASS);\n      case 0x5b: // [\n        return this.getAttributeToken();\n      case 0x3a: // :\n        if (this.text.charCodeAt(this.pos + 1) === 0x3a) {\n          this.next();\n          token = this.getCommonToken(TokenType.CSS_SELECTOR_PSEUDO_ELEMENT);\n          token.value = ':' + token.value;\n          token.vender = token.value.charCodeAt(2) === 0x2d;\n          return token;\n        }\n        return this.getPseudoClassToken();\n      default:\n        return this.getCommonToken(TokenType.CSS_SELECTOR_TYPE);\n    }\n    // return false;\n  }\n  /**\n   * skip comment\n   * @return {void} []\n   */\n  skipComment() {\n    // start with /*\n    let comment;\n    while (this.text.charCodeAt(this.pos) === 0x2f &&\n      this.text.charCodeAt(this.pos + 1) === 0x2a) {\n      comment = this.getCommentToken(1, true);\n      this.commentBefore.push(comment);\n    }\n  }\n  /**\n   * get common token\n   * @param  {Number} type []\n   * @return {Object}      []\n   */\n  getCommonToken(type) {\n    let ret = this.next(), code;\n    while (this.pos < this.length) {\n      code = this.text.charCodeAt(this.pos);\n      if (selectorBreakChar(code) || this.isWhiteSpace(code)) {\n        break;\n      }\n      ret += this.next();\n    }\n    return this.getToken(type, ret);\n  }\n  /**\n   * get attribute token\n   * @return {Object} []\n   */\n  getAttributeToken() {\n    const ret = this.getMatchedChar(0x5b, 0x5d, {\n      quote: true\n    });\n    return this.getToken(TokenType.CSS_SELECTOR_ATTRIBUTE, ret);\n  }\n  /**\n   * get pseudo class token, support :not(xxx)\n   * @return {Object} []\n   */\n  getPseudoClassToken() {\n    let ret = this.next(), code;\n    while (this.pos < this.length) {\n      code = this.text.charCodeAt(this.pos);\n      if (code === 0x28) {\n        ret += this.getMatchedChar(0x28, 0x29, {\n          nest: true,\n          quote: true\n        });\n        continue;\n      }\n      if (selectorBreakChar(code) || this.isWhiteSpace(code)) {\n        break;\n      }\n      ret += this.next();\n    }\n    if (isPseudoElement(ret)) {\n      return this.getToken(TokenType.CSS_SELECTOR_PSEUDO_ELEMENT, ret);\n    }\n    const token = this.getToken(TokenType.CSS_SELECTOR_PSEUDO_CLASS, ret);\n    token.vender = token.value.charCodeAt(1) === 0x2d;\n    return token;\n  }\n  /**\n   * check token valid\n   * @param  {Object} token []\n   * @return {Boolean}       []\n   */\n  checkInvalid(token) {\n    switch (token.type) {\n      case TokenType.CSS_SELECTOR_CLASS:\n        if (token.value.length === 1) {\n          return true;\n        }\n        break;\n    }\n  }\n  /**\n   * run\n   * @return {Object} []\n   */\n  run() {\n    let result = [], tokens = [], token, min = -1, max = -1;\n    let specificity, invalid = false, vender = false;\n    for (; token = this.getNextToken();) {\n      this.prevToken = token;\n      if (token.type === TokenType.CSS_SELECTOR_COMMA) {\n        specificity = calculateSelectorSpecificity(tokens);\n        if (min === -1) {\n          min = max = specificity;\n        } else {\n          if (specificity < min) {\n            min = specificity;\n          }\n          if (specificity > max) {\n            max = specificity;\n          }\n        }\n        result.push({\n          tokens: tokens,\n          specificity: specificity\n        });\n        tokens = [];\n      } else {\n        if (!vender) {\n          vender = token.vender;\n        }\n        if (!invalid) {\n          invalid = this.checkInvalid(token);\n        }\n        tokens.push(token);\n      }\n    }\n    if (tokens.length) {\n      specificity = calculateSelectorSpecificity(tokens);\n      if (min === -1) {\n        min = max = specificity;\n      } else {\n        if (specificity < min) {\n          min = specificity;\n        }\n        if (specificity > max) {\n          max = specificity;\n        }\n      }\n      result.push({\n        tokens: tokens,\n        specificity: specificity\n      });\n    }\n    const data = {\n      minSpecificity: min,\n      maxSpecificity: max,\n      specificityEqual: min === max,\n      hasVender: !!vender,\n      group: result\n    };\n    if (invalid) {\n      data.invalid = true;\n    }\n    return data;\n  }\n}\n"]}