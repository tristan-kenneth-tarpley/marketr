'use strict';

exports.__esModule = true;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _tokenize = require('../../util/tokenize.js');

var _tokenize2 = _interopRequireDefault(_tokenize);

var _token_type = require('../../util/token_type.js');

var _token_type2 = _interopRequireDefault(_token_type);

var _config = require('../../util/config.js');

var _selector_tokenize = require('./selector_tokenize.js');

var _selector_tokenize2 = _interopRequireDefault(_selector_tokenize);

var _util = require('./util.js');

var _config2 = require('./config.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import Message from '../../util/message.js';
var multiComment = _config.comments[1];

/**
 * status
 */
var STATUS = {
  SELECTOR: 0,
  PROPERTY: 1
};

/**
 * css tokenize
 */

var CssTokenize = function (_BaseTokenize) {
  (0, _inherits3.default)(CssTokenize, _BaseTokenize);

  /**
   * constructor
   *
   */
  function CssTokenize(text) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      parseSelector: false
    };
    (0, _classCallCheck3.default)(this, CssTokenize);

    var _this = (0, _possibleConstructorReturn3.default)(this, _BaseTokenize.call(this, text, options));

    _this.prevToken = {};
    _this.status = STATUS.SELECTOR;
    _this.skipCd();
    return _this;
  }
  /**
   * get next token
   * @return {void} []
   */


  CssTokenize.prototype.getNextToken = function getNextToken() {
    this.skipWhiteSpace();
    this.skipComment();
    this.startToken();
    if (this.pos >= this.length) {
      return this.getLastToken();
    }

    var token = this.getTplToken();
    if (token) {
      return token;
    }
    if (this.lookAt(multiComment[0] + '!')) {
      var value = this.getMatched(multiComment[0] + '!', multiComment[1]);
      return this.getToken(_token_type2.default.RESERVED_COMMENT, value);
    }
    var type = this.prevToken.type;
    var code = this._text.charCodeAt(this.pos);
    switch (code) {
      case 0x40:
        // @
        return this.getAtToken();
      case 0x7b:
        // {
        if (type === _token_type2.default.CSS_SELECTOR) {
          this.status = STATUS.PROPERTY;
        }
        return this.getToken(_token_type2.default.CSS_LEFT_BRACE, this.next());
      case 0x7d:
        // }
        this.status = STATUS.SELECTOR;
        var token1 = this.getToken(_token_type2.default.CSS_RIGHT_BRACE, this.next());
        this.prevToken = token1;
        return token1;
      case 0x3a:
        // :
        if (type === _token_type2.default.CSS_PROPERTY || type === _token_type2.default.CSS_SELECTOR || type === _token_type2.default.CSS_VALUE || type === _token_type2.default.CSS_COLON) {
          var _token2 = this.getToken(_token_type2.default.CSS_COLON, this.next());
          this.prevToken = _token2;
          return _token2;
        }
        break;
      case 0x3b:
        // ;
        var _token = this.getToken(_token_type2.default.CSS_SEMICOLON, this.next());
        this.prevToken = _token;
        return _token;
      case 0x5b:
        // [
        if (type === _token_type2.default.CSS_SELECTOR || type === _token_type2.default.CSS_VALUE || type === _token_type2.default.CSS_SEMICOLON) {
          // for hack [;color: red;]
          var ret = this.getMatched('[', ']');
          if (ret) {
            return this.getToken(_token_type2.default.CSS_BRACK_HACK, ret);
          }
        }
    }
    if (type === _token_type2.default.CSS_PROPERTY || type === _token_type2.default.CSS_COLON) {
      return this.getValueToken();
    }
    if (this.status === STATUS.PROPERTY) {
      return this.getPropertyToken();
    }
    return this.getSelectorToken();
  };
  /**
   * get selector or name token
   * @return {Object} []
   */


  CssTokenize.prototype.getSelectorToken = function getSelectorToken() {
    var ret = '',
        code = void 0,
        str = void 0,
        token = void 0,
        chr = void 0,
        record = void 0,
        escape = false;
    var tmpValue = '',
        tmpFlag = false;
    while (this.pos < this.length) {
      token = this.getTplToken();
      if (token) {
        ret += token.value;
        continue;
      }
      chr = this.text[this.pos];
      code = chr.charCodeAt(0);
      if (code === 0x5c || escape) {
        escape = !escape;
        ret += this.next();
        continue;
      } else if (code === 0x7b) {
        // {
        break;
      } else if (code === 0x2f && this.text.charCodeAt(this.pos + 1) === 0x2a) {
        record = record || this.record();
        tmpValue += this.getCommentToken(1, false).value;
        continue;
      }
      if (tmpValue && code !== 0x5b) {
        tmpValue += chr;
        tmpFlag = true;
      }
      if (record && !this.isWhiteSpace(code)) {
        record = undefined;
        ret += tmpValue;
        tmpValue = '';
      }
      if (!escape && (code === 0x22 || code === 0x27)) {
        ret += this.getQuote({
          rollback: true
        }).value;
        continue;
      } else if (code === 0x5b) {
        // [ ]
        str = this.getMatchedChar(0x5b, 0x5d, {
          quote: true
        });
        if (str) {
          ret += str;
          continue;
        }
      } else if (code === 0x28) {
        // ( )
        str = this.getMatchedChar(0x28, 0x29, {
          quote: true,
          nest: true
        });
        if (str) {
          ret += str;
          continue;
        }
      }
      if (tmpFlag) {
        this.next();
        tmpFlag = false;
      } else {
        ret += this.next();
      }
    }
    token = this.getToken(_token_type2.default.CSS_SELECTOR, ret);
    token.value = this.skipRightSpace(ret);
    if (record) {
      // record.spaceBefore = record.newlineBefore = 0;
      this.rollback(record);
    }
    if (this.options.parseSelector) {
      token.ext = new _selector_tokenize2.default(token.value).run();
    }
    return token;
  };
  /**
   * get property token
   * @return {Object} []
   */


  CssTokenize.prototype.getPropertyToken = function getPropertyToken() {
    var ret = '',
        chr = void 0,
        code = void 0;
    this.record();
    while (this.pos < this.length) {
      chr = this._text[this.pos];
      code = chr.charCodeAt(0);
      // ;
      if (code === 0x3b) {
        this.rollback();
        return this.getValueToken();
      }
      // : / }
      if (code === 0x3a || code === 0x2f || code === 0x7d || this.isWhiteSpace(code)) {
        break;
      }
      ret += this.next();
    }
    return this.getToken(_token_type2.default.CSS_PROPERTY, ret, this.parseProperty(ret));
  };
  /**
   * parse property
   * @return {Object} []
   */


  CssTokenize.prototype.parseProperty = function parseProperty(property) {
    var prefix = '',
        suffix = '',
        code = property.charCodeAt(0);
    if (code === 0x2d) {
      property = property.replace(/^\-\w+\-/, function (a) {
        prefix = a;
        return '';
      });
    } else if ((0, _util.isHackChar)(code)) {
      prefix = property[0];
      property = property.slice(1);
    }
    return {
      prefix: prefix.toLowerCase(),
      suffix: suffix,
      value: property.toLowerCase()
    };
  };
  /**
   * get value token
   * @return {Object} []
   */


  CssTokenize.prototype.getValueToken = function getValueToken() {
    var ret = '',
        code = void 0,
        chr = void 0,
        token = void 0;
    var escape = false,
        record = void 0,
        quote = void 0,
        hasTpl = false;
    var tplValue = '',
        tmpFlag = false;
    while (this.pos < this.length) {
      token = this.getTplToken();
      if (token) {
        ret += token.value;
        hasTpl = true;
        continue;
      }
      chr = this.text[this.pos];
      code = chr.charCodeAt(0);
      if (code === 0x5c || escape) {
        escape = !escape;
        ret += this.next();
        continue;
      } else if (code === 0x3b || code === 0x7d) {
        // ; or }
        break;
      } else if (code === 0x2f && this.text.charCodeAt(this.pos + 1) === 0x2a) {
        record = record || this.record();
        tplValue += this.getCommentToken(1, false).value;
        continue;
      }
      if (tplValue) {
        tplValue += chr;
        tmpFlag = true;
      }
      if (record && !this.isWhiteSpace(code)) {
        record = undefined;
        ret += tplValue;
        tplValue = '';
      }
      if (!escape && (code === 0x22 || code === 0x27)) {
        quote = this.getQuote({
          rollback: true
        });
        if (!quote.find) {
          this.error('can not find matched quote `' + chr + '`');
        }
        ret += quote.value;
        continue;
      } else if (code === 0x28) {
        // ( )
        ret += this.getMatchedChar(0x28, 0x29, {
          nest: true,
          quote: true,
          multi_comment: true
        });
        continue;
      }
      if (tmpFlag) {
        this.next();
        tmpFlag = false;
      } else {
        ret += this.next();
      }
    }
    token = this.getToken(_token_type2.default.CSS_VALUE, ret);
    ret = this.skipRightSpace(ret);
    token.value = ret;
    if (record) {
      // record.spaceBefore = record.newlineBefore = 0;
      this.rollback(record);
    }
    token.ext = this.parseValue(ret);
    token.ext.hasTpl = hasTpl;
    return token;
  };
  /**
   * parse css value
   * @param  {String} value []
   * @return {Object}       []
   */


  CssTokenize.prototype.parseValue = function parseValue(value) {
    // get css value suffix & important
    var prefix = '',
        suffix = '',
        important = false;
    if (value.indexOf('\\') > -1) {
      value = value.replace(/(?:\\\d)+$/, function (a) {
        suffix = a;
        return '';
      });
    }
    if (value.indexOf('!') > -1) {
      value = value.replace(/!\s*important/i, function () {
        important = true;
        return '';
      });
    }
    // get css value prefix
    if (value.charCodeAt(0) === 0x2d) {
      value = value.replace(/^\-\w+\-/, function (a) {
        prefix = a;
        return '';
      });
    }
    if (suffix || important) {
      value = value.trim();
    }
    return {
      prefix: prefix,
      suffix: suffix,
      important: important,
      value: value
    };
  };
  /**
   * skip comment
   * @return {void} []
   */


  CssTokenize.prototype.skipComment = function skipComment() {
    // start with /*, but not /*!
    var comment = void 0;
    while (this.text.charCodeAt(this.pos) === 0x2f && this.text.charCodeAt(this.pos + 1) === 0x2a && this.text.charCodeAt(this.pos + 2) !== 0x21) {
      comment = this.getCommentToken(1, true);
      this.commentBefore.push(comment);
    }
  };
  /**
   * get @ token
   * @return {Object} []
   */


  CssTokenize.prototype.getAtToken = function getAtToken() {
    var i = 0,
        item = void 0,
        code = void 0,
        ret = '',
        length = void 0,
        chr = void 0,
        type = _token_type2.default.CSS_AT;
    for (; item = _config2.atType[i++];) {
      if (!this.lookAt(item[0])) {
        continue;
      }
      length = item[0].length;
      code = this._text.charCodeAt(this.pos + length);
      // whitespace or ; or { or / or ' or " or : or ,
      if (code === 0x20 || code === 0x3b || code === 0x7b || code === 0x2f || code === 0x22 || code === 0x27 || code === 0x3a || code === 0x2c) {
        ret = this.forward(length);
        type = item[1];
        break;
      }
    }
    while (this.pos < this.length) {
      chr = this.text[this.pos];
      code = chr.charCodeAt(0);
      if (code === 0x2f && this.text.charCodeAt(this.pos + 1) === 0x2a) {
        ret += this.getCommentToken(1, false).value;
        continue;
      } else if (code === 0x22 || code === 0x27) {
        ret += this.getQuote().value;
        continue;
      }
      // ;
      if (code === 0x3b) {
        ret += this.next();
        break;
      }
      // {
      if (code === 0x7b) {
        break;
      }
      ret += this.next();
    }
    var token = this.getToken(type, ret);
    token.value = this.skipRightSpace(ret);
    return token;
  };
  /**
   * run
   * @return {Array} [text tokens]
   */


  CssTokenize.prototype.run = function run() {
    var ret = [],
        token = void 0,
        type = void 0;
    for (; token = this.getNextToken();) {
      ret.push(token);
      type = token.type;
      if (type === _token_type2.default.TPL || type === _token_type2.default.CSS_LEFT_BRACE || type === _token_type2.default.CSS_RIGHT_BRACE || type === _token_type2.default.CSS_COLON || type === _token_type2.default.CSS_SEMICOLON || type === _token_type2.default.CSS_BRACK_HACK || type === _token_type2.default.RESERVED_COMMENT) {
        continue;
      }
      this.prevToken = token;
      if (type === _token_type2.default.CSS_FONT_FACE || type === _token_type2.default.CSS_PAGE || type === _token_type2.default.CSS_VIEWPORT || type === _token_type2.default.CSS_AT) {
        this.status = STATUS.PROPERTY;
      }
    }
    return ret;
  };

  return CssTokenize;
}(_tokenize2.default);

exports.default = CssTokenize;
//# sourceMappingURL=tokenize.js.map