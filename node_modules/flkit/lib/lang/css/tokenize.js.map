{"version":3,"sources":["../../../src/lang/css/tokenize.js"],"names":["multiComment","STATUS","SELECTOR","PROPERTY","CssTokenize","text","options","parseSelector","prevToken","status","skipCd","getNextToken","skipWhiteSpace","skipComment","startToken","pos","length","getLastToken","token","getTplToken","lookAt","value","getMatched","getToken","RESERVED_COMMENT","type","code","_text","charCodeAt","getAtToken","CSS_SELECTOR","CSS_LEFT_BRACE","next","token1","CSS_RIGHT_BRACE","CSS_PROPERTY","CSS_VALUE","CSS_COLON","CSS_SEMICOLON","ret","CSS_BRACK_HACK","getValueToken","getPropertyToken","getSelectorToken","str","chr","record","escape","tmpValue","tmpFlag","getCommentToken","isWhiteSpace","undefined","getQuote","rollback","getMatchedChar","quote","nest","skipRightSpace","ext","run","parseProperty","property","prefix","suffix","replace","a","slice","toLowerCase","hasTpl","tplValue","find","error","multi_comment","parseValue","important","indexOf","trim","comment","commentBefore","push","i","item","CSS_AT","forward","TPL","CSS_FONT_FACE","CSS_PAGE","CSS_VIEWPORT"],"mappings":";;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;AAEA;;AACA;;;;AAFA;AAIA,IAAMA,eAAe,iBAAS,CAAT,CAArB;;AAEA;;;AAGA,IAAMC,SAAS;AACbC,YAAU,CADG;AAEbC,YAAU;AAFG,CAAf;;AAKA;;;;IAGqBC,W;;;AACnB;;;;AAIA,uBAAYC,IAAZ,EAEG;AAAA,QAFeC,OAEf,uEAFyB;AAC1BC,qBAAe;AADW,KAEzB;AAAA;;AAAA,+DACD,yBAAMF,IAAN,EAAYC,OAAZ,CADC;;AAED,UAAKE,SAAL,GAAiB,EAAjB;AACA,UAAKC,MAAL,GAAcR,OAAOC,QAArB;AACA,UAAKQ,MAAL;AAJC;AAKF;AACD;;;;;;wBAIAC,Y,2BAAe;AACb,SAAKC,cAAL;AACA,SAAKC,WAAL;AACA,SAAKC,UAAL;AACA,QAAI,KAAKC,GAAL,IAAY,KAAKC,MAArB,EAA6B;AAC3B,aAAO,KAAKC,YAAL,EAAP;AACD;;AAED,QAAMC,QAAQ,KAAKC,WAAL,EAAd;AACA,QAAID,KAAJ,EAAW;AACT,aAAOA,KAAP;AACD;AACD,QAAI,KAAKE,MAAL,CAAYpB,aAAa,CAAb,IAAkB,GAA9B,CAAJ,EAAwC;AACtC,UAAMqB,QAAQ,KAAKC,UAAL,CAAgBtB,aAAa,CAAb,IAAkB,GAAlC,EAAuCA,aAAa,CAAb,CAAvC,CAAd;AACA,aAAO,KAAKuB,QAAL,CAAc,qBAAUC,gBAAxB,EAA0CH,KAA1C,CAAP;AACD;AACD,QAAMI,OAAO,KAAKjB,SAAL,CAAeiB,IAA5B;AACA,QAAMC,OAAO,KAAKC,KAAL,CAAWC,UAAX,CAAsB,KAAKb,GAA3B,CAAb;AACA,YAAQW,IAAR;AACE,WAAK,IAAL;AAAW;AACT,eAAO,KAAKG,UAAL,EAAP;AACF,WAAK,IAAL;AAAW;AACT,YAAIJ,SAAS,qBAAUK,YAAvB,EAAqC;AACnC,eAAKrB,MAAL,GAAcR,OAAOE,QAArB;AACD;AACD,eAAO,KAAKoB,QAAL,CAAc,qBAAUQ,cAAxB,EAAwC,KAAKC,IAAL,EAAxC,CAAP;AACF,WAAK,IAAL;AAAW;AACT,aAAKvB,MAAL,GAAcR,OAAOC,QAArB;AACA,YAAM+B,SAAS,KAAKV,QAAL,CAAc,qBAAUW,eAAxB,EAAyC,KAAKF,IAAL,EAAzC,CAAf;AACA,aAAKxB,SAAL,GAAiByB,MAAjB;AACA,eAAOA,MAAP;AACF,WAAK,IAAL;AAAW;AACT,YAAIR,SAAS,qBAAUU,YAAnB,IACAV,SAAS,qBAAUK,YADnB,IAEAL,SAAS,qBAAUW,SAFnB,IAGAX,SAAS,qBAAUY,SAHvB,EAGkC;AAChC,cAAMnB,UAAQ,KAAKK,QAAL,CAAc,qBAAUc,SAAxB,EAAmC,KAAKL,IAAL,EAAnC,CAAd;AACA,eAAKxB,SAAL,GAAiBU,OAAjB;AACA,iBAAOA,OAAP;AACD;AACD;AACF,WAAK,IAAL;AAAW;AACT,YAAMA,SAAQ,KAAKK,QAAL,CAAc,qBAAUe,aAAxB,EAAuC,KAAKN,IAAL,EAAvC,CAAd;AACA,aAAKxB,SAAL,GAAiBU,MAAjB;AACA,eAAOA,MAAP;AACF,WAAK,IAAL;AAAW;AACT,YAAIO,SAAS,qBAAUK,YAAnB,IACAL,SAAS,qBAAUW,SADnB,IAEAX,SAAS,qBAAUa,aAFvB,EAEsC;AACpC;AACA,cAAMC,MAAM,KAAKjB,UAAL,CAAgB,GAAhB,EAAqB,GAArB,CAAZ;AACA,cAAIiB,GAAJ,EAAS;AACP,mBAAO,KAAKhB,QAAL,CAAc,qBAAUiB,cAAxB,EAAwCD,GAAxC,CAAP;AACD;AACF;AApCL;AAsCA,QAAId,SAAS,qBAAUU,YAAnB,IAAmCV,SAAS,qBAAUY,SAA1D,EAAqE;AACnE,aAAO,KAAKI,aAAL,EAAP;AACD;AACD,QAAI,KAAKhC,MAAL,KAAgBR,OAAOE,QAA3B,EAAqC;AACnC,aAAO,KAAKuC,gBAAL,EAAP;AACD;AACD,WAAO,KAAKC,gBAAL,EAAP;AACD,G;AACD;;;;;;wBAIAA,gB,+BAAmB;AACjB,QAAIJ,MAAM,EAAV;AAAA,QAAcb,aAAd;AAAA,QAAoBkB,YAApB;AAAA,QAAyB1B,cAAzB;AAAA,QAAgC2B,YAAhC;AAAA,QAAqCC,eAArC;AAAA,QAA6CC,SAAS,KAAtD;AACA,QAAIC,WAAW,EAAf;AAAA,QAAmBC,UAAU,KAA7B;AACA,WAAO,KAAKlC,GAAL,GAAW,KAAKC,MAAvB,EAA+B;AAC7BE,cAAQ,KAAKC,WAAL,EAAR;AACA,UAAID,KAAJ,EAAW;AACTqB,eAAOrB,MAAMG,KAAb;AACA;AACD;AACDwB,YAAM,KAAKxC,IAAL,CAAU,KAAKU,GAAf,CAAN;AACAW,aAAOmB,IAAIjB,UAAJ,CAAe,CAAf,CAAP;AACA,UAAIF,SAAS,IAAT,IAAiBqB,MAArB,EAA6B;AAC3BA,iBAAS,CAACA,MAAV;AACAR,eAAO,KAAKP,IAAL,EAAP;AACA;AACD,OAJD,MAIO,IAAIN,SAAS,IAAb,EAAmB;AAAE;AAC1B;AACD,OAFM,MAEA,IAAIA,SAAS,IAAT,IAAiB,KAAKrB,IAAL,CAAUuB,UAAV,CAAqB,KAAKb,GAAL,GAAW,CAAhC,MAAuC,IAA5D,EAAkE;AACvE+B,iBAASA,UAAU,KAAKA,MAAL,EAAnB;AACAE,oBAAY,KAAKE,eAAL,CAAqB,CAArB,EAAwB,KAAxB,EAA+B7B,KAA3C;AACA;AACD;AACD,UAAI2B,YAAYtB,SAAS,IAAzB,EAA+B;AAC7BsB,oBAAYH,GAAZ;AACAI,kBAAU,IAAV;AACD;AACD,UAAIH,UAAU,CAAC,KAAKK,YAAL,CAAkBzB,IAAlB,CAAf,EAAwC;AACtCoB,iBAASM,SAAT;AACAb,eAAOS,QAAP;AACAA,mBAAW,EAAX;AACD;AACD,UAAI,CAACD,MAAD,KAAYrB,SAAS,IAAT,IAAiBA,SAAS,IAAtC,CAAJ,EAAiD;AAC/Ca,eAAO,KAAKc,QAAL,CAAc;AACnBC,oBAAU;AADS,SAAd,EAEJjC,KAFH;AAGA;AACD,OALD,MAKO,IAAIK,SAAS,IAAb,EAAmB;AAAE;AAC1BkB,cAAM,KAAKW,cAAL,CAAoB,IAApB,EAA0B,IAA1B,EAAgC;AACpCC,iBAAO;AAD6B,SAAhC,CAAN;AAGA,YAAIZ,GAAJ,EAAS;AACPL,iBAAOK,GAAP;AACA;AACD;AACF,OARM,MAQA,IAAIlB,SAAS,IAAb,EAAmB;AAAE;AAC1BkB,cAAM,KAAKW,cAAL,CAAoB,IAApB,EAA0B,IAA1B,EAAgC;AACpCC,iBAAO,IAD6B;AAEpCC,gBAAM;AAF8B,SAAhC,CAAN;AAIA,YAAIb,GAAJ,EAAS;AACPL,iBAAOK,GAAP;AACA;AACD;AACF;AACD,UAAIK,OAAJ,EAAa;AACX,aAAKjB,IAAL;AACAiB,kBAAU,KAAV;AACD,OAHD,MAGO;AACLV,eAAO,KAAKP,IAAL,EAAP;AACD;AACF;AACDd,YAAQ,KAAKK,QAAL,CAAc,qBAAUO,YAAxB,EAAsCS,GAAtC,CAAR;AACArB,UAAMG,KAAN,GAAc,KAAKqC,cAAL,CAAoBnB,GAApB,CAAd;AACA,QAAIO,MAAJ,EAAY;AACV;AACA,WAAKQ,QAAL,CAAcR,MAAd;AACD;AACD,QAAI,KAAKxC,OAAL,CAAaC,aAAjB,EAAgC;AAC9BW,YAAMyC,GAAN,GAAY,gCAAqBzC,MAAMG,KAA3B,EAAkCuC,GAAlC,EAAZ;AACD;AACD,WAAO1C,KAAP;AACD,G;AACD;;;;;;wBAIAwB,gB,+BAAmB;AACjB,QAAIH,MAAM,EAAV;AAAA,QAAcM,YAAd;AAAA,QAAmBnB,aAAnB;AACA,SAAKoB,MAAL;AACA,WAAO,KAAK/B,GAAL,GAAW,KAAKC,MAAvB,EAA+B;AAC7B6B,YAAM,KAAKlB,KAAL,CAAW,KAAKZ,GAAhB,CAAN;AACAW,aAAOmB,IAAIjB,UAAJ,CAAe,CAAf,CAAP;AACA;AACA,UAAIF,SAAS,IAAb,EAAmB;AACjB,aAAK4B,QAAL;AACA,eAAO,KAAKb,aAAL,EAAP;AACD;AACD;AACA,UAAIf,SAAS,IAAT,IAAiBA,SAAS,IAA1B,IAAkCA,SAAS,IAA3C,IAAmD,KAAKyB,YAAL,CAAkBzB,IAAlB,CAAvD,EAAgF;AAC9E;AACD;AACDa,aAAO,KAAKP,IAAL,EAAP;AACD;AACD,WAAO,KAAKT,QAAL,CAAc,qBAAUY,YAAxB,EAAsCI,GAAtC,EAA2C,KAAKsB,aAAL,CAAmBtB,GAAnB,CAA3C,CAAP;AACD,G;AACD;;;;;;wBAIAsB,a,0BAAcC,Q,EAAU;AACtB,QAAIC,SAAS,EAAb;AAAA,QAAiBC,SAAS,EAA1B;AAAA,QAA8BtC,OAAOoC,SAASlC,UAAT,CAAoB,CAApB,CAArC;AACA,QAAIF,SAAS,IAAb,EAAmB;AACjBoC,iBAAWA,SAASG,OAAT,CAAiB,UAAjB,EAA6B,UAASC,CAAT,EAAY;AAClDH,iBAASG,CAAT;AACA,eAAO,EAAP;AACD,OAHU,CAAX;AAID,KALD,MAKO,IAAI,sBAAWxC,IAAX,CAAJ,EAAsB;AAC3BqC,eAASD,SAAS,CAAT,CAAT;AACAA,iBAAWA,SAASK,KAAT,CAAe,CAAf,CAAX;AACD;AACD,WAAO;AACLJ,cAAQA,OAAOK,WAAP,EADH;AAELJ,cAAQA,MAFH;AAGL3C,aAAOyC,SAASM,WAAT;AAHF,KAAP;AAKD,G;AACD;;;;;;wBAIA3B,a,4BAAgB;AACd,QAAIF,MAAM,EAAV;AAAA,QAAcb,aAAd;AAAA,QAAoBmB,YAApB;AAAA,QAAyB3B,cAAzB;AACA,QAAI6B,SAAS,KAAb;AAAA,QAAoBD,eAApB;AAAA,QAA4BU,cAA5B;AAAA,QAAmCa,SAAS,KAA5C;AACA,QAAIC,WAAW,EAAf;AAAA,QAAmBrB,UAAU,KAA7B;AACA,WAAO,KAAKlC,GAAL,GAAW,KAAKC,MAAvB,EAA+B;AAC7BE,cAAQ,KAAKC,WAAL,EAAR;AACA,UAAID,KAAJ,EAAW;AACTqB,eAAOrB,MAAMG,KAAb;AACAgD,iBAAS,IAAT;AACA;AACD;AACDxB,YAAM,KAAKxC,IAAL,CAAU,KAAKU,GAAf,CAAN;AACAW,aAAOmB,IAAIjB,UAAJ,CAAe,CAAf,CAAP;AACA,UAAIF,SAAS,IAAT,IAAiBqB,MAArB,EAA6B;AAC3BA,iBAAS,CAACA,MAAV;AACAR,eAAO,KAAKP,IAAL,EAAP;AACA;AACD,OAJD,MAIO,IAAIN,SAAS,IAAT,IAAiBA,SAAS,IAA9B,EAAoC;AAAE;AAC3C;AACD,OAFM,MAEA,IAAIA,SAAS,IAAT,IAAiB,KAAKrB,IAAL,CAAUuB,UAAV,CAAqB,KAAKb,GAAL,GAAW,CAAhC,MAAuC,IAA5D,EAAkE;AACvE+B,iBAASA,UAAU,KAAKA,MAAL,EAAnB;AACAwB,oBAAY,KAAKpB,eAAL,CAAqB,CAArB,EAAwB,KAAxB,EAA+B7B,KAA3C;AACA;AACD;AACD,UAAIiD,QAAJ,EAAc;AACZA,oBAAYzB,GAAZ;AACAI,kBAAU,IAAV;AACD;AACD,UAAIH,UAAU,CAAC,KAAKK,YAAL,CAAkBzB,IAAlB,CAAf,EAAwC;AACtCoB,iBAASM,SAAT;AACAb,eAAO+B,QAAP;AACAA,mBAAW,EAAX;AACD;AACD,UAAI,CAACvB,MAAD,KAAYrB,SAAS,IAAT,IAAiBA,SAAS,IAAtC,CAAJ,EAAiD;AAC/C8B,gBAAQ,KAAKH,QAAL,CAAc;AACpBC,oBAAU;AADU,SAAd,CAAR;AAGA,YAAI,CAACE,MAAMe,IAAX,EAAiB;AACf,eAAKC,KAAL,kCAA2C3B,GAA3C;AACD;AACDN,eAAOiB,MAAMnC,KAAb;AACA;AACD,OATD,MASO,IAAIK,SAAS,IAAb,EAAmB;AAAE;AAC1Ba,eAAO,KAAKgB,cAAL,CAAoB,IAApB,EAA0B,IAA1B,EAAgC;AACrCE,gBAAM,IAD+B;AAErCD,iBAAO,IAF8B;AAGrCiB,yBAAe;AAHsB,SAAhC,CAAP;AAKA;AACD;AACD,UAAIxB,OAAJ,EAAa;AACX,aAAKjB,IAAL;AACAiB,kBAAU,KAAV;AACD,OAHD,MAGO;AACLV,eAAO,KAAKP,IAAL,EAAP;AACD;AACF;AACDd,YAAQ,KAAKK,QAAL,CAAc,qBAAUa,SAAxB,EAAmCG,GAAnC,CAAR;AACAA,UAAM,KAAKmB,cAAL,CAAoBnB,GAApB,CAAN;AACArB,UAAMG,KAAN,GAAckB,GAAd;AACA,QAAIO,MAAJ,EAAY;AACV;AACA,WAAKQ,QAAL,CAAcR,MAAd;AACD;AACD5B,UAAMyC,GAAN,GAAY,KAAKe,UAAL,CAAgBnC,GAAhB,CAAZ;AACArB,UAAMyC,GAAN,CAAUU,MAAV,GAAmBA,MAAnB;AACA,WAAOnD,KAAP;AACD,G;AACD;;;;;;;wBAKAwD,U,uBAAWrD,K,EAAO;AAChB;AACA,QAAI0C,SAAS,EAAb;AAAA,QAAiBC,SAAS,EAA1B;AAAA,QAA8BW,YAAY,KAA1C;AACA,QAAItD,MAAMuD,OAAN,CAAc,IAAd,IAAsB,CAAC,CAA3B,EAA8B;AAC5BvD,cAAQA,MAAM4C,OAAN,CAAc,YAAd,EAA4B,UAASC,CAAT,EAAY;AAC9CF,iBAASE,CAAT;AACA,eAAO,EAAP;AACD,OAHO,CAAR;AAID;AACD,QAAI7C,MAAMuD,OAAN,CAAc,GAAd,IAAqB,CAAC,CAA1B,EAA6B;AAC3BvD,cAAQA,MAAM4C,OAAN,CAAc,gBAAd,EAAgC,YAAW;AACjDU,oBAAY,IAAZ;AACA,eAAO,EAAP;AACD,OAHO,CAAR;AAID;AACD;AACA,QAAItD,MAAMO,UAAN,CAAiB,CAAjB,MAAwB,IAA5B,EAAkC;AAChCP,cAAQA,MAAM4C,OAAN,CAAc,UAAd,EAA0B,UAASC,CAAT,EAAY;AAC5CH,iBAASG,CAAT;AACA,eAAO,EAAP;AACD,OAHO,CAAR;AAID;AACD,QAAIF,UAAUW,SAAd,EAAyB;AACvBtD,cAAQA,MAAMwD,IAAN,EAAR;AACD;AACD,WAAO;AACLd,cAAQA,MADH;AAELC,cAAQA,MAFH;AAGLW,iBAAWA,SAHN;AAILtD,aAAOA;AAJF,KAAP;AAMD,G;AACD;;;;;;wBAIAR,W,0BAAc;AACZ;AACA,QAAIiE,gBAAJ;AACA,WAAO,KAAKzE,IAAL,CAAUuB,UAAV,CAAqB,KAAKb,GAA1B,MAAmC,IAAnC,IACL,KAAKV,IAAL,CAAUuB,UAAV,CAAqB,KAAKb,GAAL,GAAW,CAAhC,MAAuC,IADlC,IAEL,KAAKV,IAAL,CAAUuB,UAAV,CAAqB,KAAKb,GAAL,GAAW,CAAhC,MAAuC,IAFzC,EAE+C;AAC7C+D,gBAAU,KAAK5B,eAAL,CAAqB,CAArB,EAAwB,IAAxB,CAAV;AACA,WAAK6B,aAAL,CAAmBC,IAAnB,CAAwBF,OAAxB;AACD;AACF,G;AACD;;;;;;wBAIAjD,U,yBAAa;AACX,QAAIoD,IAAI,CAAR;AAAA,QAAWC,aAAX;AAAA,QAAiBxD,aAAjB;AAAA,QAAuBa,MAAM,EAA7B;AAAA,QAAiCvB,eAAjC;AAAA,QAAyC6B,YAAzC;AAAA,QAA8CpB,OAAO,qBAAU0D,MAA/D;AACA,WAAOD,OAAO,gBAAOD,GAAP,CAAd,GAA4B;AAC1B,UAAI,CAAC,KAAK7D,MAAL,CAAY8D,KAAK,CAAL,CAAZ,CAAL,EAA2B;AACzB;AACD;AACDlE,eAASkE,KAAK,CAAL,EAAQlE,MAAjB;AACAU,aAAO,KAAKC,KAAL,CAAWC,UAAX,CAAsB,KAAKb,GAAL,GAAWC,MAAjC,CAAP;AACA;AACA,UAAIU,SAAS,IAAT,IAAiBA,SAAS,IAA1B,IAAkCA,SAAS,IAA3C,IACAA,SAAS,IADT,IACiBA,SAAS,IAD1B,IACkCA,SAAS,IAD3C,IAEAA,SAAS,IAFT,IAEiBA,SAAS,IAF9B,EAEoC;AAClCa,cAAM,KAAK6C,OAAL,CAAapE,MAAb,CAAN;AACAS,eAAOyD,KAAK,CAAL,CAAP;AACA;AACD;AACF;AACD,WAAO,KAAKnE,GAAL,GAAW,KAAKC,MAAvB,EAA+B;AAC7B6B,YAAM,KAAKxC,IAAL,CAAU,KAAKU,GAAf,CAAN;AACAW,aAAOmB,IAAIjB,UAAJ,CAAe,CAAf,CAAP;AACA,UAAIF,SAAS,IAAT,IAAiB,KAAKrB,IAAL,CAAUuB,UAAV,CAAqB,KAAKb,GAAL,GAAW,CAAhC,MAAuC,IAA5D,EAAkE;AAChEwB,eAAO,KAAKW,eAAL,CAAqB,CAArB,EAAwB,KAAxB,EAA+B7B,KAAtC;AACA;AACD,OAHD,MAGO,IAAIK,SAAS,IAAT,IAAiBA,SAAS,IAA9B,EAAoC;AACzCa,eAAO,KAAKc,QAAL,GAAgBhC,KAAvB;AACA;AACD;AACD;AACA,UAAIK,SAAS,IAAb,EAAmB;AACjBa,eAAO,KAAKP,IAAL,EAAP;AACA;AACD;AACD;AACA,UAAIN,SAAS,IAAb,EAAmB;AACjB;AACD;AACDa,aAAO,KAAKP,IAAL,EAAP;AACD;AACD,QAAMd,QAAQ,KAAKK,QAAL,CAAcE,IAAd,EAAoBc,GAApB,CAAd;AACArB,UAAMG,KAAN,GAAc,KAAKqC,cAAL,CAAoBnB,GAApB,CAAd;AACA,WAAOrB,KAAP;AACD,G;AACD;;;;;;wBAIA0C,G,kBAAM;AACJ,QAAIrB,MAAM,EAAV;AAAA,QAAcrB,cAAd;AAAA,QAAqBO,aAArB;AACA,WAAOP,QAAQ,KAAKP,YAAL,EAAf,GAAqC;AACnC4B,UAAIyC,IAAJ,CAAS9D,KAAT;AACAO,aAAOP,MAAMO,IAAb;AACA,UAAIA,SAAS,qBAAU4D,GAAnB,IAA0B5D,SAAS,qBAAUM,cAA7C,IACAN,SAAS,qBAAUS,eADnB,IACsCT,SAAS,qBAAUY,SADzD,IAEAZ,SAAS,qBAAUa,aAFnB,IAEoCb,SAAS,qBAAUe,cAFvD,IAGAf,SAAS,qBAAUD,gBAHvB,EAIE;AACA;AACD;AACD,WAAKhB,SAAL,GAAiBU,KAAjB;AACA,UAAIO,SAAS,qBAAU6D,aAAnB,IACA7D,SAAS,qBAAU8D,QADnB,IAEA9D,SAAS,qBAAU+D,YAFnB,IAGA/D,SAAS,qBAAU0D,MAHvB,EAG+B;AAC7B,aAAK1E,MAAL,GAAcR,OAAOE,QAArB;AACD;AACF;AACD,WAAOoC,GAAP;AACD,G;;;;;kBA3YkBnC,W","file":"tokenize.js","sourcesContent":["import BaseTokenize from '../../util/tokenize.js';\nimport TokenType from '../../util/token_type.js';\nimport {comments} from '../../util/config.js';\nimport SelectorTokenize from './selector_tokenize.js';\n// import Message from '../../util/message.js';\nimport {isHackChar} from './util.js';\nimport {atType} from './config.js';\n\nconst multiComment = comments[1];\n\n/**\n * status\n */\nconst STATUS = {\n  SELECTOR: 0,\n  PROPERTY: 1\n};\n\n/**\n * css tokenize\n */\nexport default class CssTokenize extends BaseTokenize {\n  /**\n   * constructor\n   *\n   */\n  constructor(text, options = {\n    parseSelector: false\n  }) {\n    super(text, options);\n    this.prevToken = {};\n    this.status = STATUS.SELECTOR;\n    this.skipCd();\n  }\n  /**\n   * get next token\n   * @return {void} []\n   */\n  getNextToken() {\n    this.skipWhiteSpace();\n    this.skipComment();\n    this.startToken();\n    if (this.pos >= this.length) {\n      return this.getLastToken();\n    }\n\n    const token = this.getTplToken();\n    if (token) {\n      return token;\n    }\n    if (this.lookAt(multiComment[0] + '!')) {\n      const value = this.getMatched(multiComment[0] + '!', multiComment[1]);\n      return this.getToken(TokenType.RESERVED_COMMENT, value);\n    }\n    const type = this.prevToken.type;\n    const code = this._text.charCodeAt(this.pos);\n    switch (code) {\n      case 0x40: // @\n        return this.getAtToken();\n      case 0x7b: // {\n        if (type === TokenType.CSS_SELECTOR) {\n          this.status = STATUS.PROPERTY;\n        }\n        return this.getToken(TokenType.CSS_LEFT_BRACE, this.next());\n      case 0x7d: // }\n        this.status = STATUS.SELECTOR;\n        const token1 = this.getToken(TokenType.CSS_RIGHT_BRACE, this.next());\n        this.prevToken = token1;\n        return token1;\n      case 0x3a: // :\n        if (type === TokenType.CSS_PROPERTY ||\n            type === TokenType.CSS_SELECTOR ||\n            type === TokenType.CSS_VALUE ||\n            type === TokenType.CSS_COLON) {\n          const token = this.getToken(TokenType.CSS_COLON, this.next());\n          this.prevToken = token;\n          return token;\n        }\n        break;\n      case 0x3b: // ;\n        const token = this.getToken(TokenType.CSS_SEMICOLON, this.next());\n        this.prevToken = token;\n        return token;\n      case 0x5b: // [\n        if (type === TokenType.CSS_SELECTOR ||\n            type === TokenType.CSS_VALUE ||\n            type === TokenType.CSS_SEMICOLON) {\n          // for hack [;color: red;]\n          const ret = this.getMatched('[', ']');\n          if (ret) {\n            return this.getToken(TokenType.CSS_BRACK_HACK, ret);\n          }\n        }\n    }\n    if (type === TokenType.CSS_PROPERTY || type === TokenType.CSS_COLON) {\n      return this.getValueToken();\n    }\n    if (this.status === STATUS.PROPERTY) {\n      return this.getPropertyToken();\n    }\n    return this.getSelectorToken();\n  }\n  /**\n   * get selector or name token\n   * @return {Object} []\n   */\n  getSelectorToken() {\n    let ret = '', code, str, token, chr, record, escape = false;\n    let tmpValue = '', tmpFlag = false;\n    while (this.pos < this.length) {\n      token = this.getTplToken();\n      if (token) {\n        ret += token.value;\n        continue;\n      }\n      chr = this.text[this.pos];\n      code = chr.charCodeAt(0);\n      if (code === 0x5c || escape) {\n        escape = !escape;\n        ret += this.next();\n        continue;\n      } else if (code === 0x7b) { // {\n        break;\n      } else if (code === 0x2f && this.text.charCodeAt(this.pos + 1) === 0x2a) {\n        record = record || this.record();\n        tmpValue += this.getCommentToken(1, false).value;\n        continue;\n      }\n      if (tmpValue && code !== 0x5b) {\n        tmpValue += chr;\n        tmpFlag = true;\n      }\n      if (record && !this.isWhiteSpace(code)) {\n        record = undefined;\n        ret += tmpValue;\n        tmpValue = '';\n      }\n      if (!escape && (code === 0x22 || code === 0x27)) {\n        ret += this.getQuote({\n          rollback: true\n        }).value;\n        continue;\n      } else if (code === 0x5b) { // [ ]\n        str = this.getMatchedChar(0x5b, 0x5d, {\n          quote: true\n        });\n        if (str) {\n          ret += str;\n          continue;\n        }\n      } else if (code === 0x28) { // ( )\n        str = this.getMatchedChar(0x28, 0x29, {\n          quote: true,\n          nest: true\n        });\n        if (str) {\n          ret += str;\n          continue;\n        }\n      }\n      if (tmpFlag) {\n        this.next();\n        tmpFlag = false;\n      } else {\n        ret += this.next();\n      }\n    }\n    token = this.getToken(TokenType.CSS_SELECTOR, ret);\n    token.value = this.skipRightSpace(ret);\n    if (record) {\n      // record.spaceBefore = record.newlineBefore = 0;\n      this.rollback(record);\n    }\n    if (this.options.parseSelector) {\n      token.ext = new SelectorTokenize(token.value).run();\n    }\n    return token;\n  }\n  /**\n   * get property token\n   * @return {Object} []\n   */\n  getPropertyToken() {\n    let ret = '', chr, code;\n    this.record();\n    while (this.pos < this.length) {\n      chr = this._text[this.pos];\n      code = chr.charCodeAt(0);\n      // ;\n      if (code === 0x3b) {\n        this.rollback();\n        return this.getValueToken();\n      }\n      // : / }\n      if (code === 0x3a || code === 0x2f || code === 0x7d || this.isWhiteSpace(code)) {\n        break;\n      }\n      ret += this.next();\n    }\n    return this.getToken(TokenType.CSS_PROPERTY, ret, this.parseProperty(ret));\n  }\n  /**\n   * parse property\n   * @return {Object} []\n   */\n  parseProperty(property) {\n    let prefix = '', suffix = '', code = property.charCodeAt(0);\n    if (code === 0x2d) {\n      property = property.replace(/^\\-\\w+\\-/, function(a) {\n        prefix = a;\n        return '';\n      });\n    } else if (isHackChar(code)) {\n      prefix = property[0];\n      property = property.slice(1);\n    }\n    return {\n      prefix: prefix.toLowerCase(),\n      suffix: suffix,\n      value: property.toLowerCase()\n    };\n  }\n  /**\n   * get value token\n   * @return {Object} []\n   */\n  getValueToken() {\n    let ret = '', code, chr, token;\n    let escape = false, record, quote, hasTpl = false;\n    let tplValue = '', tmpFlag = false;\n    while (this.pos < this.length) {\n      token = this.getTplToken();\n      if (token) {\n        ret += token.value;\n        hasTpl = true;\n        continue;\n      }\n      chr = this.text[this.pos];\n      code = chr.charCodeAt(0);\n      if (code === 0x5c || escape) {\n        escape = !escape;\n        ret += this.next();\n        continue;\n      } else if (code === 0x3b || code === 0x7d) { // ; or }\n        break;\n      } else if (code === 0x2f && this.text.charCodeAt(this.pos + 1) === 0x2a) {\n        record = record || this.record();\n        tplValue += this.getCommentToken(1, false).value;\n        continue;\n      }\n      if (tplValue) {\n        tplValue += chr;\n        tmpFlag = true;\n      }\n      if (record && !this.isWhiteSpace(code)) {\n        record = undefined;\n        ret += tplValue;\n        tplValue = '';\n      }\n      if (!escape && (code === 0x22 || code === 0x27)) {\n        quote = this.getQuote({\n          rollback: true\n        });\n        if (!quote.find) {\n          this.error(`can not find matched quote \\`${chr}\\``);\n        }\n        ret += quote.value;\n        continue;\n      } else if (code === 0x28) { // ( )\n        ret += this.getMatchedChar(0x28, 0x29, {\n          nest: true,\n          quote: true,\n          multi_comment: true\n        });\n        continue;\n      }\n      if (tmpFlag) {\n        this.next();\n        tmpFlag = false;\n      } else {\n        ret += this.next();\n      }\n    }\n    token = this.getToken(TokenType.CSS_VALUE, ret);\n    ret = this.skipRightSpace(ret);\n    token.value = ret;\n    if (record) {\n      // record.spaceBefore = record.newlineBefore = 0;\n      this.rollback(record);\n    }\n    token.ext = this.parseValue(ret);\n    token.ext.hasTpl = hasTpl;\n    return token;\n  }\n  /**\n   * parse css value\n   * @param  {String} value []\n   * @return {Object}       []\n   */\n  parseValue(value) {\n    // get css value suffix & important\n    let prefix = '', suffix = '', important = false;\n    if (value.indexOf('\\\\') > -1) {\n      value = value.replace(/(?:\\\\\\d)+$/, function(a) {\n        suffix = a;\n        return '';\n      });\n    }\n    if (value.indexOf('!') > -1) {\n      value = value.replace(/!\\s*important/i, function() {\n        important = true;\n        return '';\n      });\n    }\n    // get css value prefix\n    if (value.charCodeAt(0) === 0x2d) {\n      value = value.replace(/^\\-\\w+\\-/, function(a) {\n        prefix = a;\n        return '';\n      });\n    }\n    if (suffix || important) {\n      value = value.trim();\n    }\n    return {\n      prefix: prefix,\n      suffix: suffix,\n      important: important,\n      value: value\n    };\n  }\n  /**\n   * skip comment\n   * @return {void} []\n   */\n  skipComment() {\n    // start with /*, but not /*!\n    let comment;\n    while (this.text.charCodeAt(this.pos) === 0x2f &&\n      this.text.charCodeAt(this.pos + 1) === 0x2a &&\n      this.text.charCodeAt(this.pos + 2) !== 0x21) {\n      comment = this.getCommentToken(1, true);\n      this.commentBefore.push(comment);\n    }\n  }\n  /**\n   * get @ token\n   * @return {Object} []\n   */\n  getAtToken() {\n    let i = 0, item, code, ret = '', length, chr, type = TokenType.CSS_AT;\n    for (; item = atType[i++];) {\n      if (!this.lookAt(item[0])) {\n        continue;\n      }\n      length = item[0].length;\n      code = this._text.charCodeAt(this.pos + length);\n      // whitespace or ; or { or / or ' or \" or : or ,\n      if (code === 0x20 || code === 0x3b || code === 0x7b ||\n          code === 0x2f || code === 0x22 || code === 0x27 ||\n          code === 0x3a || code === 0x2c) {\n        ret = this.forward(length);\n        type = item[1];\n        break;\n      }\n    }\n    while (this.pos < this.length) {\n      chr = this.text[this.pos];\n      code = chr.charCodeAt(0);\n      if (code === 0x2f && this.text.charCodeAt(this.pos + 1) === 0x2a) {\n        ret += this.getCommentToken(1, false).value;\n        continue;\n      } else if (code === 0x22 || code === 0x27) {\n        ret += this.getQuote().value;\n        continue;\n      }\n      // ;\n      if (code === 0x3b) {\n        ret += this.next();\n        break;\n      }\n      // {\n      if (code === 0x7b) {\n        break;\n      }\n      ret += this.next();\n    }\n    const token = this.getToken(type, ret);\n    token.value = this.skipRightSpace(ret);\n    return token;\n  }\n  /**\n   * run\n   * @return {Array} [text tokens]\n   */\n  run() {\n    let ret = [], token, type;\n    for (; token = this.getNextToken();) {\n      ret.push(token);\n      type = token.type;\n      if (type === TokenType.TPL || type === TokenType.CSS_LEFT_BRACE ||\n          type === TokenType.CSS_RIGHT_BRACE || type === TokenType.CSS_COLON ||\n          type === TokenType.CSS_SEMICOLON || type === TokenType.CSS_BRACK_HACK ||\n          type === TokenType.RESERVED_COMMENT\n      ) {\n        continue;\n      }\n      this.prevToken = token;\n      if (type === TokenType.CSS_FONT_FACE ||\n          type === TokenType.CSS_PAGE ||\n          type === TokenType.CSS_VIEWPORT ||\n          type === TokenType.CSS_AT) {\n        this.status = STATUS.PROPERTY;\n      }\n    }\n    return ret;\n  }\n}\n"]}